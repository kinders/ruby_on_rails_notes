# Twitter Bootstrap 3.2 for Rails 4 Asset Pipeline
## 序言
Bootstrap is a toolkit from Twitter designed to kickstart development of webapps and sites.
It includes base CSS and HTML for typography, forms, buttons, tables, grids, navigation, and more.
Bootstrap是一个Twitter设计的web程序和站点的快速工具包。
它包含基于CSS和HTML的排版、表单、按键、表格、栅格、导航等等。

twitter-bootstrap-rails project integrates Bootstrap CSS toolkit for Rails Asset Pipeline (Rails 4, 3.1, 3.2 are supported)
twitter-bootstrap-rails项目集成了为 Rails Asset Pipeline 定制的 Bootstrap CSS 工具包。

[![Gem Version](https://badge.fury.io/rb/twitter-bootstrap-rails.svg)](http://badge.fury.io/rb/twitter-bootstrap-rails)
[![Dependency Status](https://gemnasium.com/seyhunak/twitter-bootstrap-rails.svg?travis)](https://gemnasium.com/seyhunak/twitter-bootstrap-rails?travis)
[![Code Climate](https://codeclimate.com/github/seyhunak/twitter-bootstrap-rails/badges/gpa.svg)](https://codeclimate.com/github/seyhunak/twitter-bootstrap-rails?branch=master)
[![Coverage Status](https://coveralls.io/repos/seyhunak/twitter-bootstrap-rails/badge.png?branch=master)](https://coveralls.io/repos/seyhunak/twitter-bootstrap-rails/badge.png?branch=master)
[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/seyhunak/twitter-bootstrap-rails/trend.png)](https://bitdeli.com/free "Bitdeli Badge")

## Screencasts  视频指导

#### Installing twitter-bootstrap-rails, generators, usage and more
<img width="180" height="35" src="http://oi49.tinypic.com/s5wn05.jpg"></img>

Screencasts provided by <a href="http://railscasts.com">Railscasts</a> (Ryan Bates)

[Twitter Bootstrap Basics](http://railscasts.com/episodes/328-twitter-bootstrap-basics "Twitter Bootstrap Basics")
in this episode you will learn how to include Bootstrap into Rails application with the twitter-bootstrap-rails gem.

[More on Twitter Bootstrap](http://railscasts.com/episodes/329-more-on-twitter-bootstrap "More on Twitter Bootstrap")
in this episode continues on the Bootstrap project showing how to display flash messages, add form validations with SimpleForm, customize layout with variables, and switch to using Sass.
(Note: This episode is pro episode)

## Installing the Gem 安装
### 两种方式
The [Twitter Bootstrap Rails gem](http://rubygems.org/gems/twitter-bootstrap-rails) can provide the Bootstrap stylesheets in two ways.

The plain CSS way is how Bootstrap is provided on [the official website](http://twbs.github.io/bootstrap/).

The [Less](http://lesscss.org/) way provides more customization options, like changing theme colors, and provides useful Less mixins for your code, but requires the
Less gem and the Ruby Racer Javascript runtime (not available on Microsoft Windows).

### Installing the Less stylesheets  安装 Less 样式表

To use Less stylesheets, you'll need the [less-rails gem](http://rubygems.org/gems/less-rails), and one of [JavaScript runtimes supported by CommonJS](https://github.com/cowboyd/commonjs.rb#supported-runtimes).

Include these lines in the Gemfile to install the gems from [RubyGems.org](http://rubygems.org):

```ruby
gem "therubyracer"
gem "less-rails" #Sprockets (what Rails 3.1 uses for its asset pipeline) supports LESS
gem "twitter-bootstrap-rails"
```

or you can install from latest build;

```ruby
gem 'twitter-bootstrap-rails', :git => 'git://github.com/seyhunak/twitter-bootstrap-rails.git'
```

Then run `bundle install` from the command line:

    bundle install

Then run the bootstrap generator to add Bootstrap includes into your assets:

    rails generate bootstrap:install less

If you need to skip coffeescript replacement into app generators, use:

    rails generate bootstrap:install --no-coffeescript

### Installing the CSS stylesheets  安装 CSS 样式表

If you don't need to customize the stylesheets using Less, the only gem you need is the `twitter-bootstrap-rails` gem:
如果你不需要使用 Less 自定义样式表，只需要一个`twitter-bootstrap-rails`软件包就可以了：

```ruby
gem "twitter-bootstrap-rails"
```

After running `bundle install`, run the generator:
运行`bundle install`之后，运行生成器：

    rails generate bootstrap:install static


## Generating layouts and views 生成布局和视图

You can run following generators to get started with Bootstrap quickly.
可以运行下面的生成器来快速使用Bootstrap：


Layout (generates Bootstrap compatible layout) - (Haml and Slim supported)
布局（生成Bootstrap兼容的布局）-（也支持haml和slim）

Usage:
用法：

    rails g bootstrap:layout [LAYOUT_NAME]


Themed (generates Bootstrap compatible scaffold views.) - (Haml and Slim supported)
主题（生成Bootstrap兼容的支架视图）- （也支持Haml和Slim）

Usage:
用法：

    rails g bootstrap:themed [RESOURCE_NAME]


Example:
举例：

    rails g scaffold Post title:string description:text
    rake db:migrate
    rails g bootstrap:themed Posts

Notice the plural usage of the resource to generate bootstrap:themed.
注意使用`generate bootstrap:themed`时资源是复数用法。

## Using with Less 使用Less

Bootstrap was built with Preboot, an open-source pack of mixins and variables to be used in conjunction with Less, a CSS preprocessor for faster and easier web development.
Bootstrap 是使用Preboot建构的，Preboot是一款开源的具有混入和变量功能的包，它和Less一块使用，Less则是一款快速易用的web开发的预处理器。

## Using stylesheets with Less  使用 Less 样式表

You have to require Bootstrap LESS (bootstrap_and_overrides.css.less) in your application.css
在application.css里需要请求Bootstrap LESS（bootstrap_and_overrides.css.less）：

```css
/*
 *= require bootstrap_and_overrides
 */

/* Your stylesheets goes here... */
```

To use individual components from bootstrap, your bootstrap_and_overrides.less could look like this:
要使用bootstrap里的个别组件，bootstrap_and_overrides.less看起来应该像：

```css
// Core variables and mixins
@import "twitter/bootstrap/variables.less";
@import "twitter/bootstrap/mixins.less";

// Reset and dependencies
@import "twitter/bootstrap/normalize.less";
@import "twitter/bootstrap/print.less";
//@import "twitter/bootstrap/glyphicons.less"; // Excludes glyphicons

// Core CSS
@import "twitter/bootstrap/scaffolding.less";
@import "twitter/bootstrap/type.less";
@import "twitter/bootstrap/code.less";
@import "twitter/bootstrap/grid.less";
@import "twitter/bootstrap/tables.less";
@import "twitter/bootstrap/forms.less";
@import "twitter/bootstrap/buttons.less";

// Components
@import "twitter/bootstrap/component-animations.less";
@import "twitter/bootstrap/dropdowns.less";
@import "twitter/bootstrap/button-groups.less";
@import "twitter/bootstrap/input-groups.less";
@import "twitter/bootstrap/navs.less";
@import "twitter/bootstrap/navbar.less";
@import "twitter/bootstrap/breadcrumbs.less";
@import "twitter/bootstrap/pagination.less";
@import "twitter/bootstrap/pager.less";
@import "twitter/bootstrap/labels.less";
@import "twitter/bootstrap/badges.less";
@import "twitter/bootstrap/jumbotron.less";
@import "twitter/bootstrap/thumbnails.less";
@import "twitter/bootstrap/alerts.less";
@import "twitter/bootstrap/progress-bars.less";
@import "twitter/bootstrap/media.less";
@import "twitter/bootstrap/list-group.less";
@import "twitter/bootstrap/panels.less";
@import "twitter/bootstrap/responsive-embed.less";
@import "twitter/bootstrap/wells.less";
@import "twitter/bootstrap/close.less";

// Components w/ JavaScript
@import "twitter/bootstrap/modals.less";
@import "twitter/bootstrap/tooltip.less";
@import "twitter/bootstrap/popovers.less";
@import "twitter/bootstrap/carousel.less";

// Utility classes
@import "twitter/bootstrap/utilities.less";
@import "twitter/bootstrap/responsive-utilities.less";
```

If you'd like to alter Bootstrap's own variables, or define your LESS styles inheriting Bootstrap's mixins, you can do so inside bootstrap_and_overrides.css.less:
如果想改变Bootstrap的变量，或要定义继承了Bootstrap混入的LESS样式，可以在bootstrap_and_overrides.less里面这样写：

```css
@link-color: #ff0000;
```

### SASS

If you are using SASS to compile your application.css (e.g. your manifest file is application.css.sass or application.css.scss) you may get this:

```
Invalid CSS after "*": expected "{", was "= require twitt..."
(in app/assets/stylesheets/application.css)
(sass)
```

If this is the case, you **must** use @import instead of `*=` in your manifest file, or don't compile your manifest with SASS.

### Icons

By default, this gem overrides standard Bootstraps's Glyphicons with Font Awesome (http://fortawesome.github.com/Font-Awesome/).

This should appear inside _bootstrap_and_overrides *(based on you twitter-bootstrap-rails version)*

**From 2.2.7**

```css
// Font Awesome
@fontAwesomeEotPath: asset-url("fontawesome-webfont.eot");
@fontAwesomeEotPath_iefix: asset-url("fontawesome-webfont.eot?#iefix");
@fontAwesomeWoffPath: asset-url("fontawesome-webfont.woff");
@fontAwesomeTtfPath: asset-url("fontawesome-webfont.ttf");
@fontAwesomeSvgPath: asset-url("fontawesome-webfont.svg#fontawesomeregular");
@import "fontawesome/font-awesome";
```

**Before 2.2.7**

```css
// Font Awesome
@fontAwesomeEotPath: "/assets/fontawesome-webfont.eot";
@fontAwesomeEotPath_iefix: "/assets/fontawesome-webfont.eot?#iefix";
@fontAwesomeWoffPath: "/assets/fontawesome-webfont.woff";
@fontAwesomeTtfPath: "/assets/fontawesome-webfont.ttf";
@fontAwesomeSvgPath: "/assets/fontawesome-webfont.svg#fontawesomeregular";
@import "fontawesome";
```

If you would like to restore the default Glyphicons, inside the _bootstrap_and_overrides.css.less_ remove the FontAwesome declaration and uncomment the line:

```less
// Font Awesome
// @fontAwesomeEotPath: asset-url("fontawesome-webfont.eot");
// @fontAwesomeEotPath_iefix: asset-url("fontawesome-webfont.eot?#iefix");
// @fontAwesomeWoffPath: asset-url("fontawesome-webfont.woff");
// @fontAwesomeTtfPath: asset-url("fontawesome-webfont.ttf");
// @fontAwesomeSvgPath: asset-url("fontawesome-webfont.svg#fontawesomeregular");
// @import "fontawesome/font-awesome";

// Glyphicons
@import "twitter/bootstrap/glyphicons.less";
```

## Using JavaScript 使用JS

Require Bootstrap JS (bootstrap.js) in your application.js
在application.js文件中请求Bootstrap JS（bootstrap.js）。

```js
//= require twitter/bootstrap

$(function(){
  /* Your JavaScript goes here... */
});
```

If you want to customize what is loaded, your application.js would look something like this
要定制加载的内容，application.js应该看起来像这样：

```js

#= require jquery
#= require jquery_ujs
#= require twitter/bootstrap/transition
#= require twitter/bootstrap/alert
#= require twitter/bootstrap/modal
#= require twitter/bootstrap/button
#= require twitter/bootstrap/collapse
```

...and so on for each bootstrap js component.
等等bootstrap js 组件。

## Using CoffeeScript (optionally)

Using Bootstrap with the CoffeeScript is easy.
twitter-bootstrap-rails generates a "bootstrap.js.coffee" file for you
to /app/assets/javascripts/ folder.

```coffee
jQuery ->
  $("a[rel~=popover], .has-popover").popover()
  $("a[rel~=tooltip], .has-tooltip").tooltip()
```

## Using Helpers 使用辅助器

### Modal Helper 模态辅助器 modal_dialog
You can create modals easily using the following example. The header, body, and footer all accept content_tag or plain html.
可以使用下面的例子轻易创建一个模态对话框。
header、body和footer都接收content_tag或纯文本html。

The href of the button to launch the modal must match the id of the modal dialog.
启动模态的按键的href必须匹配模态对话框的id。
It also accepts a block for the header, body, and footer.
它页接受一个代码块来设置头部、主体和脚部。
If you are getting a complaint about the modal_helper unable to merge a hash it is due to this.
 模态辅助器还能将将散列合并起来：
````
<%= content_tag :a, "Modal", href: "#modal", class: 'btn', data: {toggle: 'modal'} %>

<%= modal_dialog id: "modal",
         header: { show_close: true, dismiss: 'modal', title: 'Modal header' },
         body:   { content: 'This is the body' },
         footer: { content: content_tag(:button, 'Save', class: 'btn') } %>

````

### Navbar Helper 导航辅助器
#### 全面例子
It should let you write things like:
可以这样写：

````

<%= nav_bar fixed: :top, brand: "Fashionable Clicheizr 2.0", responsive: true do %>
    <%= menu_group do %>
        <%= menu_item "Home", root_path %>
        <%= menu_divider %>
        <%= drop_down "Products" do %>
            <%= menu_item "Things you can't afford", expensive_products_path %>
            <%= menu_item "Things that won't suit you anyway", harem_pants_path %>
            <%= menu_item "Things you're not even cool enough to buy anyway", hipster_products_path %>
            <% if current_user.lives_in_hackney? %>
                <%= menu_item "Bikes", fixed_wheel_bikes_path %>
            <% end %>
        <% end %>
        <%= menu_item "About Us", about_us_path %>
        <%= menu_item "Contact", contact_path %>
    <% end %>
    <%= menu_group pull: :right do %>
        <% if current_user %>
            <%= menu_item "Log Out", log_out_path %>
        <% else %>
            <%= form_for @user, url: session_path(:user), html => {class: "navbar-form pull-right"} do |f| -%>
              <p><%= f.text_field :email %></p>
              <p><%= f.password_field :password %></p>
              <p><%= f.submit "Sign in" %></p>
            <% end -%>
        <% end %>
    <% end %>
<% end %>

````

#### Navbar scaffolding 导航生成

In your view file (most likely application.html.erb) to get a basic navbar set up you need to do this:
在视图文件设置导航栏，需要这样：

````
<%= nav_bar %>
````

Which will render:
将会生成：

    <div class="navbar">
      <div class="container">
      </div>
    </div>


#### Fixed navbar 固定导航栏

If you want the navbar to stick to the top of the screen, pass in the option like this:
如果要导航栏固定在屏幕的上方，可像如下传入选项

````
<%= nav_bar fixed: :top  %>
````

To render:
将会呈现：

    <div class="navbar navbar-fixed-top">
      <div class="container">
      </div>
    </div>

#### Static navbar 静止导航栏

If you want a full-width navbar that scrolls away with the page, pass in the option like this:
如果想全宽度的导航栏随页面滑动，可像下面传入参数：

````
<%= nav_bar static: :top  %>
````

To render:
将会呈现：

    <div class="navbar navbar-static-top">
      <div class="container">
      </div>
    </div>


#### Brand name 标志名称

Add the name of your site on the left hand edge of the navbar.
By default, it will link to root_url.
Passing a brand_link option will set the url to whatever you want.
在导航栏的左部边缘添加网站的名称。
默认情况下，它会连接到首页中。
传入brand_link选项可链接到其他地址。
 
````
<%= nav_bar brand: "We're sooo web 2.0alizr", brand_link: account_dashboard_path  %>
````

Which will render:
将会呈现：

    <div class="navbar">
      <div class="container">
          <a class="navbar-brand" href="/accounts/dashboard">
            We're sooo web 2.0alizr
          </a>
      </div>
    </div>


#### Optional responsive variation 可选的响应变体

If you want the responsive version of the navbar to work (One that shrinks down on mobile devices etc.), you need to pass this option:

````
<%= nav_bar responsive: true %>
````
Which renders the html quite differently:


    <div class="navbar">
      <div class="container">
        <!-- .navbar-toggle is used as the toggle for collapsed navbar content -->
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </button>
        <!-- Everything in here gets hidden at 940px or less -->
        <div class="navbar-collapse collapse">
          <!-- menu items gets rendered here instead -->
        </div>
      </div>
    </div>


#### Nav links 导航链接

This is the 'meat' of the code where you define your menu items.
这是定义的菜单项目的主要代码。

You can group menu items in theoretical boxes which you can apply logic to - e.g. show different collections for logged in users/logged out users, or simply right align a group.
可以将菜单项目按逻辑进行分组——比如，将登录和没有登录的用户进行分组，或者将分组进行右对齐。

The active menu item will be inferred from the link for now.
激活的菜单项目将被屏蔽链接。

The important methods here are menu_group and menu_item.
这里重要的方法是menu_group和menu_item。

menu_group only takes one argument - :pull - this moves the group left or right when passed :left or :right.
menu_group方法只带一个参数 :pull，它会根据赋值left或right将菜单组推向左边或右边。
menu_item generates a link wrapped in an li tag.
menu_item会生成一个被li标签包装的链接。
It takes two arguments and an options hash.
带有两个参数和一个选项散列。
The first argument is the name (the text that will appear in the menu), and the path (which defaults to "#" if left blank).
第一个参数是名称（菜单中会出现的文字）和路径（如果为空则默认为“#”）
The rest of the options are passed straight through to the link_to helper, so that you can add classes, ids, methods or data tags etc.
剩下的选项直接传给link_to辅助器，因此可以增加类、id、方法或data标签等等。
 
````

<%= nav_bar fixed: :top, brand: "Ninety Ten" do %>
    <%= menu_group do %>
        <%= menu_item "Home", root_path %>
        <%= menu_item "About Us", about_us_path %>
        <%= menu_item "Contact", contact_path %>
    <% end %>
    <% if current_user %>
        <%= menu_item "Log Out", log_out_path %>
    <% else %>
        <%= menu_group pull: :right do %>
            <%= menu_item "Sign Up", registration_path %>
            <%= form_for @user, url: session_path(:user) do |f| -%>
              <p><%= f.text_field :email %></p>
              <p><%= f.password_field :password %></p>
              <p><%= f.submit "Sign in" %></p>
            <% end -%>
        <% end %>
    <% end %>
<% end %>

````

#### Dropdown menus 下拉菜单

For multi-level list options, where it makes logical sense to group menu items, or simply to save space if you have a lot of pages, you can group menu items into drop down lists like this:
对于多层列表选项，需要根据逻辑对菜单项目进行分组，或只是因为多页而需要节省空间，可以像下面这样将菜单项目分组到下拉列表中来。

````
<%= nav_bar do %>
    <%= menu_item "Home", root_path %>

    <%= drop_down "Products" do %>
        <%= menu_item "Latest", latest_products_path %>
        <%= menu_item "Top Sellers", popular_products_path %>
        <%= drop_down_divider %>
        <%= menu_item "Discount Items", discounted_products_path %>
    <% end %>

    <%= menu_item "About Us", about_us_path %>
    <%= menu_item "Contact", contact_path %>
<% end %>

````

#### Dividers 分隔符

Dividers are just vertical bars that visually separate logically disparate groups of menu items

````

<%= nav_bar fixed: :bottom do %>
    <%= menu_item "Home", root_path %>
    <%= menu_item "About Us", about_us_path %>
    <%= menu_item "Contact", contact_path %>

    <%= menu_divider %>

    <%= menu_item "Edit Profile", edit_user_path(current_user) %>
    <%= menu_item "Account Settings", edit_user_account_path(current_user, @account) %>
    <%= menu_item "Log Out", log_out_path %>
<% end %>

````

#### Forms in navbar 导航栏里的表单

At the moment - this is just a how to...

You need to add this class to the form itself (Different form builders do this in different ways - please check out the relevant docs)
需要将这个类添加到表单自身中（不同于构建器的做法——请查看相关文档）

````css
.navbar-form
````

To pull the form left or right, add either of these classes:
要将表单推向左或右，增加下面的类：
````css
.pull-left
.pull-right
````

If you want the Bootstrap search box (I think it just rounds the corners), use:
如果想Bootstrap搜索框（一般角落），使用：
````css
.navbar-search
````
Instead of:
而不是：
````css
.navbar-form
````

To change the size of the form fields, use .span2 (or however many span widths you want) to the input itself.
要改变表单字段的尺寸，在input上使用.span2（或其他你想要的span宽度）。

#### Component alignment 对齐组件

You can shift things to the left or the right across the nav bar. 
整个导航栏可以将元素左移或右移。
It's easiest to do this on grouped menu items:
最简单的方式是分组菜单项目：

````
<%= nav_bar fixed: :bottom do %>
    <% menu_group do %>
        <%= menu_item "Home", root_path %>
        <%= menu_item "About Us", about_us_path %>
        <%= menu_item "Contact", contact_path %>
    <% end %>
    <% menu_group pull: :right do %>
        <%= menu_item "Edit Profile", edit_user_path(current_user) %>
        <%= menu_item "Account Settings", edit_user_account_path(current_user, @account) %>
        <%= menu_item "Log Out", log_out_path %>
    <% end %>
<% end %>

````

#### Text in the navbar 导航栏里的文字

If you want to put regular plain text in the navbar anywhere, you do it like this:
如果想将普通文字放在导航栏里的任何位置，可以这样写：

````
<%= nav_bar brand: "Apple" do %>
    <%= menu_text "We make shiny things" %>
    <%= menu_item "Home", root_path %>
    <%= menu_item "About Us", about_us_path %>
<% end %>

````
It also takes the :pull option to drag it to the left or right.
它也带有:pull选项将文字左移或右移。


### Flash helper 闪存辅助器  bootstrap_flash

Add flash helper `<%= bootstrap_flash %>` to your layout (built-in with layout generator)
在布局（布局生成器内建的）里增加闪存辅助器`<%= bootstrap_flash %>`。

### Breadcrumbs Helpers 面包屑辅助器 render_breadcrumbs

*Notice* If your application is using [breadcrumbs-on-rails](https://github.com/weppos/breadcrumbs_on_rails) you will have a namespace collision with the add_breadcrumb method.
You do not need to use these breadcrumb gems since this gem provides the same functionality out of the box without the additional dependency.
*注意* 如果程序使用[breadcrumbs-on-rails](https://github.com/weppos/breadcrumbs_on_rails)软件包，程序会在add_breadcrumb方法上有命名空间的冲突。

Add breadcrumbs helper `<%= render_breadcrumbs %>` to your layout.
You can also specify a divider for it like this: `<%= render_breadcrumbs('>') %>` (default divider is `/`).
在布局上添加面包屑辅助器`<%= render_breadcrumbs %>`。
也可以指定一个分隔符，比如`<%= render_breadcrumbs('>') %>`（默认分隔符是‘/’）。

Full example:
完整的例子：

```ruby

render_breadcrumbs(" / ", { class: '', item_class: '', divider_class: '', active_class: 'active' })

```
<kinder:note> 
这个视图生成的面包屑是什么？
不是`/class/item_class/divider_class/active_class`吧？
`{}`散列里面的应该是普通的html选项，怎么好几个都是空呢？表示没有该类吗？好象是。
</kinder:note> 

```ruby
class ApplicationController
  add_breadcrumb :root # 'root_path' will be used as url
end
```
<kinder:note> 在程序控制器指定根部吗？
```ruby
class ExamplesController < ApplicationController
  add_breadcrumb :index, :examples_path

  def edit
    @example = Example.find params[:id]
    add_breadcrumb @example     # @example.to_s as name, example_path(@example) as url
    add_breadcrumb :edit, edit_example_path(@example)
  end
end
```
<kinder:note> 这样理解吗？
在索引视图生成面包屑？
在编辑视图生成两层面包屑？
</kinder:note> 

All symbolic names translated with I18n.
所有的符号名称用I18n翻译。
See [I18n Internationalization Support](#i18n-internationalization-support) section.
参见下面国际化支持一节。
 
### Element utility helpers 基本工具辅助器：徽标、标签、图标

Badge:
徽标
```erb
<%= badge(12, :warning) %> <span class="badge badge-warning">12</span>
```

Label:
标签
```erb
<%= tag_label('Gut!', :success) %> <span class="label label-success">Gut!</span>
```

Glyph:
小图
```erb
<%= glyph(:pencil) %> <i class="icon-pencil"></i>

<%= glyph(:pencil, {tag: :span}) %> <span class="icon-pencil"></span>
```

### I18n Internationalization Support 国际化支持
The installer creates an English translation file for you and copies it to config/locales/en.bootstrap.yml
安装器创建了一个英语翻译文件，放在config/locales/en.bootstrap.yml文件中。

NOTE: If you are using Devise in your project, you must have a devise locale file for handling flash messages, even if those messages are blank. 
See https://github.com/plataformatec/devise/wiki/I18n
注意：如果使用Devise，必须有一个devise的locale文件来处理闪存信息，即使那些信息是空的。
详见https://github.com/plataformatec/devise/wiki/I18n。


## Changelog 变更日记
Please see CHANGELOG.md for more details

## Contributors & Patches & Forks
Please see CONTRIBUTERS.md for contributors list


## About Me
CTO / Senior Developer / Programmer
@useful (Usefulideas) Istanbul / Turkey


### Contact me
Seyhun Akyürek - seyhunak [at] gmail com


## Thanks
Bootstrap and all twitter-bootstrap-rails contributors
http://twbs.github.io/bootstrap


## License
Copyright (c) 2014 Seyhun Akyürek

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
/ vim: set ft=markdown : /
