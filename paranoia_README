# Paranoia

Paranoia is a re-implementation of [acts\_as\_paranoid](http://github.com/technoweenie/acts_as_paranoid) for Rails 3 and Rails 4, using much, much, much less code.
Paranoia 是 Rails 3 和 Rails 4 的 cats_as_paranoid 的重新实现，使用了更少的代码。

You would use either plugin / gem if you wished that when you called `destroy` on an Active Record object that it didn't actually destroy it, but just *hide* the record.
你可以使用这个插件或软件包，这样当你在一个Active record 对象上使用`destroy`时，它会将对象隐藏起来，而不是真正的删除。
Paranoia does this by setting a `deleted_at` field to the current time when you `destroy` a record, and hides it by scoping all queries on your model to only include records which do not have a `deleted_at` field.
在你`destroy`一个记录的时候，Paranoia 通过将`deleted_at`字段设置到当前时间，并将所有查询行为限制在没有`deleted_at`字段的记录上。

If you wish to actually destroy an object you may call `really_destroy!`. 
如果你想真正删除对象，可以调用`really_destroly!`。
**WARNING**: This will also *really destroy* all `dependent: destroy` records, so please aim this method away from face when using.
**警告**: 这也会真正删除所有依赖记录，所以使用时请仔细考虑这个方法。

If a record has `has_many` associations defined AND those associations have `dependent: :destroy` set on them, then they will also be soft-deleted if `acts_as_paranoid` is set,  otherwise the normal destroy will be called.
如果一个记录有`has_many`联结定义，并且那些联结有`dependent: :destroy`设置，则如果这些记录有`acts_as_paranoid`设置，则它们也会被软删除，否则会调用真正的删除。

## Installation & Usage  安装

For Rails 3, please use version 1 of Paranoia:

``` ruby
gem "paranoia", "~> 1.0"
```

For Rails 4, please use version 2 of Paranoia:

``` ruby
gem "paranoia", "~> 2.0"
```

Of course you can install this from GitHub as well:

``` ruby
gem "paranoia", :github => "radar/paranoia", :branch => "rails3"
# or
gem "paranoia", :github => "radar/paranoia", :branch => "rails4"
```

Then run:

``` shell
bundle install
```

Updating is as simple as `bundle update paranoia`.

#### Run your migrations for the desired models  对模型运行迁移

Run:

``` shell
rails generate migration AddDeletedAtToClients deleted_at:datetime:index
```

and now you have a migration

``` ruby
class AddDeletedAtToClients < ActiveRecord::Migration
  def change
    add_column :clients, :deleted_at, :datetime
    add_index :clients, :deleted_at
  end
end
```

### Usage 用法

在模型中
In your model:  

``` ruby
class Client < ActiveRecord::Base
  acts_as_paranoid

  # ...
end
```

Hey presto, it's there!
Calling `destroy` will now set the `deleted_at` column:


``` ruby
>> client.deleted_at
# => nil
>> client.destroy
# => client
>> client.deleted_at
# => [current timestamp]
```

真正删除
If you really want it gone *gone*, call `really_destroy!`:

``` ruby
>> client.deleted_at
# => nil
>> client.really_destroy!
# => client
```

删除前回调
If you want a method to be called on destroy, simply provide a `before_destroy` callback:

``` ruby
class Client < ActiveRecord::Base
  acts_as_paranoid

  before_destroy :some_method

  def some_method
    # do stuff
  end

  # ...
end
```

设置`deleted_at`之外的栏名称：
If you want to use a column other than `deleted_at`, you can pass it as an option:

``` ruby
class Client < ActiveRecord::Base
  acts_as_paranoid column: :destroyed_at

  ...
end
```

访问软删除的联结：
If you want to access soft-deleted associations, override the getter method:

``` ruby
def product
  Product.unscoped { super }
end
```

包含软删除的链接对象
If you want to include associated soft-deleted objects, you can (un)scope the association:

``` ruby
class Person < ActiveRecord::Base
  belongs_to :group, -> { with_deleted }
end

Person.includes(:group).all
```

寻找所有的记录，包括被软删除的：
If you want to find all records, even those which are deleted:

``` ruby
Client.with_deleted
```

寻找所有被删除的记录：
If you want to find only the deleted records:

``` ruby
Client.only_deleted
```

检查记录是否被软删除了：
If you want to check if a record is soft-deleted:

``` ruby
client.paranoia_destroyed?
# or
client.deleted?
```

恢复记录：
If you want to restore a record:

``` ruby
Client.restore(id)
# or
client.restore
```

恢复多个记录：
If you want to restore a whole bunch of records:

``` ruby
Client.restore([id1, id2, ..., idN])
```

恢复记录以及关联的记录
If you want to restore a record and their dependently destroyed associated records:

``` ruby
Client.restore(id, :recursive => true)
# or
client.restore(:recursive => true)
```

恢复之前的回调
If you want callbacks to trigger before a restore:

``` ruby
before_restore :callback_name_goes_here
```

For more information, please look at the tests.
更多信息，参见测试。

## Acts As Paranoid Migration  从acts_as_paranoid迁移过来

You can replace the older `acts_as_paranoid` methods as follows:

| Old Syntax                 | New Syntax                     |
|:-------------------------- |:------------------------------ |
|`find_with_deleted(:all)`   | `Client.with_deleted`          |
|`find_with_deleted(:first)` | `Client.with_deleted.first`    |
|`find_with_deleted(id)`     | `Client.with_deleted.find(id)` |


The `recover` method in `acts_as_paranoid` runs `update` callbacks.  Paranoia's
`restore` method does not do this.

## License  许可证

This gem is released under the MIT license.
# vim: set filetype=markdown : 
