Ruby on Rails Web 开发学习之路
基本信息
web程序员成功之路
Ruby on Rails Web 开发学习之路
祝红涛、于利敏、武迪 编著
清华大学出版社
2011年8月第一版
第一部分， Ruby基础
---
# 第1章 高兴并快乐地学习Ruby 1
## 1.1 为什么说高兴并快乐地学习Ruby 2
视频教学：11分钟 2
快乐编程的特性：

- 变量与函数的命名规则
常量 ------ 大写字母开头
普通变量 -- 小写字母和下划线开头
全局变量 -- $开头
实例变量 -- @开头
类变量 ---- @@开头 
- 解释型脚本语言
- 多种字符串表示法
- 强大的反射机制和后设编程
- 其他特性：动态载入、自动内存管理机制、多精度整数、迭代器、闭包、开源……

## 1.2 怎么看待Ruby on Rails 3
视频教学：8分钟 4
1. 约定优于配置：没有XML配置文件
2. 支架结构：自动为任何相关的数据库表创建一套包含标准CRUD操作和前台视图的系统
3. 全栈式mvc框架
4. 生成器：实时映射技术和模板编程技术
5. 更少的代码：用约定代替XML配置文件
6. 零周转时间：配置、编译、发布、重新设置、调试
## 1.3 搭建RoR开发环境 5
视频教学：6分钟 5
###1.3.1 基础知识——下载Ruby和Rails 5
【kinder:note:强烈建议先去www.ruby-lang.org看看最新的软件包和安装方法】
**rubygem**
是ruby语言的包管理工具，安装ruby时，已经以组建形式安装。
GEM commands :

    build             Build a gem from a gemspec  
                      从一个gemspec中构建一个gem软件包 
    cert              Manage RubyGems certificates and signing settings  
                      管理RubyGems证书和签名设置
    check             Check installed gems 
                      检查已安装的gem软件包
    cleanup           Clean up old versions of installed gems in the local repository 
                      在本地仓库中清除版本过久的gem软件包
    contents          Display the contents of the installed gems 
                      显示已安装gem软件包的内容
    dependency        Show the dependencies of an installed gem  
                      显示一个已安装gem软件包的依赖关系
    environment       Display information about the RubyGems environment  
                      显示gem环境信息
    fetch             Download a gem and place it in the current directory 
                      下载一个gem并放在当前目录
    generate_index    Generates the index files for a gem server directory  
                      为一个gem服务器目录产生目录文件
    help              Provide help on the 'gem' command  
                      提供相关gem命令的帮助
    install           Install a gem into the local repository 
                      在本地仓库中安装gem
    list              Display gems whose name starts with STRING 
                      显示名称以STRING开头的所有gem软件包
    lock              Generate a lockdown list of gems 
                      产生一个gems软件包禁闭清单
    outdated          Display all gems that need updates 
                      显示所有需要更新的gem软件包
    owner             Manage gem owners on RubyGems.org. 
                      在RubyGems.org管理gem所有者
    pristine          Restores installed gems to pristine condition from files located in the gem cache 
                      将已安装gem软件包从位于gem缓存文件恢复到原始状态
    push              Push a gem up to RubyGems.org  
                      把一个gem软件包推送到RubyGems.org
    query             Query gem information in local or remote repositories 
                      在本地或者远程仓库中查询gem软件包信息
    rdoc              Generates RDoc for pre-installed gems  
                      为预安装gem软件包产生一个RDoc
    search            Display all gems whose name contains STRING  
                      显示所有名字包含STRING的gem软件包
    server            Documentation and gem repository HTTP server 
                      文件和gem仓库的HTTP服务器
    sources           Manage the sources and cache file RubyGems uses to search for gems
                      管理源和RubyGems用于搜索gem软件包的缓存文件
    specification     Display gem specification (in yaml)  
                      显示gem规格说明
    stale             List gems along with access times 
                      按照存取（访问）时间显示gem软件包
    uninstall         Uninstall gems from the local repository  
                      将gem软件包从本地仓库中卸载
    unpack            Unpack an installed gem to the current directory 
                      将一个已安装的gem软件包解压到当前目录
    update            Update the named gems (or all installed gems) in the local repository 
                      在本地仓库更新已命名的（或所有已安装的）gem软件包
    which             Find the location of a library file you can require  
                      查找一个你需要的库文件的位置

For help on a particular command, use 'gem help COMMAND'.

Commands may be abbreviated, so long as they are unambiguous.
e.g. 'gem i rake' is short for 'gem install rake'.
###1.3.2 实例应用 6
###1.3.3 实例分析 9
## 1.4 选择一款Ruby开发工具 9
视频教学：10分钟 9
### 1.4.1 基础知识——安装SciTE 9
### 1.4.2 基础知识——安装RadRails 11
### 1.4.3 实例描述 14
### 1.4.4 实例应用 14
### 1.4.5 运行结果 15
### 1.4.6 实例分析 16
## 1.5 自己动手编译Ruby程序 16
视频教学：13分钟 16
### 1.5.1 基础知识——手动编译Ruby程序 16
执行文件：  `$ ruby name.rb`
代码语法检查：  `$ ruby -c name.rb`，如果正确则显示`Syntax OK`
警告模式：  `$ ruby -w name.rb`，一旦出现错误就会给出警告
执行单行脚本：  `$ ruby -e 'puts "Hello, Ruby!"' 。可以在单引号中用分号（；）分隔两个程序语句
执行模式： `$ ruby -le 'puts "Hello, !"; puts "Ruby!"' 。 确保每个输出都在单独行中显示。
组合命令：如cw：检查程序文件的语法但不执行，同时给出错误警告；ve给出当前版本信息并运行引号中给出的代码。

#### ruby选项
下面是一个详细的ruby选项说明：

    Usage: ruby [switches] [--] [programfile] [arguments]
           ruby [ option ...] [ -- ] [ programfile ] [ argument ...]
    这里的"option"指下文将要提到的命令行选项中的一个。"--"则显式地表明选项字符串到此结束。"programfile"是装载Ruby脚本的文件。若省略不写或者写成"-"时,Ruby会把标准输入当做Ruby脚本进行处理。
    programfile若以“#!”开始，则进行特殊的处理。详细情况请参考下文的关于解释器行。
    argument中的字符串将变成内部常数ARGV的初始值。在有的环境中(Win32)，标准shell不会展开通配符，这时Ruby解释器将自行展开通配符然后赋值给ARGV。此时，可使用的通配符有“*”、“?”、“[]”和“**/”(与Dir.glob不同，这里不能使用“{..}”)。在Win32环境中，若不想展开通配符的话，请使用单引号(')将参数括起来。
 
    Ruby解释器可接受下列命令行选项。基本上与Perl的类似。
      -0[octal]       specify record separator (\0, if no argument) 	指定记录分隔符（如果没有参数则使用\0）
                      以8进制数指定输入记录分隔符('$/')。
                      若不指定数字的话，分隔符是空字符(等同于$/="\0")。数字后面可以有其他的开关(switch)。
                      -00代表段落模式(等同于$/="")，-0777(因为这个代码不代表任何文字)表示将文件的全部内容一次性读入(相当于$/=nil)。  
      -a              autosplit mode with -n or -p (splits $_ into $F) 								用-n或者-p自动分割模式
                      与'-n'或'-p'一起使用时，可以打开自动拆分模式(auto split mode)。自动拆分模式将在各个循环前执行以下动作。
                      $F = $_.split
                      若没有同时指定'-n'或'-p'选项的话将不起作用。
      -c              check syntax only                                 只检查语法
                      只对脚本进行编译，而并不执行。编译后若没发现语法错误，则显示“Syntax OK”。
      -Cdirectory     cd to directory, before executing your script		在执行脚本之前，转到目录
                      执行脚本之前，先移动到指定目录。
      -d              set debugging flags (set $DEBUG to true)			设置调试标志
                      以调试模式执行脚本。将$DEBUG设置成true。
      -e 'command'    one line of script. Several -e's allowed. Omit [programfile]		单行脚本。允许多个-e。忽略脚本文件。
                      在命令行中指定脚本。添加-e选项后，就不会从参数中抽取脚本文件名了。
                      若多次使用-e选项时，系统会按照以下方式处理。
                      下列各表达式的意义相同。
                      ruby -e "5.times do |i|" -e "puts i" -e "end"
                      ruby -e "5.times do |i|
                        puts i
                      end"
                      ruby -e "5.times do |i|; puts i; end"
      -Fpattern       split() pattern for autosplit (-a)				为-a分割模式
    # -Fregexp        将regexp指定给输入域分隔符(field separator)。
    # -h --help		  显示命令行选项的简介。
      -i[extension]   edit ARGV files in place (make backup if extension supplied)		就地编辑ARGV文件（如果提供扩展则备份）
                      对参数中指定的文件内容进行替换(in-place edit)。原始文件将被加上扩展名并保存下来。
                      若没有扩展名的话，将不会进行备份，而且只有替换后的文件会被保留下来。
                      例:
                      % echo matz > /tmp/junk
                      % cat /tmp/junk
                      matz
                      % ruby -p -i.bak -e '$_.upcase!' /tmp/junk
                      % cat /tmp/junk
                      MATZ
                      % cat /tmp/junk.bak
                      matz
      -Idirectory     specify $LOAD_PATH directory (may be used more than once)			指定$LOAD_PATH目录（可指定多个）
                      指定(追加)加载文件的路径。指定的目录将被追加到Ruby的数组变量($:)中。
      -Kkcode         specifies KANJI (Japanese) code-set				指定KANJI（日本）代码集
    # -Kc             指定Ruby要处理的汉字编码。若是'E'或'e'，则Ruby认定字符串或访问文件中的汉字编码为EUC。
                      同样，若是'S'或's'的话则认定为SJIS。若是'U'或'u'则当作UTF-8处理。'N'表示不对汉字进行处理。
                      该选项的默认值就是N(NONE)。
                      将来有可能会改变文字编码处理方式，届时该选项的内容也会有所变化。
      -l              enable line ending processing	 					 使用行编辑处理
                      进行行尾自动处理。
                      首先，将$\改为$/的值，在print输出时添加换行。
                      若使用了-n标志或-p标志的话，将对gets读入的各行末尾进行String#chop!处理。
      -n              assume 'while gets(); ... end' loop around your script	
                      若使用了该标志，则整个程序会像sed -n或awk一样，被
                      while gets
                       ...
                      end
                      括起来运行。				
      -p              assume loop like -n but print line also like sed
                      与-n标志相仿，在各循环后输出变量$_的值。
                      例:
                      % echo matz | ruby -p -e '$_.tr! "a-z", "A-Z"'
                      MATZ
      -rlibrary       require the library, before executing your script
                      执行脚本前，先对feature指定的库执行require操作。与'-n'选项、'-p'选项一起使用时特别奏效。
      -s              enable some switch parsing for switches after script name
                      对跟在脚本名后并且以'-'开头的参数进行解释，并将其值赋值给同名的全局变量。
                      遇到以'--'开头的参数就停止解释，并将该参数从ARGV中删除。
                      例:
                      #! /usr/local/bin/ruby -s
                      # prints "true" if invoked with `-xyz' switch.
                      print "true\n" if $xyz
      -S              look for the script using PATH environment variable
                      该选项表明，当脚本名不是以'/'开头的时候，要使用环境变量PATH的值搜索脚本。
                      若您的机器不支持#!的话，可以使用下列方法模拟#!的运行：
                      #!/bin/sh
                      exec ruby -S -x $0 "$@"
                      #! ruby
                      因为第1行的关系，系统把脚本交给/bin/sh。/bin/sh执行第2行后启动Ruby解释器。
                      在-x选项的作用下，Ruby解释器把从'#!'到包含'ruby'的行的内容全部读入。
                      根据系统的不同，$0未必包含完整路径，因此有必要使用'-S'选项来告诉Ruby在必要时搜索脚本。
      -T[level]       turn on tainting checks
                      执行不纯度测试。若给level指定了一个值之后，安全等级也会使用这个值。省略level时，其值为1。
                      对于CGI程序来说，将其指定为-T1比较合适。$SAFE的等级也将被设定。
      -v              print version number, then turn on verbose mode
                      冗长模式。
                      启动时显示版本信息，然后将内部变量$VERBOSE设为true。
                      当此变量为true时，众多的方法在运行时会显示冗长的信息。
                      若只设定'-v'选项，而没有其他参数时，启动后会先显示版本信息，然后就结束运行(不会等待来自标准输入的脚本)。
      -w              turn warnings on for your script
                      不显示版本信息的冗长模式。
      -W[level]       set warning level; 0=silence, 1=medium, 2=verbose (default)
                      ruby 1.8 特性
                      可以指定3种级别的冗长模式，如下所示。
                          -W0: 不显示警告
                          -W1: 只显示重要警告(默认)
                          -W2 or -W: 显示所有警告 
                      内部变量$VERBOSE被分别设置为nil,false,true。
      -x[directory]   strip off text before #!ruby line and perhaps cd to directory
                      从message中取出脚本并执行。读入脚本的范围是从'#!'开始，直到包含'ruby'的行为止。
                      用EOF(文件结束)，^D(controlD)，^Z(controlZ)或保留字_END_来指定脚本结束。
                      若指定了目录名的话，则在执行脚本前移动到该指定目录。
    # -y --yydebug	  编译器调试模式。编译脚本时显示语法分析的过程。
                      该显示过程会很漫长，可能只对那些想调试编译器的人有用。
    
      --copyright     print the copyright 显示版权信息。
      --version       print the version	
                      显示Ruby的版本信息。

#### 关于解释器行
    命令行指定的脚本是以'#!'开头的文件，当该行中不包含'ruby'时，将替代OS把'#!'后面的字符串看成命令行，然后启动解释器。
    例如，用Ruby运行下面的shell脚本时将启动sh。
    #!/bin/sh -vx
    echo "$@"
    若此行中包含'ruby'的话，则'ruby'左侧的部分将被忽略，右侧以'-'开头的部分被视为选项。
    这里指定的选项将被追加到以命令行方式指定的选项之中。这主要是为了嵌入那些本该在脚本中指定的选项。例如，下面脚本的作用等价于使用命令行方式指定-Ke选项。
    #! ruby -Ke


### 1.5.2 实例描述 19
### 1.5.3 实例应用 19
### 1.5.4 运行结果 19
### 1.5.5 实例分析 20
## 1.6 实现计算器 20
视频教学：8分钟 20
使用gets方法来获取用户从键盘输入的一行字符串，并在按下回车键时结束输入
`.to_i`转为整数
`.chomp`去掉尾部的换行符
### 1.6.1 实例应用 20
### 1.6.2 运行结果 21
### 1.6.3 实例分析 21
## 1.7 常见问题解答 21
### 1.7.1 Ruby工具使用问题 21
### 1.7.2 SciTE编辑器中文乱码的解决方案 22
文件的编码设置
首行`#encoding:gbk`
### 1.7.3 Ruby on rails 的安装问题 22
## 1.8 习题 23
---
# 第2章 轻松征服Ruby 25
## 2.1 为游戏对象设置生命值 26
视频教学：8分钟 26
**好处**：
1. 名称替代字符串和数字，使程序好读
2. 易于修改
3. 避免出现错误
### 2.1.1 基础知识——常量的使用 26
以大写字母开头
通常将全部字母大写
### 2.1.2 实例描述 26
### 2.1.3 实例应用 27
### 2.1.4 运行结果 27
### 2.1.5 实例分析 27
## 2.2 在项目中访问变量 27
视频教学：8分钟 27
### 2.2.1 基础知识——变量的使用 28
全局变量： 最顶级的变量，在方法、模块和类中均能访问
以小写字母或者下划线开头
以$开头

ruby提供了一系列的全局变量。see29页

    $! -- 最近一次的错误信息
    $@ -- 错误产生的位置
    $_ -- gets最近读的字符串
    $& -- 最近一次与正则表达式匹配的字符串
    $. -- 解释器最近读的行数
    $~ -- 作为字表达式组的最近一次匹配
    $n -- 最近匹配的第几个子表达式
    $= -- 是否区分大小写的标志
    $/ -- 输入记录分隔符
    $\ -- 输出记录分隔符
    $0 -- ruby脚本文件名
    $* -- 命令行参数
    $$ -- 解释器进程ID
    $? -- 最近一次执行的子进程退出状态

局部变量：只能被它作用的区域访问。作用域指：方法、模块、类。

### 2.2.2 实例描述 30
### 2.2.3 实例应用 30
### 2.2.4 运行结果 30
### 2.2.5 实例分析 30
## 2.3 比较对象或内容 31
视频教学：13分钟 31
比较对象：`==`
比较内容：`equals`
### 2.3.1 基础知识——数据类型的使用 31
返回变量的数据类型：`.class`

**数值**
当整数值大于或者等于2的30次方时，会自动转换为Bignum类型；否则自动转换为Fixnum

**范围**
range是多个列举值的一种简单表示形式
a..b：表示a、中间值、b
a...b：表示a、中间值
常用方法：

    to_a  --  将范围转化为一个数组
    regect{|i|条件}  --将范围转换成一个数组，并删除满足条件的元素
    select{|i|条件}  --将范围转换成一个数组，只显示满足条件的元素
    each {|i| 动作}  -- 处理范围中的每个元素
    include?(目标)或者===(目标)  -- 判断范围是否包含该目标
    min()或者begin()或者first()  -- 返回范围的最小值
    max()或者end()或者last() --  返回范围的最大值

**符号**
符号对象是一个字符串、一个方法、一个类或者一个标识符的内部表示形式
创建符号对象：
1. 在对象名前面加上一个冒号(:)就可以了
2. %s{对象名}

字符串和符号对象之间可以通过`to_s`和`to_sym`相互转化
【kinder:unknow: 这里所谓的比较内容和比较对象，真有些绕，所谓比较对象，大概指比较对象名吧。】
### 2.3.2 实例描述 35
### 2.3.3 实例应用 35
### 2.3.4 运行结果 35
### 2.3.5 实例分析 36
## 2.4 计算乘方运算的值 36
视频教学：6分钟 36
### 2.4.1 基础知识——算术运算符和赋值运算符 36

      +  -  *  /  %  **
    = += -= *= /= %= **=

### 2.4.2 实例描述 37
### 2.4.3 实例应用 38
### 2.4.4 运行结果 38
### 2.4.5 实例分析 38
## 2.5 使用位运算符 38
视频教学：8分钟 39

     & -- 与
     ^ -- 异或；两数同位比较，相同的返回0,否则返回1
     | -- 或；两数同位比较，都是0的返回0,否则返回1
     ~ -- 非；逐位取反【kinder:unknow: 书中结果都是原值进一。有些想不通，如2二进制为10，取反之后不是01吗，怎么变成101了？】
     << -- 向左位移；低位补0
     >> -- 向右位移；高位删除

## 2.6 辨别该数值是否属于一个范围 40
视频教学：8分钟 40
### 2.6.1 基础知识——比较运算符和逻辑运算符 41
**比较运算符**

    >   -- 大于
    <   -- 小于
    <=  -- 小于或者等于
    >=  -- 大于或者等于
    ==  -- 等于
    !=  -- 不等于
    <=> -- 比较，左边大1,相等0,右边大-1
    === -- 右边是否在左边范围之内
    =~  -- 正则表达式匹配
    !~  -- 正则表达式不匹配

**逻辑运算符**
and  -- 按位与
or   -- 按位异或
not  -- 按位或
&&   -- 逻辑与
||   -- 逻辑或
!    -- 逻辑非
【kinder:unknow: 怎么把位运算符也包括进来了？逻辑与或非还不够用吗？】

### 2.6.2 实例描述 42
### 2.6.3 实例应用 43
### 2.6.4 运行结果 43
### 2.6.5 实例分析 43
## 2.7 判断用户是否通过审核 43
视频教学：5分钟 43
### 2.7.1 基础知识——三目运算符的使用 43

    condition?true_value:false_value

### 2.7.2 实例描述 44
### 2.7.3 实例应用 44
### 2.7.4 运行结果 44
### 2.7.5 实例分析 45
## 2.8 运算符优先级 45

    逻辑
    乘方
    加法
    位
    比较
    位
    逻辑
    三元
    赋值

## 2.9 表达式 46
视频教学：4分钟 46
## 2.10 随机搭档游戏 47
视频教学：8分钟 47
### 2.10.1 基础知识——并行赋值和嵌套赋值 47
### 2.10.2 实例描述 49
### 2.10.3 实例应用 49
### 2.10.4 运行结果 50
### 2.10.5 实例分析 51
## 2.11 为季节选择不同的旅游景点 51
视频教学：17分钟 51
### 2.11.1 基础知识——条件语句 51
### 2.11.2 实例描述 56
### 2.11.3 实例应用 56
### 2.11.4 运行结果 56
### 2.11.5 实例分析 57
## 2.12 规范显示乘法口诀表 57
视频教学：13分钟 57
### 2.12.1 基础知识——循环语句 57
### 2.12.2 实例描述 61
### 2.12.3 实例应用 61
### 2.12.4 运行结果 61
### 2.12.5 实例分析 62
## 2.13 为歌曲设置新的循环模式 62
视频教学：8分钟 62
### 2.13.1 基础知识——跳转语句 62
### 2.13.2 实例描述 65
### 2.13.3 实例应用 65
### 2.13.4 运行结果 65
### 2.13.5 实例分析 66
## 2.14 常见问题解答 66
### 2.14.1 循环中的while语句问题 66
### 2.14.2 跳转语句中的redo问题 66
## 2.15 习题 67

---
# 第3章 操作Ruby数据 71
## 3.1 在应用程序中创建字符串 72
视频教学：5分钟 72
### 3.1.1 基础知识——创建字符串 72
### 3.1.2 实例描述 73
### 3.1.3 实例应用 73
### 3.1.4 运行结果 73
### 3.1.5 实例分析 73
## 3.2 跟我一起操作字符串 73
视频教学：12分钟 74
### 3.2.1 基础知识——操作字符串 74
### 3.2.2 实例描述 77
### 3.2.3 实例应用 77
### 3.2.4 运行结果 78
### 3.2.5 实例分析 78
## 3.3 使用哈希表保存学生成绩 78
视频教学：6分钟 78
### 3.3.1 基础知识——Hash对象 79
### 3.3.2 实例描述 80
### 3.3.3 实例应用 80
### 3.3.4 运行结果 80
### 3.3.5 实例分析 81
## 3.4 使用数组保存学生成绩 81
视频教学：8分钟 81
### 3.4.1 基础知识——数组 81
### 3.4.2 实例描述 84
### 3.4.3 实例应用 84
### 3.4.4 运行结果 84
### 3.4.5 实例分析 85
## 3.5 制作手机报价单 85
视频教学：4分钟 85
### 3.5.1 基础知识——类型转换 85
### 3.5.2 实例描述 86
### 3.5.3 实例应用 86
### 3.5.4 运行结果 87
### 3.5.5 实例分析 87
## 3.6 常见问题解答 87
### 3.6.1 Ruby字节数组转换为十六进制字符串问题 87
### 3.6.2 Ruby中求素数的算法问题 88
### 3.6.3 Ruby中的to_s如何使用 88
## 3.7 习题 89

---
# 第4章 Ruby中一切皆对象 91
## 4.1 快速领悟面向对象编程 92
视频教学：13分钟 92
## 4.2 我就是造物主 94
视频教学：11分钟 94
### 4.2.1 基础知识——创建类 94
### 4.2.2 实例描述 98
### 4.2.3 实例应用 98
### 4.2.4 运行结果 99
### 4.2.5 实例分析 99
## 4.3 为计算器类添加处理方法 99
视频教学：12分钟 99
### 4.3.1 基础知识——方法 99
### 4.3.2 实例描述 102
### 4.3.3 实例应用 102
### 4.3.4 运行结果 103
### 4.3.5 实例分析 103
## 4.4 创建一个会进行自我介绍的人 103
视频教学：6分钟 103
### 4.4.1 基础知识——实例变量和类变量 103
### 4.4.2 实例描述 105
### 4.4.3 实例应用 105
### 4.4.4 运行结果 106
### 4.4.5 实例分析 106
## 4.5 抽象出一辆跑车 106
视频教学：7分钟 106
### 4.5.1 基础知识——属性 106
### 4.5.2 实例描述 108
### 4.5.3 实例应用 108
### 4.5.4 运行结果 109
### 4.5.5 实例分析 109
## 4.6 使用构造方法初始化一只哈巴狗 109
视频教学：5分钟 109
### 4.6.1 基础知识——构造方法 109
### 4.6.2 实例描述 110
### 4.6.3 实例应用 110
### 4.6.4 运行结果 111
### 4.6.5 实例分析 111
## 4.7 使用代码块实现一个迭代器 111
视频教学：5分钟 111
### 4.7.1 基础知识——在方法中
使用块 111
### 4.7.2 实例描述 113
### 4.7.3 实例应用 113
### 4.7.4 运行结果 113
### 4.7.5 实例分析 114
## 4.8 衍生后代的Animal类 114
视频教学：8分钟 114
### 4.8.1 基础知识——类的继承 114
### 4.8.2 实例描述 117
### 4.8.3 实例应用 117
### 4.8.4 运行结果 118
### 4.8.5 实例分析 118
## 4.9 访问作用域 118
视频教学：6分钟 119
## 4.10 常见问题解答 120
### 4.10.1 判断实例属于哪个类的问题 120
### 4.10.2 自定义class实现Map的问题 121
## 4.11 习题 121

---
# 第5章 Ruby丰富多彩的高级功能 125
## 5.1 使用类访问模块中的实例成员 126
视频教学：11分钟 126
### 5.1.1 基础知识——模块的定义与使用 126
### 5.1.2 实例描述 128
### 5.1.3 实例应用 128
### 5.1.4 运行结果 128
### 5.1.5 实例分析 129
## 5.2 模拟安装程序 129
视频教学：6分钟 129
### 5.2.1 基础知识——BEGIN块和END块 129
### 5.2.2 实例描述 131
### 5.2.3 实例应用 131
### 5.2.4 运行结果 132
### 5.2.5 实例分析 132
## 5.3 导入其他文件中的类 132
视频教学：8分钟 132
### 5.3.1 基础知识——加载其他文件 132
### 5.3.2 实例描述 134
### 5.3.3 实例应用 134
### 5.3.4 运行结果 135
### 5.3.5 实例分析 135
## 5.4 为月亮定义别名 135
视频教学：9分钟 135
### 5.4.1 基础知识——别名和定义 135
### 5.4.2 实例描述 137
### 5.4.3 实例应用 138
### 5.4.4 运行结果 138
### 5.4.5 实例分析 138
## 5.5 自制出错页面自动跳转功能 138
视频教学：5分钟 139
### 5.5.1 基础知识——method_missing的使用 139
### 5.5.2 实例描述 139
### 5.5.3 实例应用 140
### 5.5.4 运行结果 140
### 5.5.5 实例分析 140
## 5.6 制作功能强大的播放器 140
视频教学：4分钟 140
### 5.6.1 基础知识——duck typing特性 141
### 5.6.2 实例描述 141
### 5.6.3 实例应用 141
### 5.6.4 运行结果 142
### 5.6.5 实例分析 142
## 5.7 在程序中使用代码块 142
视频教学：10分钟 142
### 5.7.1 基础知识——Proc对象 142
### 5.7.2 实例描述 144
### 5.7.3 实例应用 144
### 5.7.4 运行结果 144
### 5.7.5 实例分析 145
## 5.8 动态执行字符串代码 145
视频教学：6分钟 145
## 5.9 处理程序中的异常 146
视频教学：12分钟 146
### 5.9.1 基础知识——异常处理机制 146
### 5.9.2 实例描述 150
### 5.9.3 实例应用 150
### 5.9.4 运行结果 151
### 5.9.5 实例分析 151
## 5.10 覆盖原有的异常信息 152
视频教学：5分钟 152
### 5.10.1 基础知识——创建异常类 152
### 5.10.2 实例描述 153
### 5.10.3 实例应用 153
### 5.10.4 运行结果 154
### 5.10.5 实例分析 154
## 5.11 检测邮件格式 154
视频教学：7分钟 154
### 5.11.1 基础知识——正则表达式 155
### 5.11.2 实例描述 156
### 5.11.3 实例应用 156
### 5.11.4 运行结果 157
### 5.11.5 实例分析 157
## 5.12 在页面上显示当前时间 157
视频教学：10分钟 157
### 5.12.1 基础知识——时间和日期 157
### 5.12.2 实例描述 161
### 5.12.3 实例应用 161
### 5.12.4 运行结果 162
### 5.12.5 实例分析 162
## 5.13 在项目中引入线程 162
?视频教学：12分钟 162
### 5.13.1 创建线程 162
### 5.13.2 返回并挂起当前线程 164
### 5.13.3 显示以及停止线程 166
### 5.13.4 线程的状态 167
## 5.14 实现对不同网站发送请求 168
视频教学：8分钟 169
### 5.14.1 基础知识——同步线程 169
### 5.14.2 实例描述 173
### 5.14.3 实例应用 173
### 5.14.4 运行结果 174
### 5.14.5 实例分析 174
## 5.15 垃圾回收机制 174
## 5.16 常见问题解答 175
### 5.16.1 加载文件中的require问题 175
### 5.16.2 动态语言method_missing使用的问题 175
### 5.16.3 Ruby中多线程问题 176
## 5.17 习题 177

---
# 第6章 教你操作文件和目录 181
## 6.1 获取硬盘中文件的信息 182
视频教学：8分钟 182
### 6.1.1 基础知识——访问文件属性 182
### 6.1.2 实例描述 185
### 6.1.3 实例应用 185
### 6.1.4 运行结果 185
### 6.1.5 实例分析 186
## 6.2 读取Ruby源程序 186
视频教学：13分钟 186
### 6.2.1 基础知识——读取文件 186
### 6.2.2 实例描述 191
### 6.2.3 实例应用 191
### 6.2.4 运行结果 191
### 6.2.5 实例分析 192
## 6.3 将网站站点信息保存到磁盘文件 192
视频教学：5分钟 192
### 6.3.1 基础知识——写入文件 192
### 6.3.2 实例描述 193
### 6.3.3 实例应用 193
### 6.3.4 运行结果 194
### 6.3.5 实例分析 194
## 6.4 管理磁盘文件 195
视频教学：5分钟 195
### 6.4.1 基础知识——操作文件 195
### 6.4.2 实例描述 196
### 6.4.3 实例应用 196
### 6.4.4 运行结果 196
### 6.4.5 实例分析 197
## 6.5 获取文件的绝对路径 197
视频教学：5分钟 197
### 6.5.1 基础知识——操作路径 197
### 6.5.2 实例描述 198
### 6.5.3 实例应用 198
### 6.5.4 运行结果 199
### 6.5.5 实例分析 199
## 6.6 删除指定目录下的所有空文件夹 199
视频教学：6分钟 199
### 6.6.1 基础知识——操作目录 199
### 6.6.2 实例描述 202
### 6.6.3 实例应用 202
### 6.6.4 运行结果 202
### 6.6.5 实例分析 203
## 6.7 常见问题解答 203
### 6.7.1 向一个文件中追加信息问题 203
### 6.7.2 删掉所有没有存放文件的目录问题 203
## 6.8 习题 204

---
# 第7章 使用Ruby实现数据持久化 207
## 7.1 Ruby中的数据持久化方法概述 208
视频教学：10分钟 208
## 7.2 添加、修改和删除学生成绩信息 209
视频教学：8分钟 209
### 7.2.1 基础知识——使用MySQL模块执行SQL命令 209
### 7.2.2 实例描述 210
### 7.2.3 实例应用 210
### 7.2.4 运行结果 212
### 7.2.5 实例分析 213
## 7.3 列表展示图书信息 213
视频教学：10分钟 213
### 7.3.1 基础知识——使用MySQL模块获取查询结果集 213
### 7.3.2 实例描述 215
### 7.3.3 实例应用 215
### 7.3.4 运行结果 216
### 7.3.5 实例分析 217
## 7.4 处理在操作学生信息时的一些问题 217
视频教学：7分钟 217
### 7.4.1 基础知识——使用MySQL模块处理结果集 217
### 7.4.2 实例描述 219
### 7.4.3 实例应用 219
### 7.4.4 运行结果 220
### 7.4.5 实例分析 221
## 7.5 查看学生信息表的表结构 221
视频教学：6分钟 221
### 7.5.1 基础知识——使用MySQL模块查询元数据 221
### 7.5.2 实例描述 222
### 7.5.3 实例应用 223
### 7.5.4 运行结果 223
### 7.5.5 实例分析 224
## 7.6 创建日志表并添加数据 224
视频教学：7分钟 224
### 7.6.1 基础知识——使用DBI操作MySQL数据库 224
### 7.6.2 实例描述 225
### 7.6.3 实例应用 225
### 7.6.4 运行结果 226
### 7.6.5 实例分析 227
## 7.7 向表中插入员工详细信息 227
视频教学：6分钟 227
### 7.7.1 基础知识——DBI中的占位符 227
### 7.7.2 实例描述 228
### 7.7.3 实例应用 228
### 7.7.4 运行结果 229
### 7.7.5 实例分析 230
## 7.8 查询年度销售业绩超过500万的销售人员 230
视频教学：4分钟 230
### 7.8.1 基础知识——使用DBI处理查询结果集 230
### 7.8.2 实例描述 230
### 7.8.3 实例应用 231
### 7.8.4 运行结果 231
### 7.8.5 实例分析 232
## 7.9 实现银行数据管理系统的转账功能 232
视频教学：5分钟 232
### 7.9.1 基础知识——DBI中的事务处理 232
### 7.9.2 实例描述 233
### 7.9.3 实例应用 234
### 7.9.4 运行结果 235
### 7.9.5 实例分析 235
## 7.10 常见问题解答 235
### 7.10.1 在Ruby中操作MySQL数据库的方法问题 235
### 7.10.2 连接不关闭有何效果问题 236
## 7.11 习题 236

---
# 第8章 创建Web应用程序起步—— Rails框架基本使用 239
## 8.1 重新认识Rails 240
视频教学：12分钟 240
### 8.1.1 基础知识——Rails与MVC 240
rails是一个严格遵循MVC设计模式的开发框架。
MVC模式将软件系统分为：
模型：数据和业务的封装和管理。拥有最多的处理任务
视图：给用户传递信息，收集用户提交的信息。包括HTML、Flash、XHTML、XML/XSL、WML……
控制器：控制视图的展示模式。决定调用哪个模型来处理请求，确定哪个视图来显示模型处理返回的数据。
### 8.1.2 基础知识——Rails 3新增特性和重要改变 241
rails3基本上是一个接近改掉重写的版本。
### 8.1.3 基础知识——Rails的核心组件 242
在安装rails 3 之后，可以运行`gem list`命令看到其他组件：

**actionmailer (3.2.9)**
用于开发电子邮件服务的框架。
可以使用actionmailer接收并处理收到的电子邮件、发送纯文本邮件、多重电子邮件。

**actionpack (3.2.9)**
这是一个单独的gem安装包，封装了MVC中的VC功能。它包含了：
actioncontroller -- 用于管理rails中控制器的组件。提供的服务有：会话管理、模板渲染和重定向管理等等。
actionview -- 管理rails的所有视图。可以同时创建默认情况下的HTML和XML输出。通常用来渲染模板，包括嵌套的、局部的、甚至是内置的Ajax功能模板。
actiondispatch -- 处理Web请求的路由，并调用他们为用户所期望的地址。

**activemodel (3.2.9)**
在actionpack gem服务与ORM（对象关系映射）之间定义了一个接口。
它允许rails利用其他ORM框架代替activerecord在应用程序中的位置。

**activerecord (3.2.9)**
一个rails中模型的基础。提供了数据库的独立性、基本的CRUD功能、高级的查找功能，并能建立模型之间的关联以及其他服务。
【kinder:note: CRUD是指在做计算处理时的增加(Create)、查询(Retrieve)（重新得到数据）、更新(Update)和删除(Delete)几个单词的首字母简写。主要被用在描述软件系统中数据库或者持久层的基本操作功能。】

**activeresource (3.2.9)**
提供管理业务对象之间的连接和RESTful Web服务。实现了映射网络资源的方式与本地对象CRUD的定义。
【kinder:note: 下面是相关资料。来源：wiki。】
表征状态转移（英文：Representational State Transfer，简称REST）是Roy Fielding博士在2000年他的博士论文中提出来的一种软件架构风格。
目前在三种主流的Web服务实现方案中，因为REST模式的Web服务与复杂的SOAP和XML-RPC对比来讲明显的更加简洁，越来越多的web服务开始采用REST风格设计和实现。例如，Amazon.com提供接近REST风格的Web服务进行图书查找；雅虎提供的Web服务也是REST风格的。
REST 从资源的角度来观察整个网络，分布在各处的资源由URI确定，而客户端的应用通过URI来获取资源的表征。获得这些表征致使这些应用程序转变了其状态。随着不断获取资源的表征，客户端应用不断地在转变着其状态，所谓表征状态转移（Representational State Transfer）。
这一观点不是凭空臆造的，而是通过观察当前Web互联网的运作方式而抽象出来的。Roy Fielding 认为，“设计良好的网络应用表现为一系列的网页，这些网页可以看作的虚拟的状态机，用户选择这些链接导致下一网页传输到用户端展现给使用的人，而这正代表了状态的转变。"

**activesupport (3.2.9)**
提供一组用于rails的实用类，以及ruby标准库的扩展。

arel (3.0.2)
builder (3.0.4)
bundler (1.2.3)
erubis (2.7.0)
hike (1.2.1)
i18n (0.6.1)
journey (1.0.4)
json (1.7.5)
mail (2.4.4)
mime-types (1.19)
`multi_json` (1.4.0)
polyglot (0.3.3)
rack (1.4.1)
rack-cache (1.2)
rack-ssl (1.3.2)
rack-test (0.6.2)
rails (3.2.9)
**railties (3.2.9)**
建立任何新rails程序的核心代码，可以整合rails程序中各个框架和插件

rake (10.0.2)
rdoc (3.12)
sprockets (2.2.2)
thor (0.16.0)
tilt (1.3.3)
treetop (1.4.12)
tzinfo (0.3.35)

## 8.2 Rails与数据库 243
视频教学：4分钟 243
### 8.2.1 基础知识——安装与配置MySQL数据库 244
### 8.2.2 实例描述 248
其他的rails支持库
DB2  -------- http://rubyforge.org/projects/rubyibm
Firebird ---- http://rubyforge.org/projects/fireruby
MySQL ------- http://rubyforge.iasi.roedu.net/gems ; http://www.tmtm.org/en/mysql/ruby
Oracle ------ http://rubyforge.ort/projects/ruby-oci8
Postgres ---- http://rubyforge.ort/projects/ruby-pg
SQL Server -- http://github.com/rails-sqlserver
SQLite ------ http://rubyforge.ort/projects/sqlite-ruby
### 8.2.3 实例应用：安装MySQL支持库 248

   $ gem install mysql

### 8.2.4 实例分析 249 【kinder:note:下面安装sqlite数据库】

    $ sudo apt-get install sqlite3 libsqlite3-dev
    $ sudo gem install sqlite3

## 8.3 向第一个Rails项目问好 249
视频教学：5分钟 249
### 8.3.1 实例描述 250
### 8.3.2 实例应用 250

    $ rails new hellorails   # 使用`rails new project_name`创建一个项目
    $ cd hellorails          # 进入这个刚创建的目录
    $ rails server           # 启动WEBrick服务器；如果没有js运行时环境，这一步也会报错。可以安装`suo apt-get install nodejs`等运行时
    => Booting WEBrick
    => Rails 3.2.9 application starting in development on http://0.0.0.0:3000
    => Call with -d to detach
    => Ctrl-C to shutdown server
    [2012-12-05 14:14:57] INFO  WEBrick 1.3.1
    [2012-12-05 14:14:57] INFO  ruby 1.9.3 (2011-10-30) [i686-linux]
    [2012-12-05 14:14:57] INFO  WEBrick::HTTPServer#start: pid=8692 port=3000

### 8.3.3 运行结果 251
即可在浏览器中运行http://localhost:3000查看页面。
### 8.3.4 实例分析 252
## 8.4 剖析Rails项目的目录结构 252
视频教学：8分钟 252
下面是这个项目的结构：

     + 1. app -- rails程序的核心部分
     +--+ 1.1 assets -- 存放web程序的图片、js脚本、css样式
        +--+ 1.1.1 images ------- web应用的图片
           +--- 1.1.1.1 rails.png
        +--+ 1.1.2 javascripts -- web应用的js脚本程序
           +--- 1.1.2.1 application.js -- 这是一个js脚本列表文件，将调用列出的js文件，一般包括：这个文件夹,lib/assets/javascripts, vendor/assets/javascripts,or vendor/assets/javascripts of plugins等。
        +--+ 1.1.3 stylesheets -- web应用的CSS样式
           +--- 1.1.3.1 application.css -- 这是一个css脚本列表文件，将调用列出的css文件，一般包括：这个文件夹,lib/assets/stylesheets, vendor/assets/stylesheets,or vendor/assets/stylesheets of plugins等。
     +--+ 1.2 controllers -- 存放驱动业务逻辑的控制器
        +-- 1.2.1 application_controller.rb -- 内容详见下面
     +--+ 1.3 helpers -- 存放视图辅助类，一些常用的代码段
        +--- 1.3.1 application_helper.rb -- 内容详见下面
     +--+ 1.4 mailers -- rails 3是新增，存放与邮件服务相关的类
     +--+ 1.5 models --- 存放数据描述结构、验证和完整性规则等模块
     +--+ 1.6 views ---- 存放生成HTML的所有模板文件，也可以存放CSS、图片
        +--+ 1.6.1 layouts
           +-- 1.6.1 application.html.erb -- 内容详见下面
     + 2. config --存储与服务器、数据库或者其他文件相依赖的配置文件
     +--- 2.1 application.rb -- 内容详见下面
     +--- 2.2 boot.rb -- 内容详见下面
     +--- 2.3 database.yml -- 内容详见下面
     +--- 2.4 environment.rb -- 内容详见下面
     +--+ 2.5 environments
        +--- 2.5.1 development.rb -- 内容详见下面
        +--- 2.5.2 production.rb -- 内容详见下面
        +--- 2.5.3 test.rb -- 内容详见下面
     +--+ 2.6 initializers
        +--- 2.6.1 backtrace_silencers.rb -- 内容详见下面
        +--- 2.6.2 inflections.rb -- 内容详见下面
        +--- 2.6.3 mime_types.rb -- 内容详见下面
        +--- 2.6.4 secret_token.rb -- 内容详见下面
        +--- 2.6.5 session_store.rb -- 内容详见下面
        +--- 2.6.6 wrap_parameters.rb -- 内容详见下面
     +--+ 2.7 locales
        +--- 2.7.1 en.yml -- 内容详见下面
     +--- 2.8routes.rb -- 内容详见下面
     + 3. config.ru -- 基于rack服务器的配置来启动应用 -- 内容详见下面
     + 4. db -- 开发人员编写额数据库脚本
     +--- 4.1 development.sqlit3
     +--- 2.2 seeds.rb
     + 5. doc -- rails应用的各种文档
     +--- 5.1 README_FOR_APP
     + 6. Gemfile -- 指定哪些gem是rails应用所依赖的 -- 内容详见下面
     + 7. Gemfile.lock  -- 内容详见下面
     + 8. lib -- 应用运行过程中所需的类库；这些类库不属于控制器、视图和辅助类；程序运行时这里会被自动加载。
     +--+ 8.1 assets
     +--+ 8.2 tasks
     + 9. log -- 存储程序运行期间产生的日志
     +--- 9.1 development.log -- 记录rails所有操作，以便开发者跟踪错误
     + 10. public -- 存储rails应用的通用资源
     +--- 10.1 404.html
     +--- 10.2 422.html
     +--- 10.3 500.html
     +--- 10.4 favicon.ico -- 收藏夹图标
     +--- 10.5 index.html --- rails默认首页
     +--- 10.6 robots.txt --- 禁止目录被检索到
     + 11. Rakefile -- 一些可以在命令行下运行的作业
     + 12. README.rdoc --应用程序的简要说明
     + 13. script -- rails应用的各种脚本，例如代码生成器脚本。
     +--- 13.1 rails
     + 14. test -- 单元测试和功能测试
     +--+ 14.1 fixtures
     +--+ 14.2 functional
     +--+ 14.3 integration
     +--+ 14.4 performance
        +--- 14.4.1 browsing_test.rb
     +--- 14.5 test_helper.rb
     +--+ 14.6 unit
     + 15. tmp
     +--+ 15.1 cache
     +--+ 15.2 pids
     +--+ 15.3 sessions
     +--+ 15.4 sockets
     + 16. vendor -- 程序依赖的外部类库，和lib一样可以被自动加载
     +--+ 16.1 assets
        +--+ 16.1.1 javascripts
        +--+ 16.1.2 stylesheets
     +--+ 16.2 plugins

下面是1.2.1 `application_controller.rb`全文：

    class ApplicationController < ActionController::Base
      protect_from_forgery   # 这一句是rails3在控制器中新增的语句，表示禁用跨站脚本请求伪造，以增强应用程序的安全性。【kinder:unknow: ？？？】
    end

下面是1.3.1 `application_helper.rb`文件：

    module ApplicationHelper
    end

下面是1.6.1 application.html.erb文件：
这个文件指定了所有页面显示的标题、引用的样式表和脚本资源以及显示的位置，等等。

    <!DOCTYPE html>
    <html>
    <head>
      <title>Hellorails</title>
      <%= stylesheet_link_tag    "application", :media => "all" %>
      <%= javascript_include_tag "application" %>
      <%= csrf_meta_tags %>
    </head>
    <body>
    
    <%= yield %>
    
    </body>
    </html>

下面是2.1 application.rb文件

    require File.expand_path('../boot', __FILE__)
    
    require 'rails/all'
    
    if defined?(Bundler)
      # If you precompile assets before deploying to production, use this line
      Bundler.require(*Rails.groups(:assets => %w(development test)))
      # If you want your assets lazily compiled in production, use this line
      # Bundler.require(:default, :assets, Rails.env)
    end
    
    module Hellorails
      class Application < Rails::Application
        # Settings in config/environments/* take precedence over those specified here.
        # Application configuration should go into files in config/initializers
        # -- all .rb files in that directory are automatically loaded.
    
        # Custom directories with classes and modules you want to be autoloadable.
        # config.autoload_paths += %W(#{config.root}/extras)
    
        # Only load the plugins named here, in the order given (default is alphabetical).
        # :all can be used as a placeholder for all plugins not explicitly named.
        # config.plugins = [ :exception_notification, :ssl_requirement, :all ]
    
        # Activate observers that should always be running.
        # config.active_record.observers = :cacher, :garbage_collector, :forum_observer
    
        # Set Time.zone default to the specified zone and make Active Record auto-convert to this zone.
        # Run "rake -D time" for a list of tasks for finding time zone names. Default is UTC.
        # config.time_zone = 'Central Time (US & Canada)'
    
        # The default locale is :en and all translations from config/locales/*.rb,yml are auto loaded.
        # config.i18n.load_path += Dir[Rails.root.join('my', 'locales', '*.{rb,yml}').to_s]
        # config.i18n.default_locale = :de
    
        # Configure the default encoding used in templates for Ruby 1.9.
        config.encoding = "utf-8"
    
        # Configure sensitive parameters which will be filtered from the log file.
        config.filter_parameters += [:password]
    
        # Enable escaping HTML in JSON.
        config.active_support.escape_html_entities_in_json = true
    
        # Use SQL instead of Active Record's schema dumper when creating the database.
        # This is necessary if your schema can't be completely dumped by the schema dumper,
        # like if you have constraints or database-specific column types
        # config.active_record.schema_format = :sql
    
        # Enforce whitelist mode for mass assignment.
        # This will create an empty whitelist of attributes available for mass-assignment for all models
        # in your app. As such, your models will need to explicitly whitelist or blacklist accessible
        # parameters by using an attr_accessible or attr_protected declaration.
        config.active_record.whitelist_attributes = true
    
        # Enable the asset pipeline
        config.assets.enabled = true
    
        # Version of your assets, change this if you want to expire all your assets
        config.assets.version = '1.0'
      end
    end

下面是2.2 boot.rb文件

    require 'rubygems'
    
    # Set up gems listed in the Gemfile.
    ENV['BUNDLE_GEMFILE'] ||= File.expand_path('../../Gemfile', __FILE__)
    
    require 'bundler/setup' if File.exists?(ENV['BUNDLE_GEMFILE'])

下面是2.3 database.yml文件

    # SQLite version 3.x
    #   gem install sqlite3
    #
    #   Ensure the SQLite 3 gem is defined in your Gemfile
    #   gem 'sqlite3'
    development:
      adapter: sqlite3
      database: db/development.sqlite3
      pool: 5
      timeout: 5000
    
    # Warning: The database defined as "test" will be erased and
    # re-generated from your development database when you run "rake".
    # Do not set this db to the same as development or production.
    test:
      adapter: sqlite3
      database: db/test.sqlite3
      pool: 5
      timeout: 5000
    
    production:
      adapter: sqlite3
      database: db/production.sqlite3
      pool: 5
      timeout: 5000

下面是2.4 environment.rb文件

    # Load the rails application
    require File.expand_path('../application', __FILE__)
    
    # Initialize the rails application
    Hellorails::Application.initialize!

下面是2.5.1 development.rb文件

    Hellorails::Application.configure do
      # Settings specified here will take precedence over those in config/application.rb
    
      # In the development environment your application's code is reloaded on
      # every request. This slows down response time but is perfect for development
      # since you don't have to restart the web server when you make code changes.
      config.cache_classes = false
    
      # Log error messages when you accidentally call methods on nil.
      config.whiny_nils = true
    
      # Show full error reports and disable caching
      config.consider_all_requests_local       = true
      config.action_controller.perform_caching = false
    
      # Don't care if the mailer can't send
      config.action_mailer.raise_delivery_errors = false
    
      # Print deprecation notices to the Rails logger
      config.active_support.deprecation = :log
    
      # Only use best-standards-support built into browsers
      config.action_dispatch.best_standards_support = :builtin
    
      # Raise exception on mass assignment protection for Active Record models
      config.active_record.mass_assignment_sanitizer = :strict
    
      # Log the query plan for queries taking more than this (works
      # with SQLite, MySQL, and PostgreSQL)
      config.active_record.auto_explain_threshold_in_seconds = 0.5
    
      # Do not compress assets
      config.assets.compress = false
    
      # Expands the lines which load the assets
      config.assets.debug = true
    end

下面是2.5.2 production.rb文件

    Hellorails::Application.configure do
      # Settings specified here will take precedence over those in config/application.rb
    
      # Code is not reloaded between requests
      config.cache_classes = true
    
      # Full error reports are disabled and caching is turned on
      config.consider_all_requests_local       = false
      config.action_controller.perform_caching = true
    
      # Disable Rails's static asset server (Apache or nginx will already do this)
      config.serve_static_assets = false
    
      # Compress JavaScripts and CSS
      config.assets.compress = true
    
      # Don't fallback to assets pipeline if a precompiled asset is missed
      config.assets.compile = false
    
      # Generate digests for assets URLs
      config.assets.digest = true
    
      # Defaults to nil and saved in location specified by config.assets.prefix
      # config.assets.manifest = YOUR_PATH
    
      # Specifies the header that your server uses for sending files
      # config.action_dispatch.x_sendfile_header = "X-Sendfile" # for apache
      # config.action_dispatch.x_sendfile_header = 'X-Accel-Redirect' # for nginx
    
      # Force all access to the app over SSL, use Strict-Transport-Security, and use secure cookies.
      # config.force_ssl = true
    
      # See everything in the log (default is :info)
      # config.log_level = :debug
    
      # Prepend all log lines with the following tags
      # config.log_tags = [ :subdomain, :uuid ]
    
      # Use a different logger for distributed setups
      # config.logger = ActiveSupport::TaggedLogging.new(SyslogLogger.new)
    
      # Use a different cache store in production
      # config.cache_store = :mem_cache_store
    
      # Enable serving of images, stylesheets, and JavaScripts from an asset server
      # config.action_controller.asset_host = "http://assets.example.com"
    
      # Precompile additional assets (application.js, application.css, and all non-JS/CSS are already added)
      # config.assets.precompile += %w( search.js )
    
      # Disable delivery errors, bad email addresses will be ignored
      # config.action_mailer.raise_delivery_errors = false
    
      # Enable threaded mode
      # config.threadsafe!
    
      # Enable locale fallbacks for I18n (makes lookups for any locale fall back to
      # the I18n.default_locale when a translation can not be found)
      config.i18n.fallbacks = true
    
      # Send deprecation notices to registered listeners
      config.active_support.deprecation = :notify
    
      # Log the query plan for queries taking more than this (works
      # with SQLite, MySQL, and PostgreSQL)
      # config.active_record.auto_explain_threshold_in_seconds = 0.5
    end

下面是2.5.3 test.rb文件

    Hellorails::Application.configure do
      # Settings specified here will take precedence over those in config/application.rb
    
      # The test environment is used exclusively to run your application's
      # test suite. You never need to work with it otherwise. Remember that
      # your test database is "scratch space" for the test suite and is wiped
      # and recreated between test runs. Don't rely on the data there!
      config.cache_classes = true
    
      # Configure static asset server for tests with Cache-Control for performance
      config.serve_static_assets = true
      config.static_cache_control = "public, max-age=3600"
    
      # Log error messages when you accidentally call methods on nil
      config.whiny_nils = true
    
      # Show full error reports and disable caching
      config.consider_all_requests_local       = true
      config.action_controller.perform_caching = false
    
      # Raise exceptions instead of rendering exception templates
      config.action_dispatch.show_exceptions = false
    
      # Disable request forgery protection in test environment
      config.action_controller.allow_forgery_protection    = false
    
      # Tell Action Mailer not to deliver emails to the real world.
      # The :test delivery method accumulates sent emails in the
      # ActionMailer::Base.deliveries array.
      config.action_mailer.delivery_method = :test
    
      # Raise exception on mass assignment protection for Active Record models
      config.active_record.mass_assignment_sanitizer = :strict
    
      # Print deprecation notices to the stderr
      config.active_support.deprecation = :stderr
    end

下面是2.6.1 `backtrace_silencers.rb`文件

    # Be sure to restart your server when you modify this file.
    
    # You can add backtrace silencers for libraries that you're using but don't wish to see in your backtraces.
    # Rails.backtrace_cleaner.add_silencer { |line| line =~ /my_noisy_library/ }
    
    # You can also remove all the silencers if you're trying to debug a problem that might stem from framework code.
    # Rails.backtrace_cleaner.remove_silencers!

下面是2.6.2 `inflections.rb`文件

    # Be sure to restart your server when you modify this file.
    
    # Add new inflection rules using the following format
    # (all these examples are active by default):
    # ActiveSupport::Inflector.inflections do |inflect|
    #   inflect.plural /^(ox)$/i, '\1en'
    #   inflect.singular /^(ox)en/i, '\1'
    #   inflect.irregular 'person', 'people'
    #   inflect.uncountable %w( fish sheep )
    # end
    #
    # These inflection rules are supported but not enabled by default:
    # ActiveSupport::Inflector.inflections do |inflect|
    #   inflect.acronym 'RESTful'
    # end

下面是2.6.3 `mime_types.rb`文件

    # Be sure to restart your server when you modify this file.
    
    # Add new mime types for use in respond_to blocks:
    # Mime::Type.register "text/richtext", :rtf
    # Mime::Type.register_alias "text/html", :iphone

下面是2.6.4 `secret_token.rb`文件

    # Be sure to restart your server when you modify this file.
    
    # Your secret key for verifying the integrity of signed cookies.
    # If you change this key, all old signed cookies will become invalid!
    # Make sure the secret is at least 30 characters and all random,
    # no regular words or you'll be exposed to dictionary attacks.
    Hellorails::Application.config.secret_token = '4dbc944b97ab8bb1913d70f93fe0f66d0e49157ac6eb468ebc38d4be935930efd3e1acb6ad609ca086b6a5ee041eaac4c1bdf47ece06d2c168f97dd7b7d19866'

下面是2.6.5 `session_store.rb`文件

    # Be sure to restart your server when you modify this file.
    
    Hellorails::Application.config.session_store :cookie_store, key: '_hellorails_session'
    
    # Use the database for sessions instead of the cookie-based default,
    # which shouldn't be used to store highly confidential information
    # (create the session table with "rails generate session_migration")
    # Hellorails::Application.config.session_store :active_record_store

下面是2.6.6 `wrap_parameters.rb`文件

    # Be sure to restart your server when you modify this file.
    #
    # This file contains settings for ActionController::ParamsWrapper which
    # is enabled by default.
    
    # Enable parameter wrapping for JSON. You can disable this by setting :format to an empty array.
    ActiveSupport.on_load(:action_controller) do
      wrap_parameters format: [:json]
    end
    
    # Disable root element in JSON by default.
    ActiveSupport.on_load(:active_record) do
      self.include_root_in_json = false
    end

下面是2.7.1 en.yml文件

    # Sample localization file for English. Add more files in this directory for other locales.
    # See https://github.com/svenfuchs/rails-i18n/tree/master/rails%2Flocale for starting points.
    
    en:
      hello: "Hello world"

下面是 2.8 routes.rb文件

    Hellorails::Application.routes.draw do
      # The priority is based upon order of creation:     下面的设置的优先级按创建顺序来定
      # first created -> highest priority.                第一个被创建的设置具有最高的优先级
    
      # Sample of regular route:       正则路由的示例：
      #   match 'products/:id' => 'catalog#view'
      # Keep in mind you can assign values other than :controller and :action  记住，你可以指定其他值，除了:controller和:action
    
      # Sample of named route:         命名路由的示例
      #   match 'products/:id/purchase' => 'catalog#purchase', :as => :purchase
      # This route can be invoked with purchase_url(:id => product.id)        这个路由可以被purchase_url(:id => product.id) 调用
    
      # Sample resource route (maps HTTP verbs to controller actions automatically):   资源路由的示例（自动映射http动作到控制器方法）
      #   resources :products
    
      # Sample resource route with options:        使用选项的资源路由的示例
      #   resources :products do
      #     member do
      #       get 'short'
      #       post 'toggle'
      #     end
      #
      #     collection do
      #       get 'sold'
      #     end
      #   end
    
      # Sample resource route with sub-resources:     使用子资源的资源路由的示例
      #   resources :products do
      #     resources :comments, :sales
      #     resource :seller
      #   end
    
      # Sample resource route with more complex sub-resources   使用更复杂的子资源的资源路由的示例
      #   resources :products do
      #     resources :comments
      #     resources :sales do
      #       get 'recent', :on => :collection
      #     end
      #   end
    
      # Sample resource route within a namespace:  内嵌在一个命名空间里面的资源路由的示例
      #   namespace :admin do
      #     # Directs /admin/products/* to Admin::ProductsController
      #     # (app/controllers/admin/products_controller.rb)
      #     resources :products
      #   end
    
      # You can have the root of your site routed with "root"    你可以通过root使用你的站点根目录
      # just remember to delete public/index.html.               记得删除public/index.html文件
      # root :to => 'welcome#index'
    
      # See how all your routes lay out with "rake routes"    看怎样使用`rake routes`展示你的路由
    
      # This is a legacy wild controller route that's not recommended for RESTful applications.这是一个遗产野蛮控制器路由，对RESTful应用来说，不推荐使用。
      # Note: This route will make all actions in every controller accessible via GET requests.注意：这个路由将使每个控制器的所有action都可通过GET请求得到访问。
      # match ':controller(/:action(/:id))(.:format)'
    end

下面是 3. config.ru 文件

    # This file is used by Rack-based servers to start the application.
    
    require ::File.expand_path('../config/environment',  __FILE__)
    run Hellorails::Application

下面是6. Gemfile文件： 

    source 'https://rubygems.org'
    
    gem 'rails', '3.2.9'
    
    # Bundle edge Rails instead:
    # gem 'rails', :git => 'git://github.com/rails/rails.git'
    
    gem 'sqlite3'
    
    
    # Gems used only for assets and not required
    # in production environments by default.
    group :assets do
      gem 'sass-rails',   '~> 3.2.3'
      gem 'coffee-rails', '~> 3.2.1'
    
      # See https://github.com/sstephenson/execjs#readme for more supported runtimes
      # gem 'therubyracer', :platforms => :ruby
    
      gem 'uglifier', '>= 1.0.3'
    end
    
    gem 'jquery-rails'
    
    # To use ActiveModel has_secure_password
    # gem 'bcrypt-ruby', '~> 3.0.0'
    
    # To use Jbuilder templates for JSON
    # gem 'jbuilder'
    
    # Use unicorn as the app server
    # gem 'unicorn'
    
    # Deploy with Capistrano
    # gem 'capistrano'
    
    # To use debugger
    # gem 'debugger'
    
下面是7. Gemfile.lock文件：

    GEM
      remote: https://rubygems.org/
      specs:
        actionmailer (3.2.9)
          actionpack (= 3.2.9)
          mail (~> 2.4.4)
        actionpack (3.2.9)
          activemodel (= 3.2.9)
          activesupport (= 3.2.9)
          builder (~> 3.0.0)
          erubis (~> 2.7.0)
          journey (~> 1.0.4)
          rack (~> 1.4.0)
          rack-cache (~> 1.2)
          rack-test (~> 0.6.1)
          sprockets (~> 2.2.1)
        activemodel (3.2.9)
          activesupport (= 3.2.9)
          builder (~> 3.0.0)
        activerecord (3.2.9)
          activemodel (= 3.2.9)
          activesupport (= 3.2.9)
          arel (~> 3.0.2)
          tzinfo (~> 0.3.29)
        activeresource (3.2.9)
          activemodel (= 3.2.9)
          activesupport (= 3.2.9)
        activesupport (3.2.9)
          i18n (~> 0.6)
          multi_json (~> 1.0)
        arel (3.0.2)
        builder (3.0.4)
        coffee-rails (3.2.2)
          coffee-script (>= 2.2.0)
          railties (~> 3.2.0)
        coffee-script (2.2.0)
          coffee-script-source
          execjs
        coffee-script-source (1.4.0)
        erubis (2.7.0)
        execjs (1.4.0)
          multi_json (~> 1.0)
        hike (1.2.1)
        i18n (0.6.1)
        journey (1.0.4)
        jquery-rails (2.1.4)
          railties (>= 3.0, < 5.0)
          thor (>= 0.14, < 2.0)
        json (1.7.5)
        mail (2.4.4)
          i18n (>= 0.4.0)
          mime-types (~> 1.16)
          treetop (~> 1.4.8)
        mime-types (1.19)
        multi_json (1.4.0)
        polyglot (0.3.3)
        rack (1.4.1)
        rack-cache (1.2)
          rack (>= 0.4)
        rack-ssl (1.3.2)
          rack
        rack-test (0.6.2)
          rack (>= 1.0)
        rails (3.2.9)
          actionmailer (= 3.2.9)
          actionpack (= 3.2.9)
          activerecord (= 3.2.9)
          activeresource (= 3.2.9)
          activesupport (= 3.2.9)
          bundler (~> 1.0)
          railties (= 3.2.9)
        railties (3.2.9)
          actionpack (= 3.2.9)
          activesupport (= 3.2.9)
          rack-ssl (~> 1.3.2)
          rake (>= 0.8.7)
          rdoc (~> 3.4)
          thor (>= 0.14.6, < 2.0)
        rake (10.0.2)
        rdoc (3.12)
          json (~> 1.4)
        sass (3.2.3)
        sass-rails (3.2.5)
          railties (~> 3.2.0)
          sass (>= 3.1.10)
          tilt (~> 1.3)
        sprockets (2.2.2)
          hike (~> 1.2)
          multi_json (~> 1.0)
          rack (~> 1.0)
          tilt (~> 1.1, != 1.3.0)
        sqlite3 (1.3.6)
        thor (0.16.0)
        tilt (1.3.3)
        treetop (1.4.12)
          polyglot
          polyglot (>= 0.3.1)
        tzinfo (0.3.35)
        uglifier (1.3.0)
          execjs (>= 0.3.0)
          multi_json (~> 1.0, >= 1.0.2)
    
    PLATFORMS
      ruby
    
    DEPENDENCIES
      coffee-rails (~> 3.2.1)
      jquery-rails
      rails (= 3.2.9)
      sass-rails (~> 3.2.3)
      sqlite3
      uglifier (>= 1.0.3)

下面是10.6 robots.txt文件

    # See http://www.robotstxt.org/wc/norobots.html for documentation on how to use the robots.txt file
    #
    # To ban all spiders from the entire site uncomment the next two lines:
    # User-Agent: *
    # Disallow: /
下面是关于robots协议的有关知识：
http://www.robotstxt.org/
robots.txt  维基百科，自由的百科全书
跳转到： 导航、 搜索

robots.txt（统一小写）是一种存放于网站根目录下的ASCII编码的文本文件，它通常告诉网络搜索引擎的漫游器（又称网络蜘蛛），此网站中的哪些内容是不应被搜索引擎的漫游器获取的，哪些是可以被（漫游器）获取的。 因为一些系统中的URL是大小写敏感的，所以robots.txt的文件名应统一为小写。robots.txt应放置于网站的根目录下。如果想单独定义搜索引擎的漫游器访问子目录时的行为，那么可以将自定的设置合并到根目录下的robots.txt，或者使用robots元数据。

robots.txt协议并不是一个规范，而只是约定俗成的，所以并不能保证网站的隐私。注意robots.txt是用字符串比较来确定是否获取URL，所以目录末尾有与没有斜杠“／”表示的是不同的URL，也不能用`"Disallow: *.gif"`这样的通配符。

其他的影响搜索引擎的行为的方法包括使用robots元数据：

<meta name="robots" content="noindex,nofollow" />

这个协议也不是一个规范，而只是约定俗成的，通常搜索引擎会识别这个元数据，不索引这个页面，以及这个页面的链出页面。
目录

    1 例子
    2 非标准扩展协议
        2.1 自动发现Sitemaps文件
        2.2 Crawl-delay 指令
        2.3 Allow 指令
    3 替代
    4 外部链接
    5 参考文献

例子

允许所有的机器人：

User-agent: *
Disallow:

另一写法

User-agent: *
Allow:/

仅允许特定的机器人：（name_spider用真实名字代替）

User-agent: name_spider
Allow:

拦截所有的机器人：

User-agent: *
Disallow: /

禁止所有机器人访问特定目录：

User-agent: *
Disallow: /cgi-bin/
Disallow: /images/
Disallow: /tmp/
Disallow: /private/

仅禁止坏爬虫访问特定目录（BadBot用真实的名字代替）：

User-agent: BadBot
Disallow: /private/

非标准扩展协议
自动发现Sitemaps文件

Sitemap 指令被几大搜索引擎支持（包括Google、Yahoo、MSN和Ask），指定了网站 Sitemaps文件的位置。Sitemaps文件包含了网站页面所在的URL的一个列表。Sitemap 指令并不受 User-agent 指令的限制，所以它可以放在 robots.txt 文件中的任意位置。 [1] 唯一要注意的就是要使用网站地图指令，<sitemap_location>,并将URL的"location"值换成网站地图的地址，例如，下面就是一个网站地图指令的例子：

Sitemap: <sitemap_http://www.example.com/sitemap.xml>

如何编写 Sitemaps 文件，请参考 sitemaps.org（英文） 上的说明。
Crawl-delay 指令

几大抓取工具支持Crawl-delay参数，设置为多少秒，以等待同服务器之间连续请求：[2][3]

User-agent: *
Crawl-delay: 10

Allow 指令

一些大的Crawlers支持一项Allow指令，可以抵消先前Disallow指令。比如Googlebot。[4]
替代

虽然robots.txt是最为广泛接受的方法，但也可以与robots META标签一起使用。robots META标签主要是针对一个独立的页面设置，与其他的META标签（如使用的语言、页面的描述、关键词等）一样，robots META标签也是放在页面的HEAD标签中，专门用来告诉搜索引擎robots如何抓取该页的内容。

<head>
  <meta name="robots" content="noindex,nofollow" />
 
</head>
robots.txt  百度百科

robots.txt
robots.txt是一个协议，而不是一个命令。[1]robots.txt是搜索引擎中访问网站的时候要查看的第一个文件。robots.txt文件告诉蜘蛛程序在服务器上什么文件是可以被查看的。
　　当一个搜索蜘蛛访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt，如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；如果该文件不存在，所有的搜索蜘蛛将能够访问网站上所有没有被口令保护的页面。百度官方建议，仅当您的网站包含不希望被搜索引擎收录的内容时，才需要使用robots.txt文件。如果您希望搜索引擎收录网站上所有内容，请勿建立robots.txt文件。
　　robots.txt必须放置在一个站点的根目录下，而且文件名必须全部小写。
　　语法：最简单的 robots.txt 文件使用两条规则：
　　· User-Agent: 适用下列规则的漫游器
　　· Disallow: 要拦截的网页
　　如果其他网站链接了您robots.txt文件中设置的禁止收录的网页，那么这些网页仍然可能会出现在百度的搜索结果中，但您的网页上的内容不会被抓取、建入索引和显示，百度搜索结果中展示的仅是其他网站对您相关网页的描述。
在SEO中作用
　　在进行网站优化的时候，经常会使用robots文件把一些内容不想让蜘蛛抓取，以前写过一篇网站优化robots.txt文件的运用，现在写这篇文章在补充一点点知识！什么是robots.txt文件?
　　搜索引擎通过一种爬虫spider程序（又称搜索蜘蛛、robot、搜索机器人等），自动搜集互联网上的网页并获取相关信息。
　　鉴于网络安全与隐私的考虑，搜索引擎遵循robots.txt协议。通过根目录中创建的纯文本文件robots.txt，网站可以声明不想被robots访问的部分。每个网站都可以自主控制网站是否愿意被搜索引擎收录，或者指定搜索引擎只收录指定的内容。当一个搜索引擎的爬虫访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt，如果该文件不存在，那么爬虫就沿着链接抓取，如果存在，爬虫就会按照该文件中的内容来确定访问的范围。
　　robots.txt必须放置在一个站点的根目录下，而且文件名必须全部小写。
robots.txt文件的格式
　　User-agent: 定义搜索引擎的类型
　　Disallow: 定义禁止搜索引擎收录的地址
　　Allow: 定义允许搜索引擎收录的地址
　　我们常用的搜索引擎类型有：（User-agent区分大小写）

    　　google蜘蛛：Googlebot
    　　百度蜘蛛：Baiduspider
    　　360蜘蛛：360Spider
    　　yahoo蜘蛛：Yahoo!slurp
    　　alexa蜘蛛：ia_archiver
    　　bing蜘蛛：MSNbot
    　　altavista蜘蛛：scooter
    　　lycos蜘蛛：lycos_spider_(t-rex)
    　　alltheweb蜘蛛：fast-webcrawler
    　　inktomi蜘蛛：slurp
    　　Soso蜘蛛：Sosospider
    　　Google Adsense蜘蛛：Mediapartners-Google
    　　有道蜘蛛：YoudaoBot
    　　泽许蜘蛛: Zexuwhte

robots.txt文件的写法

    　　User-agent: * 这里的*代表的所有的搜索引擎种类，*是一个通配符
    　　Disallow: /admin/ 这里定义是禁止爬寻admin目录下面的目录
    　　Disallow: /require/ 这里定义是禁止爬寻require目录下面的目录
    　　Disallow: /ABC/ 这里定义是禁止爬寻ABC目录下面的目录
    　　Disallow: /A 是屏蔽A目录下的所有文件，包括文件和子目录，还屏蔽 /A*.*的文件
    　　Disallow: /cgi-bin/*.htm 禁止访问/cgi-bin/目录下的所有以".htm"为后缀的URL（包含子目录）。
    　　Disallow: /*?* 禁止访问网站中所有的动态页面
    　　Disallow: /.jpg$ 禁止抓取网页所有的.jpg格式的图片
    　　Disallow:/ab/adc.html 禁止爬取ab文件夹下面的adc.html文件。
    　　Allow: /cgi-bin/　这里定义是允许爬寻cgi-bin目录下面的目录
    　　Allow: /tmp 这里定义是允许爬寻tmp的整个目录
    　　Allow: .htm$ 仅允许访问以".htm"为后缀的URL。
    　　Allow: .gif$ 允许抓取网页和gif格式图片

用法举例
　　例1. 禁止所有搜索引擎访问网站的任何部分
　　User-agent: *
　　Disallow: /
　　实例分析：淘宝网的 Robots.txt文件
　　User-agent: baiduspider
　　Disallow: /
　　很显然淘宝不允许百度的机器人访问其网站下其所有的目录。
　　例2. 允许所有的robot访问 (或者也可以建一个空文件 “/robots.txt” file)
　　User-agent: *
　　Allow:
　　例3. 禁止某个搜索引擎的访问
　　User-agent: BadBot
　　Disallow: /
　　例4. 允许某个搜索引擎的访问
　　User-agent: Baiduspider
　　allow:/
　　例5.一个简单例子

    　　在这个例子中，该网站有三个目录对搜索引擎的访问做了限制，即搜索引擎不会访问这三个目录。
    　　需要注意的是对每一个目录必须分开声明，而不要写成 “Disallow: /cgi-bin/ /tmp/”。
    　　User-agent：后的*具有特殊的含义，代表“any robot”，所以在该文件中不能有“Disallow: /tmp/*” or “Disallow:*.gif”这样的记录出现。
    　　User-agent: *
    　　Disallow: /cgi-bin/
    　　Disallow: /tmp/
    　　Disallow: /~joe/

Robot特殊参数：
　　允许 Googlebot：
　　如果您要拦截除 Googlebot 以外的所有漫游器不能访问您的网页，可以使用下列语法：

    　　User-agent:
    　　Disallow: /
    　　User-agent: Googlebot
    　　Disallow:

　　Googlebot 跟随指向它自己的行，而不是指向所有漫游器的行。
　　“Allow”扩展名：
　　Googlebot 可识别称为“Allow”的 robots.txt 标准扩展名。其他搜索引擎的漫游器可能无法识别此扩展名，因此请使用您感兴趣的其他搜索引擎进行查找。“Allow”行的作用原理完全与“Disallow”行一样。只需列出您要允许的目录或页面即可。
　　您也可以同时使用“Disallow”和“Allow”。例如，要拦截子目录中某个页面之外的其他所有页面，可以使用下列条目：

    　　User-agent: Googlebot
    　　Disallow: /folder1/
    　　Allow: /folder1/myfile.html

　　这些条目将拦截 folder1 目录内除 myfile.html 之外的所有页面。
　　如果您要拦截 Googlebot 并允许 Google 的另一个漫游器（如 Googlebot-Mobile），可使用”Allow”规则允许该漫游器的访问。例如：
　　User-agent: Googlebot
　　Disallow: /
　　User-agent: Googlebot-Mobile
　　Allow:
　　使用 * 号匹配字符序列：
　　您可使用星号 `*` 来匹配字符序列。例如，要拦截对所有以 private 开头的子目录的访问，可使用下列条目：

    　　User-Agent: Googlebot
    　　Disallow: /private*/

　　要拦截对所有包含问号 (?) 的网址的访问，可使用下列条目：

    　　User-agent: *
    　　Disallow: /*?*

　　使用 $ 匹配网址的结束字符
　　您可使用 $ 字符指定与网址的结束字符进行匹配。例如，要拦截以 .asp 结尾的网址，可使用下列条目：
　
    　User-agent: Googlebot
    　Disallow: /*.asp$
　
　　您可将此模式匹配与 Allow 指令配合使用。例如，如果 表示一个会话 ID，您可排除所有包含该 ID 的网址，确保 Googlebot 不会抓取重复的网页。但是，以 结尾的网址可能是您要包含的网页版本。在此情况下，可对 robots.txt 文件进行如下设置：

    　　User-agent: *
    　　Allow: /*?$
    　　Disallow: /*?
    　　Disallow: / *?
    　　一行将拦截包含 的网址（具体而言，它将拦截所有以您的域名开头、后接任意字符串，然后是问号 (?），而后又是任意字符串的网址）。
    　　Allow: /*?$ 一行将允许包含任何以 结尾的网址（具体而言，它将允许包含所有以您的域名开头、后接任意字符串，然后是问号 (?），问号之后没有任何字符的网址）。

Robots Meta标签
　　Robots.txt文件主要是限制整个站点或者目录的搜索引擎访问情况，而Robots Meta标签则主要是针对一个个具体的页面。和其他的META标签（如使用的语言、页面的描述、关键词等）一样，Robots Meta标签也是放在页面中，专门用来告诉搜索引擎ROBOTS如何抓取该页的内容。
　　Robots Meta标签中没有大小写之分，name=”Robots”表示所有的搜索引擎，可以针对某个具体搜索引擎写为name=”BaiduSpider”。content部分有四个指令选项：index、noindex、follow、nofollow，指令间以“，”分隔。
　　index指令告诉搜索机器人抓取该页面；
　　follow指令表示搜索机器人可以沿着该页面上的链接继续抓取下去；
　　Robots Meta标签的缺省值是index和follow，只有inktomi除外，对于它，缺省值是index、nofollow。
需要注意的是
　　上述的robots.txt和Robots Meta标签限制搜索引擎机器人（ROBOTS）抓取站点内容的办法只是一种规则，需要搜索引擎机器人的配合才行，并不是每个ROBOTS都遵守的。
　　目前看来，绝大多数的搜索引擎机器人都遵守robots.txt的规则，而对于RobotsMETA标签，目前支持的并不多，但是正在逐渐增加，如著名搜索引擎GOOGLE就完全支持，而且GOOGLE还增加了一个指令“archive”，可以限制GOOGLE是否保留网页快照。
robots.txt使用误区
　　特别提示：robots里面内容的大小写不可更改，Disallow后面的冒号必须为英文状态的。
误区一
　　网站上所有的文件都需要被蜘蛛抓取，那就没必要添加robots.txt文件了。反正如果该文件不存在，所有的搜索蜘蛛将默认能够访问网站上所有没有被口令保护的页面。
误区二
　　在robots.txt文件中设置所有的文件都可以被搜索蜘蛛抓取，这样可以增加网站的收录率。
　　网站中的脚本程序、样式表等文件即使被蜘蛛收录，也不会增加网站的收录率，还只会占用服务器存储空间。因此必须在robots.txt文件里设置不要让搜索蜘蛛索引脚本程序、样式表等文件，具体哪些文件需要排除，在robots.txt使用技巧一文中有详细介绍。
误区三
　　搜索蜘蛛抓取网页太浪费服务器资源，在robots.txt文件中设置所有的搜索蜘蛛都不能抓取全部的网页。
　　如果这样的话，会导致整个网站不能被搜索引擎收录。
使用技巧
文件
　　⒈每当用户试图访问某个不存在的URL时，服务器都会在日志中记录404错误（无法找到文件）。每当搜索蜘蛛来寻找并不存在的robots.txt文件时，服务器也将在日志中记录一条404错误，所以你应该在网站中添加一个robots.txt。
　　⒉网站管理员必须使蜘蛛程序远离某些服务器上的目录——保证服务器性能。比如：大多数网站服务器都有程序储存在“cgi-bin”目录下，因此在robots.txt文件中加入“Disallow: /cgi-bin/”是个好主意，这样能够避免将所有程序文件被蜘蛛索引，可以节省服务器资源。一般网站中不需要蜘蛛抓取的文件有：后台管理文件、程序脚本、附件、数据库文件、编码文件、样式表文件、模板文件、导航图片和背景图片等等。
　　下面是VeryCMS里的robots.txt文件：
　　User-agent: *
　　Disallow: /admin/ 后台管理文件
　　Disallow: /require/ 程序文件
　　Disallow: /attachment/ 附件
　　Disallow: /images/ 图片
　　Disallow: /data/ 数据库文件
　　Disallow: /template/ 模板文件
　　Disallow: /css/ 样式表文件
　　Disallow: /lang/ 编码文件
　　Disallow: /script/ 脚本文件
　　⒊如果你的网站是动态网页，并且你为这些动态网页创建了静态副本，以供搜索蜘蛛更容易抓取。那么你需要在robots.txt文件里设置避免动态网页被蜘蛛索引，以保证这些网页不会被视为含重复内容。
　　⒋robots.txt文件里还可以直接包括在sitemap文件的链接。就像这样：

    　　Sitemap: http://www.***.com/sitemap.xml
    　　（此处请填写XML地图的绝对路径，即完整URL，如果按习惯填写Sitemap: /sitemap.xml，提交后会提示：检测到无效的 Sitemap 网址；语法错误。XML地图必须在网站根目录下才有效。）

　　目前对此表示支持的搜索引擎公司有Google,Yahoo,Ask and MSN。而中文搜索引擎公司，显然不在这个圈子内。这样做的好处是，站长不用到每个搜索引擎的站长工具或者相似的站长部分，去提交自己的sitemap文件，搜索引擎的蜘蛛自己就会抓取robots.txt文件，读取其中的sitemap路径，接着抓取其中相链接的网页。
　　⒌合理使用robots.txt文件还能避免访问时出错。比如，不能让搜索者直接进入购物车页面。因为没有理由使购物车被收录，所以你可以在robots.txt文件里设置来阻止搜索者直接进入购物车页面。
robots.txt文件的格式
　　"robots.txt"文件包含一条或更多的记录，这些记录通过空行分开（以CR,CR/NL,or NL作为结束符），每一条记录的格式如下所示：
　　"<field>:<optionalspace><value><optionalspace>"。
　　在该文件中可以使用#进行注解，具体使用方法和UNⅨ中的惯例一样。该文件中的记录通常以一行或多行User-agent开始，后面加上若干Disallow和Allow行，详细情况如下：
　　User-agent:
　　该项的值用于描述搜索引擎robot的名字。在"robots.txt"文件中，如果有多条User-agent记录说明有多个robot会受到"robots.txt"的限制，对该文件来说，至少要有一条User-agent记录。如果该项的值设为*，则对任何robot均有效，在"robots.txt"文件中，"User-agent:*"这样的记录只能有一条。如果在"robots.txt"文件中，加入"User-agent:SomeBot"和若干Disallow、Allow行，那么名为"SomeBot"只受到"User-agent:SomeBot"后面的Disallow和Allow行的限制。
　　Disallow:
　　该项的值用于描述不希望被访问的一组URL，这个值可以是一条完整的路径，也可以是路径的非空前缀，以Disallow项的值开头的URL不会被robot访问。例如"Disallow:/help"禁止robot访问/help.html、/helpabc.html、/help/index.html，而"Disallow:/help/"则允许robot访问/help.html、/helpabc.html，不能访问/help/index.html。"Disallow:"说明允许robot访问该网站的所有url，在"/robots.txt"文件中，至少要有一条Disallow记录。如果"/robots.txt"不存在或者为空文件，则对于所有的搜索引擎robot，该网站都是开放的。
　　Allow:
　　该项的值用于描述希望被访问的一组URL，与Disallow项相似，这个值可以是一条完整的路径，也可以是路径的前缀，以Allow项的值开头的URL是允许robot访问的。例如"Allow:/hibaidu"允许robot访问/hibaidu.htm、/hibaiducom.html、/hibaidu/com.html。一个网站的所有URL默认是Allow的，所以Allow通常与Disallow搭配使用，实现允许访问一部分网页同时禁止访问其它所有URL的功能。
　　需要特别注意的是Disallow与Allow行的顺序是有意义的，robot会根据第一个匹配成功的Allow或Disallow行确定是否访问某个URL。

    　　使用"*"和"$"：
    　　Baiduspider支持使用通配符"*"和"$"来模糊匹配url。
    　　"$" 匹配行结束符。
    　　"*" 匹配0或多个任意字符。

字符编码
　　robots.txt使用什么字符编码，并没有相关规定，都是各搜索引擎自已定义的。虽然google和其它搜索引擎建议大家使用 utf-8 字符编码格式的robots.txt，但几乎所有的搜索引擎都支持 ANSI 编码格式，而google自已对 utf-8 编码格式的robots.txt，会出现首字乱码。所以为了达到最大的兼容性，建议大家使用 ANSI 格式编码，或者使用 utf-8 编码格式，但需要空出首行。
　　还有一个建议就是robots.txt中最好不要出现中文，即使是注释也要使用英文。
生效时间
　　robots.txt文件一般生效时间为7-15天，即1-2周。如果新网站源码中包含robots.txt文件，那样蜘蛛进行爬行时就会生效，如果是后来添加的，那样蜘蛛需要对数据进行更新，时间一般在7-15天。
用法举例
　　
例1.禁止所有搜索引擎访问网站的任何部分	

    User-agent: *
    Disallow: /

例2.允许所有的robot访问
（或者也可以建一个空文件 "/robots.txt")	第1种写法

    User-agent: *
    Allow: /

第2种写法

    User-agent: *
    Allow:

第3种写法

    User-agent: *
    Disallow:

例3. 仅禁止Baiduspider访问您的网站	

    User-agent: Baiduspider
    Disallow: /

例4. 仅允许Baiduspider访问您的网站	

    User-agent: Baiduspider
    Allow: /

例5. 禁止spider访问特定目录
在这个例子中，该网站有三个目录对搜索引擎的访问做了限制，即robot不会访问这三个目录。需要注意的是对每一个目录必须分开声明，而不能写成 "Disallow: /cgi-bin/ /tmp/"。	

    User-agent: *
    Disallow: /cgi-bin/
    Disallow: /tmp/
    Disallow: /~joe/

例6. 允许访问特定目录中的部分url	

    User-agent: *
    Allow: /cgi-bin/see
    Allow: /tmp/hi
    Allow: /~joe/look

例7. 使用`"*"`限制访问url
禁止访问/cgi-bin/目录下的所有以".htm"为后缀的URL（包含子目录）。	

    User-agent: *
    Disallow: /cgi-bin/*.htm

例8. 使用"$"限制访问url
仅允许访问以".htm"为后缀的URL。	

    User-agent: *
    Allow: / .htm$

例9. 禁止访问网站中所有的动态页面	

    User-agent: *
    Disallow: /*?*

例10. 禁止Baiduspider抓取网站上所有图片
仅允许抓取网页，禁止抓取任何图片。	

    User-agent: Baiduspider
    Disallow: /*.jpg$
    Disallow: /* .jpeg$
    Disallow: /* .gif$
    Disallow: /* .png$
    Disallow: /*.bmp$

例11. 仅允许Baiduspider抓取网页和。gif格式图片
允许抓取网页和gif格式图片，不允许抓取其他格式图片	

    User-agent: Baiduspider
    Allow: .gif$
    Disallow: /.jpg$
    Disallow: / .jpeg$
    Disallow: / .png$
    Disallow: /.bmp$

例12. 仅禁止Baiduspider抓取。jpg格式图片	

    User-agent: /Baiduspider
    Disallow: /.jpg$

百度各个产品使用不同的user-agent：
　　
无线搜索	Baiduspider-mobile
图片搜索	Baiduspider-image
视频搜索	Baiduspider-video
新闻搜索	Baiduspider-news
百度搜藏	Baiduspider-favo
百度联盟	Baiduspider-cpro
商务搜索	Baiduspider-ads
网页以及其他搜索	Baiduspider
obots的来历
　　Robots协议并非强制性法规，而是搜索引擎诞生后，互联网业界经过长期博弈，最终在搜索引擎与商业站点、公众知情权和用户隐私权之间达成的一种妥协。
　　据了解，早期的互联网主要是“用户-网站”模式。用户通过网站获取信息，网站通过吸引用户点击来实现广告收入。不过，当谷歌把搜索引擎变成一种成功的商业模式之后，很多网站原有的商业模式遭到了严重破坏。
　　为了维护自身的利益，一些欧美大型网站联合起来与谷歌谈判，要求谷歌“有所为有所不为”，于是就有了Robots协议。该协议的核心思想就是要求Robots程序不要去检索那些站长不希望被直接搜索到的内容，并将约束Robots程序的具体方法规范成格式代码，就成了Robots协议。一般来说，网站是通过Robots.txt文件来实现Robots协议。
　　国内使用Robots协议最典型的案例就是淘宝网拒绝百度搜索。此外还有大量的用户注册、邮件等信息，都利用Robots协议来防止这些内容在互联网上被搜索到。
　　不过，绝大多数中小网站需要依靠搜索引擎来增加流量，因此通常并不排斥搜索引擎，也很少使用Robots协议。2011年京东商城屏蔽一淘网抓取数据时，曾指责一淘网破坏了Robots协议。
　　技术工程师Joey在接受《每日经济新闻》采访时表示，谷歌、百度是通过都是自己的服务器不停地在网上抓内容进行索引，而360的模式是让每个使用360浏览器的电脑成为360的蜘蛛爬虫，把浏览的内容上传到360服务器上做索引。
Robots协议约束力几何？\
　　此前，在多次“互联网大战”中，360的隐私问题均被竞争对手列为质疑的焦点。
　　两年前，奇虎360公司两名网络工程师利用360公司系统收集的用户信息，通过360服务器云计算后台破解了市政一卡通系统的后台密码，并远程为自己和3位同事的一卡通恶意充值2600元。2011年1月，360收集隐私数据被谷歌爬虫抓取，结果包括网民在百度搜索的关键字、淘宝购物记录、金蝶等企业内部财务网络数据等链接数据“裸奔”于互联网上。
　　不过，很多的中立行业观察人士认为，该事件的重心并不在口水仗，而是作为“行业自律”的Robots协议是否需要更强有力的法律约束？
　　一位浏览器技术人员对中央电视台记者表示，谷歌的Chrome浏览器也会根据用户访问的历史记录在首页给出“最常访问的网站”，但不会优先出现在搜索结果中。
　　目前尴尬的是，Robots协议并没有上升到一定的高度。“所谓Robots协议，其实就是谷歌自己制定的一个协议规范，并不是各大搜索厂商的共识或统一的协议，也从来没有任何一家国内搜索引擎服务商公开承诺遵守Robots协议或签署类似的协议或声明。”所以说，Robots协议连个行业规范都算不上，更别说什么国际标准了，即便在美国，也只有Google把它当回事。“上述不愿意透露姓名的浏览器技术人员表示。
下面是11. Rakefile文件

    #!/usr/bin/env rake
    # Add your own tasks in files placed in lib/tasks ending in .rake,
    # for example lib/tasks/capistrano.rake, and they will automatically be available to Rake.
    
    require File.expand_path('../config/application', __FILE__)
    
    Hellorails::Application.load_tasks

下面是12. README.rdoc文件

    == Welcome to Rails
    
    Rails is a web-application framework that includes everything needed to create
    database-backed web applications according to the Model-View-Control pattern.
    
    This pattern splits the view (also called the presentation) into "dumb"
    templates that are primarily responsible for inserting pre-built data in between
    HTML tags. The model contains the "smart" domain objects (such as Account,
    Product, Person, Post) that holds all the business logic and knows how to
    persist themselves to a database. The controller handles the incoming requests
    (such as Save New Account, Update Product, Show Post) by manipulating the model
    and directing data to the view.
    
    In Rails, the model is handled by what's called an object-relational mapping
    layer entitled Active Record. This layer allows you to present the data from
    database rows as objects and embellish these data objects with business logic
    methods. You can read more about Active Record in
    link:files/vendor/rails/activerecord/README.html.
    
    The controller and view are handled by the Action Pack, which handles both
    layers by its two parts: Action View and Action Controller. These two layers
    are bundled in a single package due to their heavy interdependence. This is
    unlike the relationship between the Active Record and Action Pack that is much
    more separate. Each of these packages can be used independently outside of
    Rails. You can read more about Action Pack in
    link:files/vendor/rails/actionpack/README.html.
    
    
    == Getting Started
    
    1. At the command prompt, create a new Rails application:
           <tt>rails new myapp</tt> (where <tt>myapp</tt> is the application name)
    
    2. Change directory to <tt>myapp</tt> and start the web server:
           <tt>cd myapp; rails server</tt> (run with --help for options)
    
    3. Go to http://localhost:3000/ and you'll see:
           "Welcome aboard: You're riding Ruby on Rails!"
    
    4. Follow the guidelines to start developing your application. You can find
    the following resources handy:
    
    * The Getting Started Guide: http://guides.rubyonrails.org/getting_started.html
    * Ruby on Rails Tutorial Book: http://www.railstutorial.org/
    
    == Debugging Rails
    
    Sometimes your application goes wrong. Fortunately there are a lot of tools that
    will help you debug it and get it back on the rails.
    
    First area to check is the application log files. Have "tail -f" commands
    running on the server.log and development.log. Rails will automatically display
    debugging and runtime information to these files. Debugging info will also be
    shown in the browser on requests from 127.0.0.1.
    
    You can also log your own messages directly into the log file from your code
    using the Ruby logger class from inside your controllers. Example:
    
      class WeblogController < ActionController::Base
        def destroy
          @weblog = Weblog.find(params[:id])
          @weblog.destroy
          logger.info("#{Time.now} Destroyed Weblog ID ##{@weblog.id}!")
        end
      end
    
    The result will be a message in your log file along the lines of:
    
      Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1!
    
    More information on how to use the logger is at http://www.ruby-doc.org/core/
    
    Also, Ruby documentation can be found at http://www.ruby-lang.org/. There are
    several books available online as well:
    
    * Programming Ruby: http://www.ruby-doc.org/docs/ProgrammingRuby/ (Pickaxe)
    * Learn to Program: http://pine.fm/LearnToProgram/ (a beginners guide)
    
    These two books will bring you up to speed on the Ruby language and also on
    programming in general.
    
    == Debugger
    
    Debugger support is available through the debugger command when you start your
    Mongrel or WEBrick server with --debugger. This means that you can break out of
    execution at any point in the code, investigate and change the model, and then,
    resume execution! You need to install ruby-debug to run the server in debugging
    mode. With gems, use <tt>sudo gem install ruby-debug</tt>. Example:
    
      class WeblogController < ActionController::Base
        def index
          @posts = Post.all
          debugger
        end
      end
    
    So the controller will accept the action, run the first line, then present you
    with a IRB prompt in the server window. Here you can do things like:
    
      >> @posts.inspect
      => "[#<Post:0x14a6be8
              @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>,
           #<Post:0x14a6620
              @attributes={"title"=>"Rails", "body"=>"Only ten..", "id"=>"2"}>]"
      >> @posts.first.title = "hello from a debugger"
      => "hello from a debugger"
    
    ...and even better, you can examine how your runtime objects actually work:
    
      >> f = @posts.first
      => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>
      >> f.
      Display all 152 possibilities? (y or n)
    
    Finally, when you're ready to resume execution, you can enter "cont".
    
    == Console
    
    The console is a Ruby shell, which allows you to interact with your
    application's domain model. Here you'll have all parts of the application
    configured, just like it is when the application is running. You can inspect
    domain models, change values, and save to the database. Starting the script
    without arguments will launch it in the development environment.
    
    To start the console, run <tt>rails console</tt> from the application
    directory.
    
    Options:
    
    * Passing the <tt>-s, --sandbox</tt> argument will rollback any modifications
      made to the database.
    * Passing an environment name as an argument will load the corresponding
      environment. Example: <tt>rails console production</tt>.
    
    To reload your controllers and models after launching the console run
    <tt>reload!</tt>
    
    More information about irb can be found at:
    link:http://www.rubycentral.org/pickaxe/irb.html
    
    == dbconsole
    
    You can go to the command line of your database directly through <tt>rails
    dbconsole</tt>. You would be connected to the database with the credentials
    defined in database.yml. Starting the script without arguments will connect you
    to the development database. Passing an argument will connect you to a different
    database, like <tt>rails dbconsole production</tt>. Currently works for MySQL,
    PostgreSQL and SQLite 3.
    
    == Description of Contents
    
    The default directory structure of a generated Ruby on Rails application:
    
      |-- app
      |   |-- assets
      |       |-- images
      |       |-- javascripts
      |       `-- stylesheets
      |   |-- controllers
      |   |-- helpers
      |   |-- mailers
      |   |-- models
      |   `-- views
      |       `-- layouts
      |-- config
      |   |-- environments
      |   |-- initializers
      |   `-- locales
      |-- db
      |-- doc
      |-- lib
      |   `-- tasks
      |-- log
      |-- public
      |-- script
      |-- test
      |   |-- fixtures
      |   |-- functional
      |   |-- integration
      |   |-- performance
      |   `-- unit
      |-- tmp
      |   |-- cache
      |   |-- pids
      |   |-- sessions
      |   `-- sockets
      `-- vendor
          |-- assets
              `-- stylesheets
          `-- plugins
    
    app
      Holds all the code that's specific to this particular application.
    
    app/assets
      Contains subdirectories for images, stylesheets, and JavaScript files.
    
    app/controllers
      Holds controllers that should be named like weblogs_controller.rb for
      automated URL mapping. All controllers should descend from
      ApplicationController which itself descends from ActionController::Base.
    
    app/models
      Holds models that should be named like post.rb. Models descend from
      ActiveRecord::Base by default.
    
    app/views
      Holds the template files for the view that should be named like
      weblogs/index.html.erb for the WeblogsController#index action. All views use
      eRuby syntax by default.
    
    app/views/layouts
      Holds the template files for layouts to be used with views. This models the
      common header/footer method of wrapping views. In your views, define a layout
      using the <tt>layout :default</tt> and create a file named default.html.erb.
      Inside default.html.erb, call <% yield %> to render the view using this
      layout.
    
    app/helpers
      Holds view helpers that should be named like weblogs_helper.rb. These are
      generated for you automatically when using generators for controllers.
      Helpers can be used to wrap functionality for your views into methods.
    
    config
      Configuration files for the Rails environment, the routing map, the database,
      and other dependencies.
    
    db
      Contains the database schema in schema.rb. db/migrate contains all the
      sequence of Migrations for your schema.
    
    doc
      This directory is where your application documentation will be stored when
      generated using <tt>rake doc:app</tt>
    
    lib
      Application specific libraries. Basically, any kind of custom code that
      doesn't belong under controllers, models, or helpers. This directory is in
      the load path.
    
    public
      The directory available for the web server. Also contains the dispatchers and the
      default HTML files. This should be set as the DOCUMENT_ROOT of your web
      server.
    
    script
      Helper scripts for automation and generation.
    
    test
      Unit and functional tests along with fixtures. When using the rails generate
      command, template test files will be generated for you and placed in this
      directory.
    
    vendor
      External libraries that the application depends on. Also includes the plugins
      subdirectory. If the app has frozen rails, those gems also go here, under
      vendor/rails/. This directory is in the load path.
    
下面是13.1 rails文件：

    #!/usr/bin/env ruby1.9.1
    # This command will automatically be run when you run "rails" with Rails 3 gems installed from the root of your application.
    
    APP_PATH = File.expand_path('../../config/application',  __FILE__)
    require File.expand_path('../../config/boot',  __FILE__)
    require 'rails/commands'

下面是14.4.1 `browsing_test.rb`文件：

    require 'test_helper'
    require 'rails/performance_test_help'
    
    class BrowsingTest < ActionDispatch::PerformanceTest
      # Refer to the documentation for all available options
      # self.profile_options = { :runs => 5, :metrics => [:wall_time, :memory]
      #                          :output => 'tmp/performance', :formats => [:flat] }
    
      def test_homepage
        get '/'
      end
    end

下面是14.5 `test_helper.rb`文件：

    ENV["RAILS_ENV"] = "test"
    require File.expand_path('../../config/environment', __FILE__)
    require 'rails/test_help'
    
    class ActiveSupport::TestCase
      # Setup all fixtures in test/fixtures/*.(yml|csv) for all tests in alphabetical order.
      #
      # Note: You'll currently still have to declare fixtures explicitly in integration tests
      # -- they do not yet inherit this setting
      fixtures :all
    
      # Add more helper methods to be used by all tests here...
    end


## 8.5 创建博客项目 255
视频教学：8分钟 255
### 8.5.1 实例描述 255
### 8.5.2 实例应用 255

    $ rails new firstblog -d=mysql    # 指定数据库为mysql，默认为sqlite3
    $ cd firstblog
    $ rails generate controller home index    # 创建一个首页，新增一个控制器（名字叫home），指定一个动作（index方法）；
      create  app/controllers/home_controller.rb
       route  get "home/index"
              erb
      create    app/views/home
      create    app/views/home/index.html.erb
             test_unit
      create    test/functional/home_controller_test.rb
             helper
      create    app/helpers/home_helper.rb
                test_unit
      create      test/unit/helpers/home_helper_test.rb
             assets
                coffee
      create      app/assets/javascripts/home.js.coffee
                scss
      create      app/assets/stylesheets/home.css.scss
    $ vi app/view/home/index.html.erb
    ...     # 使用vim修改这个文件
    $ rm public/index.html   # 删除原来的index页面
    $ vi config/routers.rb   
    ... # 修改路由将app/view/home/index.html.erb设置为新的主页：`root :to => 'home#index'`，即将根目录定向到home控制器的index方法
    $ vi config/database.yml  # 修改数据库的值，使其为一个真实数据库名称
    $ rails server

### 8.5.3 运行结果 256
浏览器：http://localhost:3000
即可看到index.html.erb文件制作的首页效果
### 8.5.4 实例分析 257
【kinder:note: 下面将该目录结果分析如下：新增了8个目录和文件】

     + 1. app -- rails程序的核心部分
     +--+ 1.1 assets -- 存放web程序的图片、js脚本、css样式
        +--+ 1.1.1 images ------- web应用的图片
           +--- 1.1.1.1 rails.png
        +--+ 1.1.2 javascripts -- web应用的js脚本程序
           +--- 1.1.2.1 application.js 
           +--- 1.1.2.2 home.js.coffee ========================新增
        +--+ 1.1.3 stylesheets -- web应用的CSS样式
           +--- 1.1.3.1 application.css
           +--- 1.1.3.2 home.css.scss =========================新增
     +--+ 1.2 controllers -- 存放驱动业务逻辑的控制器
        +--- 1.2.1 application_controller.rb
        +--- 1.2.2 home_controller.rb =========================新增
     +--+ 1.3 helpers -- 存放视图辅助类，一些常用的代码段
        +--- 1.3.1 application_helper.rb
        +--- 1.3.2 home_helper.rb
     +--+ 1.4 mailers -- rails 3是新增，存放与邮件服务相关的类
     +--+ 1.5 models --- 存放数据描述结构、验证和完整性规则等模块
     +--+ 1.6 views ---- 存放生成HTML的所有模板文件，也可以存放CSS、图片
        +--+ 1.6.1 layouts
           +--- 1.6.1.1 application.html.erb
        +--+ 1.6.2 home  ====================================新增
           +--- 1.6.2.1 index.html.erb ======================新增
     + 2. config --存储与服务器、数据库或者其他文件相依赖的配置文件
     +--- 2.1 application.rb
     +--- 2.2 boot.rb
     +--- 2.3 database.yml
     +--- 2.4 environment.rb
     +--+ 2.5 environments
        +--- 2.5.1 development.rb
        +--- 2.5.2 production.rb
        +--- 2.5.3 test.rb
     +--+ 2.6 initializers
        +--- 2.6.1 backtrace_silencers.rb
        +--- 2.6.2 inflections.rb
        +--- 2.6.3 mime_types.rb
        +--- 2.6.4 secret_token.rb
        +--- 2.6.5 session_store.rb
        +--- 2.6.6 wrap_parameters.rb
     +--+ 2.7 locales
        +--- 2.7.1 en.yml
     +--- 2.8routes.rb
     + 3. config.ru -- 基于rack服务器的配置来启动应用
     + 4. db -- 开发人员编写额数据库脚本
     +--- 4.1 development.sqlit3
     +--- 2.2 seeds.rb
     + 5. doc -- rails应用的各种文档
     +--- 5.1 README_FOR_APP
     + 6. Gemfile -- 指定哪些gem是rails应用所依赖的
     + 7. Gemfile.lock 
     + 8. lib -- 应用运行过程中所需的类库；这些类库不属于控制器、视图和辅助类；程序运行时这里会被自动加载。
     +--+ 8.1 assets
     +--+ 8.2 tasks
     + 9. log -- 存储程序运行期间产生的日志
     +--- 9.1 development.log -- 记录rails所有操作，以便开发者跟踪错误
     + 10. public -- 存储rails应用的通用资源
     +--- 10.1 404.html
     +--- 10.2 422.html
     +--- 10.3 500.html
     +--- 10.4 favicon.ico -- 收藏夹图标
     +--- 10.5 index.html --- rails默认首页
     +--- 10.6 robots.txt --- 禁止目录被检索到
     + 11. Rakefile -- 一些可以在命令行下运行的作业
     + 12. README.rdoc --应用程序的简要说明
     + 13. script -- rails应用的各种脚本，例如代码生成器脚本。
     +--- 13.1 rails
     + 14. test -- 单元测试和功能测试
     +--+ 14.1 fixtures
     +--+ 14.2 functional
        +--- 14.2.1 home_controller_test.rb ====================新增
     +--+ 14.3 integration
     +--+ 14.4 performance
        +--- 14.4.1 browsing_test.rb
     +--- 14.5 test_helper.rb
     +--+ 14.6 unit
        +--+ 14.6.1 helpers ====================================新增
           +--- 14.6.1 home_helper_test.rb =====================新增
     + 15. tmp
     +--+ 15.1 cache
     +--+ 15.2 pids
     +--+ 15.3 sessions
     +--+ 15.4 sockets
     + 16. vendor -- 程序依赖的外部类库，和lib一样可以被自动加载
     +--+ 16.1 assets
        +--+ 16.1.1 javascripts
        +--+ 16.1.2 stylesheets
     +--+ 16.2 plugins
 
新增文件内容如下：
下面是1.1.2.2 home.js.coffee ========================新增

    # Place all the behaviors and hooks related to the matching controller here.
    # All this logic will automatically be available in application.js.
    # You can use CoffeeScript in this file: http://jashkenas.github.com/coffee-script/

下面是1.1.3.2 home.css.scss =========================新增

    // Place all the styles related to the home controller here.
    // They will automatically be included in application.css.
    // You can use Sass (SCSS) here: http://sass-lang.com/

下面是1.2.2 `home_controller.rb` =========================新增

    class HomeController < ApplicationController
      def index
      end
    end

下面是1.6.2.1 index.html.erb ======================新增
下面是14.2.1 `home_controller_test.rb` ====================新增

    require 'test_helper'
    
    class HomeControllerTest < ActionController::TestCase
      test "should get index" do
        get :index
        assert_response :success
      end
    
    end

下面是14.6.1 `home_helper_test.rb` =====================新增

    require 'test_helper'
    
    class HomeHelperTest < ActionView::TestCase
    end


## 8.6 详解Rails数据库配置文件 257
视频教学：8分钟 257
【kinder:note: 下面是一个config/database.yml文件实例：】

    # SQLite version 3.x
    #   gem install sqlite3
    #
    #   Ensure the SQLite 3 gem is defined in your Gemfile
    #   gem 'sqlite3'
    #  第一节：开发
    development:
      adapter: sqlite3   # adapter:使用的数据库连接库（适配器），默认为sqlite3。其他还有mysql3等
      database: db/development.sqlite3  # database：数据库名称
      pool: 5  # 连接池数量，默认为5
      timeout: 5000  # 经过多少毫秒后服务器自动放弃连接，默认5000
    
    # Warning: The database defined as "test" will be erased and
    # re-generated from your development database when you run "rake".
    # Do not set this db to the same as development or production.
    # 第二节：测试
    test:
      adapter: sqlite3
      database: db/test.sqlite3
      pool: 5
      timeout: 5000
    # 第三节：生产
    production:
      adapter: sqlite3
      database: db/production.sqlite3
      pool: 5
      timeout: 5000

配置文件选项有：
adapter:使用的数据库连接库（适配器），默认为sqlite3。其他还有mysql3等
database：数据库名称
pool: 连接池数量，默认为5
timeout:经过多少毫秒后服务器自动放弃连接，默认5000
encoding：数据库采用的字符集编码，默认utf8
reconnect：是否允许重新连接
username：连接数据库的用户名
password：用户密码
host：数据库主机名称，默认为localhost，表示本机

## 8.7 快速生成博客项目页面框架 259
视频教学：6分钟 259
### 8.7.1 基础知识——scaffold生成器 260
scaffold可以生成基本的新建、显示信息列表、更新和删除操作。
语法：

    rails generate scaffold Model_name [field:type field:type ...]

其中`Model_name`是模型名字。后面的参数可选，field是数据库表中的字段，type是字段的数据类型。
rails应用中，数据库中的表对应模型中的一个类，并且在使用scaffold代码生成器时，rails会自动检测数据库中是否包含Model所需的数据表。

### 8.7.2 实例描述 260

第一种方式，书中的描述，使用mysql：

1. 创建数据库，注意把表名声明为复数形式。这样在使用rails生成器生成模型时，只需要声明为表的单数形式即可，否则运行时不能找到表。

    create table 'textblog' . 'articles'(
      'id' INTEGER UNSINGNED NOT NULL AUTO_INCREAMENT,
      'name' VARCHAR(45) NOT NULL,
      'title' VARCHAR(45) NOT NULL,
      'content' TEXT NOT NULL,
      PRIMARY KEY ('id')
    )

2. 在database.yml中指定数据库
3. 生成页面支架

    $ rails generate scaffold article id:int name:varchar title:varchar content:text
      invoke  active_record
      create    db/migrate/20121206073247_create_artcles.rb -------- 创建article表的迁移任务 (你的文件名称将包括一个不同的时间戳)，详见下面介绍
      create    app/models/artcle.rb ------------------------------- 模型
      invoke    test_unit
      create      test/unit/artcle_test.rb ------------------------- 模型的单元测试工具
      create      test/fixtures/artcles.yml ------------------------ 用于测试的夹具
      invoke  resource_route
       route    resources :artcles --------------------------------- 资源路由
      invoke  scaffold_controller
      create    app/controllers/artcles_controller.rb -------------- 控制器
      invoke    erb
      create      app/views/artcles
      create      app/views/artcles/index.html.erb ----------------- 首页视图
      create      app/views/artcles/edit.html.erb ------------------ 编辑视图
      create      app/views/artcles/show.html.erb ------------------ 显示单个视图
      create      app/views/artcles/new.html.erb ------------------- 新建视图
      create      app/views/artcles/_form.html.erb ----------------- 用于编辑与新建的局部表单模板
      invoke    test_unit
      create      test/functional/artcles_controller_test.rb ------- 控制器功能测试工具
      invoke    helper
      create      app/helpers/artcles_helper.rb -------------------- 视图帮助器
      invoke      test_unit
      create        test/unit/helpers/artcles_helper_test.rb ------- 帮助器的单元测试工具
      invoke  assets
      invoke    coffee
      create      app/assets/javascripts/artcles.js.coffee --------- ?
      invoke    scss
      create      app/assets/stylesheets/artcles.css.scss ---------- ?
      invoke  scss
      create    app/assets/stylesheets/scaffolds.css.scss ---------- 脚手架的默认css

4. 修改app/views/home/index.html.erb，在文件底部添加代码，产生一个执行跳转的链接：

    <p>由此进入<%= link_to "文章管理", articles_path %>页面</p>

`articles_path`的相关知识see下面11.4.1.2

5. 启动服务器`rails server`
6. 浏览器http://localhost:3000

第二种方式：使用默认的sqlite数据库
【kinder:note: 下面是《ror入门教程》的补充：】
1. 生成页面支架

    $ rails generate scaffold article id:string name:string title:string content:text

生成上面的多个文件。【kinder:note: 这里要说明的是id name title content的数据类型和书中描述的不一样，这是因为如果按照上面的类型，无法在下一步的rake中成功运行。这个错误提示出现得很奇怪，因为查过sqlite3的相关文档，int等数据类型是支持的。】【kinder:note: 查看了相关文档，发现类型包括：string text integer float decimal date datetime time timestamp binary boolean】
其中，`db/migrate/20121206073247_create_artcles.rb`文件：

    class CreateArticles < ActiveRecord::Migration
      def change
        create_table :articles do |t|
          t.string :id
          t.string :name
          t.string :title
          t.text :content
    
          t.timestamps
        end
      end
    end

Migration是设计用来方便创建和修改数据库的Ruby类。rails使用rake任务来运行迁移。而且 Migration可以撤销先前应用到数据库内的迁移操作。记住:迁移任务的文件名永远是唯一的.
上面的迁移创建了1个change方法,创建了一个包含四个字段表，同时它也为表自动创建了1个时间戳列。

2. 数据库迁移，生成数据库：

    $ rake db:migrate 

3. 修改app/views/home/index.html.erb，在文件底部添加代码

    <p>由此进入<%= link_to "文章管理", articles_path %>页面</p>

4. 启动服务器`rails server`
5. 浏览器http://localhost:3000

### 8.7.3 实例应用 260
下面是文件：`app/models/article.rb` ------------------------------- 模型。

    class Article < ActiveRecord::Base
      attr_accessible :content, :id, :name, :title
    end

Article实体继承自ActiveRecord类。
下面是文件：`test/unit/article_test.rb` ------------------------- 模型的单元测试工具

    require 'test_helper'
    
    class ArticleTest < ActiveSupport::TestCase
      # test "the truth" do
      #   assert true
      # end
    end

下面是文件：`test/fixtures/articles.yml` ------------------------ 用于测试的夹具

    # Read about fixtures at http://api.rubyonrails.org/classes/ActiveRecord/Fixtures.html
    
    one:
      id: MyString
      name: MyString
      title: MyString
      content: MyText
    
    two:
      id: MyString
      name: MyString
      title: MyString
      content: MyText

下面是文件：`app/controllers/articles_controller.rb` -------------- 控制器
这个文件提供了用于控制视图对数据库数据操作的方法。

    class ArticlesController < ApplicationController
      # GET /articles  显示数据列表的index方法
      # GET /articles.json
      def index
        @articles = Article.all   # Article的all方法获取对应数据库中的所有数据，然后保存在一个实例变量articles中。
        respond_to do |format|    # 使用respond_to方法向客户端回应默认的视图中。
          format.html # index.html.erb
          format.json { render json: @articles }
        end
      end

      # 下面是显示数据的show方法
      # GET /articles/1
      # GET /articles/1.json
      def show
        @article = Article.find(params[:id])
        respond_to do |format|
          format.html # show.html.erb
          format.json { render json: @article }
        end
      end

      # 下面是获取用户输入数据的new方法
      # GET /articles/new
      # GET /articles/new.json
      def new
        @article = Article.new
        respond_to do |format|
          format.html # new.html.erb
          format.json { render json: @article }
        end
      end

      # 下面是编辑数据的edit方法
      # GET /articles/1/edit
      def edit
        @article = Article.find(params[:id])
      end

      # 新增数据的create方法
      # POST /articles
      # POST /articles.json
      def create
        @article = Article.new(params[:article])
        respond_to do |format|
          if @article.save
            format.html { redirect_to @article, notice: 'Article was successfully created.' }
            format.json { render json: @article, status: :created, location: @article }
          else
            format.html { render action: "new" }
            format.json { render json: @article.errors, status: :unprocessable_entity }
          end
        end
      end

      #更新数据的update方法
      # PUT /articles/1
      # PUT /articles/1.json
      def update
        @article = Article.find(params[:id])
        respond_to do |format|
          if @article.update_attributes(params[:article])
            format.html { redirect_to @article, notice: 'Article was successfully updated.' }
            format.json { head :no_content }
          else
            format.html { render action: "edit" }
            format.json { render json: @article.errors, status: :unprocessable_entity }
          end
        end
      end

      # 删除数据的destroy方法
      # DELETE /articles/1
      # DELETE /articles/1.json
      def destroy
        @article = Article.find(params[:id])
        @article.destroy
        respond_to do |format|
          format.html { redirect_to articles_url }
          format.json { head :no_content }
        end
      end
    end

下面是文件：`app/views/articles/index.html.erb` ----------------- 首页视图

    <h1>Listing articles</h1>
    
    <table>
      <tr>
        <th>Id</th>
        <th>Name</th>
        <th>Title</th>
        <th>Content</th>
        <th></th>
        <th></th>
        <th></th>
      </tr>
    
    <% @articles.each do |article| %>
      <tr>
        <td><%= article.id %></td>
        <td><%= article.name %></td>
        <td><%= article.title %></td>
        <td><%= article.content %></td>
        <td><%= link_to 'Show', article %></td>
        <td><%= link_to 'Edit', edit_article_path(article) %></td>
        <td><%= link_to 'Destroy', article, method: :delete, data: { confirm: 'Are you sure?' } %></td>
      </tr>
    <% end %>
    </table>
    
    <br />
    
    <%= link_to 'New Article', new_article_path %>

下面是文件：`app/views/articles/edit.html.erb` ------------------ 编辑视图

    <h1>Editing article</h1>
    
    <%= render 'form' %>
    
    <%= link_to 'Show', @article %> |
    <%= link_to 'Back', articles_path %>

下面是文件：`app/views/articles/show.html.erb` ------------------ 显示单个视图

    <p id="notice"><%= notice %></p>
    
    <p>
      <b>Id:</b>
      <%= @article.id %>
    </p>
    
    <p>
      <b>Name:</b>
      <%= @article.name %>
    </p>
    
    <p>
      <b>Title:</b>
      <%= @article.title %>
    </p>
    
    <p>
      <b>Content:</b>
      <%= @article.content %>
    </p>
    
    
    <%= link_to 'Edit', edit_article_path(@article) %> |
    <%= link_to 'Back', articles_path %>

下面是文件：`app/views/articles/new.html.erb` ------------------- 新建视图
第二行是rails 3的新变化，通过调用form模板实现显示一个新增数据的表单

    <h1>New article</h1>
    
    <%= render 'form' %>
    
    <%= link_to 'Back', articles_path %>

下面是文件：`app/views/articles/_form.html.erb` ----------------- 用于编辑与新建的局部表单模板
针对articles表的各列信息封装了一个表单，并提供了让用户输入信息的文本框，以及提交按钮。

    <%= form_for(@article) do |f| %>
      <% if @article.errors.any? %>
        <div id="error_explanation">
          <h2><%= pluralize(@article.errors.count, "error") %> prohibited this article from being saved:</h2>
    
          <ul>
          <% @article.errors.full_messages.each do |msg| %>
            <li><%= msg %></li>
          <% end %>
          </ul>
        </div>
      <% end %>
    
      <div class="field">
        <%= f.label :id %><br />
        <%= f.text_field :id %>
      </div>
      <div class="field">
        <%= f.label :name %><br />
        <%= f.text_field :name %>
      </div>
      <div class="field">
        <%= f.label :title %><br />
        <%= f.text_field :title %>
      </div>
      <div class="field">
        <%= f.label :content %><br />
        <%= f.text_area :content %>
      </div>
      <div class="actions">
        <%= f.submit %>
      </div>
    <% end %>

下面是文件：`test/functional/articles_controller_test.rb` ------- 控制器功能测试工具

    require 'test_helper'
    
    class ArticlesControllerTest < ActionController::TestCase
      setup do
        @article = articles(:one)
      end
    
      test "should get index" do
        get :index
        assert_response :success
        assert_not_nil assigns(:articles)
      end
    
      test "should get new" do
        get :new
        assert_response :success
      end
    
      test "should create article" do
        assert_difference('Article.count') do
          post :create, article: { content: @article.content, id: @article.id, name: @article.name, title: @article.title }
        end
    
        assert_redirected_to article_path(assigns(:article))
      end
    
      test "should show article" do
        get :show, id: @article
        assert_response :success
      end
    
      test "should get edit" do
        get :edit, id: @article
        assert_response :success
      end
    
      test "should update article" do
        put :update, id: @article, article: { content: @article.content, id: @article.id, name: @article.name, title: @article.title }
        assert_redirected_to article_path(assigns(:article))
      end
    
      test "should destroy article" do
        assert_difference('Article.count', -1) do
          delete :destroy, id: @article
        end
    
        assert_redirected_to articles_path
      end
    end

下面是文件：`app/helpers/articles_helper.rb` -------------------- 视图帮助器

    module ArticlesHelper
    end

下面是文件：`test/unit/helpers/articles_helper_test.rb` ------- 帮助器的单元测试工具

    require 'test_helper'
    
    class ArticlesHelperTest < ActionView::TestCase
    end

下面是文件：`app/assets/javascripts/articles.js.coffee` --------- ?

    # Place all the behaviors and hooks related to the matching controller here.
    # All this logic will automatically be available in application.js.
    # You can use CoffeeScript in this file: http://jashkenas.github.com/coffee-script/

下面是文件：`app/assets/stylesheets/articles.css.scss` ---------- ?

    // Place all the styles related to the articles controller here.
    // They will automatically be included in application.css.
    // You can use Sass (SCSS) here: http://sass-lang.com/

下面是文件：`app/assets/stylesheets/scaffolds.css.scss` ---------- 脚手架的默认css

    body {
      background-color: #fff;
      color: #333;
      font-family: verdana, arial, helvetica, sans-serif;
      font-size: 13px;
      line-height: 18px;
    }
    
    p, ol, ul, td {
      font-family: verdana, arial, helvetica, sans-serif;
      font-size: 13px;
      line-height: 18px;
    }
    
    pre {
      background-color: #eee;
      padding: 10px;
      font-size: 11px;
    }
    
    a {
      color: #000;
      &:visited {
        color: #666;
      }
      &:hover {
        color: #fff;
        background-color: #000;
      }
    }
    
    div {
      &.field, &.actions {
        margin-bottom: 10px;
      }
    }
    
    #notice {
      color: green;
    }
    
    .field_with_errors {
      padding: 2px;
      background-color: red;
      display: table;
    }
    
    #error_explanation {
      width: 450px;
      border: 2px solid red;
      padding: 7px;
      padding-bottom: 0;
      margin-bottom: 20px;
      background-color: #f0f0f0;
      h2 {
        text-align: left;
        font-weight: bold;
        padding: 5px 5px 5px 15px;
        font-size: 12px;
        margin: -7px;
        margin-bottom: 0px;
        background-color: #c00;
        color: #fff;
      }
      ul li {
        font-size: 12px;
        list-style: square;
      }
    }

### 8.7.4 实例分析 267
## 8.8 Rails应用程序运行流程 267
视频教学：6分钟 267

1. 用户向服务器端提交请求时，服务器端接收用户的请求信息，然后进入boot.rb文件。
2. 执行完毕boot.rb，就会执行environment文件。environment文件中的程序会从environments文件夹和initializers文件夹中的文件，以及database.yml文件中获取配置信息。
3. 然后执行routes.rb文件。该文件中的程序主要用于设定网址参数，并解析params参数，最后把解析后的参数发送给控制器。
4. 控制器接收到参数之后，开始执行MVC执行流程。MVC会根据参数执行响应的方法，并最终将用户请求的页面回传给用户。

## 8.9 完善blog项目 268
?视频教学：7分钟 268
### 8.9.1 实例应用 268

1. 修改全局应用程序模板文件：application.html.erb
2. 将样式表文件style.css放置到public/stylesheets目录下
3. 修改文件编码方式为UTF-8
4. 将style.css中设计的图片放到public/images文件夹下
5. 继续修改全局应用程序模板文件：application.html.erb，使用div+css布局页面：页眉、页尾、左侧、右侧
6. 修改app/views/articles/index.html.erb、show.html.erb、new.html.erb、edit.html.erb、`_form.html.erb`等文件

### 8.9.2 运行结果 272
### 8.9.3 实例分析 274
## 8.10 常见问题解答 274
### 8.10.1 Ruby On Rails上安装mysql不能使用的问题 274
### 8.10.2 运行时出现No route matches错误问题 275
### 8.10.3 Rails连接oracle数据库问题 275
## 8.11 习题 276

---
# 第9章 使用ORM框架实现数据持久化 279
## 9.1 什么是ORM 280
视频教学：7分钟 280
ORM，全称是object relation mapping，对象关系映射，建立程序中的实体对象到关系形数据库之间的映射，是一类实现将对象持久化到数据库功能的框架的总称。
ORM映射关系主要分为三个级别的映射，分别是：

1. 实体类--表
2. 实体对象--记录
3. 对象属性--字段

## 9.2 和我一起认识ActiveRecord 281
视频教学：5分钟 281
### 9.2.1 基础知识——ActiveRecord 282
在ruby on rails框架中，ActiveRecord是作为rails的一个模块被集成在系统中的，在安装rails框架的时候，同时也安装上对ActiveRecord的支持。
ActiveRecord实现了ruby中的ORM框架，任何实体类都将通过继承ActiveRecord类实现与数据库的交互。
默认下，实体类和数据库表实现了一对一的映射关系，但可以通过设置一些明确的信息来确定一对多、多对多的映射关系。

### 9.2.2 实例描述 282
### 9.2.3 实例应用 283
### 9.2.4 实例分析 288
## 9.3 教你如何从MySql数据库中读取数据 288
视频教学：9分钟 288
### 9.3.1 基础知识——使用ActiveRecord查询数据 288
#### 9.3.1.1 find方法
ActiveRecord类提供的find方法可以方便地以面向对象的方式查询数据。
find方法提供了多种不同的查询方式：根据主键查询、查询第一行、查询最后一行、查询所有记录、查询指定行数的记录等。

要使用find方法实现各种查询功能，需要设置该方法的各种可选项作为参数。通过这些选项，可以指定更加详细的查询条件、排序规则、分组查询、指定返回记录的个数等。
:conditions -- 表示SQL语句的条件子句，传递给该选项的参数是SQL字符串，例如:find(:conditions => "name='tom'")。
:order ------- 用于指定查询结果集的排序方式，对应于SQL语句的order by子句。例如：`find(:order => "login_count desc"`—— 以`login_count`字段降序（descend）排列。
:group ------- 用于指定查询结果集的分组方式，对应于SQL语句的group by子句。
:having ------ 用在goup by 子句的后面，用于在使用group by子句分组后对结果再次进行过滤，对应SQL语句中的having子句。
:limit ------- 表示一个正整数，用于限制返回记录的行数。
:offset ------ 表示一个正整数，用于指定记录集从第几条开始返回。记录集是一个数组，从0开始记数，所以如果该选项设置为10,将从第9条记录开始返回。
使用find方法执行查询的时候，可以通过设置:limit选项和:offset选项来实现数据表的分页查询功能
:joins ------- 指定一个默认数据表和关联数据表的一个连接，返回只读记录（但可以通过设置:readonly选项来改变默认行为）
:include ----- 使用左外键连接时，该选项用于加载左连接的关联条件。传递给该选项的参数是一个已经在Model文件中定义好的关联。【kinder:unknow什么左连接？】
:select ------ 表示查询语句要查询的字段名。默认为`*`,返回所有字段。也可以明确指定要查询的字段名称。
:from -------- 用于指定查询的数据表，默认为find方法对应的类，也可以改写成其他的数据表。
:readonly ---- 用于指定查询的结果是否为只读。
:lock -------- 表示一段SQL语句是否独占锁定建立的连接。

#### 9.3.1.2 根据主键查询
find方法可以根据接收的一个或多个提供的主键值，查询相应的数据记录，返回一个结果集。如Person.find(1,3)
如果提供的主键值在数据库表中不存在，find方法将会抛出一个RecordNotFound异常

#### 9.3.1.3 获取表中的第一行或最后一行
格式：

      ModeClass.find(:first, options)
      ModeClass.find(:last, otionts)

#### 9.3.1.4 查询所有记录
格式：

    ModeName.find(:all[, :other_options])

查询数据表的所有记录，还可以直接使用all方法。

### 9.3.2 实例描述 292
### 9.3.3 实例应用 292
### 9.3.4 运行结果 294
### 9.3.5 实例分析 294
## 9.4 动态查询数据库中的数据 295
视频教学：7分钟 295
如果查询条件是数据库中的某个字段，使用前面所讲的find方法将非常不方便。
### 9.4.1 基础知识——动态查询 295
#### 9.4.1.1 `find_by_*`方法
查询匹配指定属性值的第一个对象。如果没有满足条件的记录，返回nil
语法：

    ModeName.find_by_属性(值)

#### 9.4.1.2 `find_all_by_*`方法
查询匹配指定属性值的所有对象。如果没有满足条件的记录，返回nil
语法：

    ModeName.find_all_by_属性(值)

#### 9.4.1.3 `find_by_*_and_*`方法
查询匹配指定多个属性值的所有对象。如果没有满足条件的记录，返回nil
语法：

    ModeName.find_by_属性1_and_属性2[_and_属性n](值1, 值2, ..., 值n)

#### 9.4.1.4 `find_all_by_*_and_*`方法
查询匹配多个指定属性值的所有对象。如果没有满足条件的记录，返回nil
语法：

    ModeName.find_all_by_属性1_and_属性2[_and_属性n](值1, 值2, ..., 值n)


### 9.4.2 实例描述 297
### 9.4.3 实例应用 297
### 9.4.4 运行结果 299
### 9.4.5 实例分析 299
## 9.5 使用SQL语句查询房屋信息 299
视频教学：5分钟 300
### 9.5.1 基础知识——使用SQL语句查询 300
语法：

    ModeName.find_by_sql(["select * from tablename where field=><?", 'value'])

### 9.5.2 实例描述 300
### 9.5.3 实例应用 301
### 9.5.4 运行结果 302
### 9.5.5 实例分析 302
## 9.6 使用ActiveRecord统计房屋信息 303
视频教学：7分钟 303
### 9.6.1 基础知识——统计记录行数 303
#### 9.6.1.1 `count`方法
用法：
统计所有记录数：`Class.count`
通过条件或连接统计记录个数：
统计满足某些条件的记录个数：`Class.count(optin1 => value, ...)`

其中option主要有：
:conditions -- 用于指定统计时的条件。例如：`House.count(:conditions=>"location='金水区'")`
:joins ------- 用于查询时指定数据表连接
:include ----- 列出当使用左外键链接时需要加载的指定关联 【kinder:unknow: ？？】
:order ------- 确定排序的SQL语句片段，这个选项只和group配合使用。
:group ------- 对应SQL语句中的group by子句
:select ------ 对应SQL语句中的select语句
distinct ----- 如果该选项为true，计数时只计算不相同的记录行数目

#### 9.6.1.2 `count_by_sql`方法
举例：

    @number=House.count_by_sql("select count(*) from houses where location='金水区‘“）

### 9.6.2 实例描述 304
### 9.6.3 实例应用 304
### 9.6.4 运行结果 305
### 9.6.5 实例分析 305
## 9.7 使用ActiveRecord记录日志信息 305
视频教学：10分钟 305
### 9.7.1 基础知识——new方法和save方法 305
#### 9.7.1.1 使用无参的new方法

    @house = House.new
    @house.price = 45
    @house.acreage =65
    @house.housing_type = "两室一厅"
    @house.subdistrict = "天下绿城"
    @house.location = "金水区"
    @house.save

#### 9.7.1.2 使用new方法的代码块

    House.new do |@house|
        @house.price = 45
        @house.acreage =65
        @house.housing_type = "两室一厅"
        @house.subdistrict = "天下绿城"
        @house.location = "金水区"
    end
    @house.save

#### 9.7.1.3 使用Hash对象作new方法的参数
第一种方式：

    @house = House.new(
        .price => 45
        .acreage => 65
        .housing_type => "两室一厅"
        .subdistrict => "天下绿城"
        .location => "金水区"
    )
    @house.save

第二种方式：

    house = Hash.new
    house[:price] = 45
    house[:acreage] =65
    house[:housing_type] = "两室一厅"
    house[:subdistrict] = "天下绿城"
    house[:location] = "金水区"
    @house = House.new(house)
    @house.save

### 9.7.2 基础知识——create方法 308
#### 9.7.2.1 使用creat方法的代码块

    House.create do |@house|
        house.price = 45
        house.acreage =65
        house.housing_type = "两室一厅"
        house.subdistrict = "天下绿城"
        house.location = "金水区"
    end

#### 9.7.2.2 使用creat方法的Hash代码块

    House.create(
        :price => 45
        :acreage => 65
        :housing_type => "两室一厅"
        :subdistrict => "天下绿城"
        :location => "金水区"
    )

如果是插入多行：

    House.create([{
        :price => 45
        :acreage => 65
        :housing_type => "两室一厅"
        :subdistrict => "天下绿城"
        :location => "金水区"
    },{
        :price => 45
        :acreage => 65
        :housing_type => "两室一厅"
        :subdistrict => "天下绿城"
        :location => "金水区"
    }])

### 9.7.3 实例描述 309
### 9.7.4 实例应用 310
### 9.7.5 运行结果 311
### 9.7.6 实例分析 311
## 9.8 更新站点友情链接信息 312
视频教学：10分钟 312
### 9.8.1 基础知识——更新数据库 312
前面ActiveRecord实现对数据库表的查询和添加功能。但一般来说，数据保存到数据库都是需要后期维护的，因此少不了对数据表中内容的修改操作
需要注意的是，使用ActiveRecord提供的任何执行更新操作的方法，都不可以修改主键列id的值
#### 9.8.1.1 save方法

    def index 
      @log = Log.find(1)
      @log.log = "某个访客" + @log.log
      @log.save
      ...
    end

#### 9.8.1.2 `update_attribute`方法
这个方法还可以更新一个指定的数据字段的值。
但一次只能修改某一个实体属性的值，而save可以修改出了主键的所有字段

    def index
      log = Log.find(1)
      log.update_atrribute(:log, "数据库进行了一次修改")
      @logs = Log.all
      ...
    end

#### 9.8.1.3 `update_attributes`方法
这个方法接收一个Hash对象来同时修改数据对象中多个属性。
注意：在ActiveRecord3中，如果要对日期时间类型数据进行操作，需要在项目配置文件中添加本地的时区设置，否则系统在进行数据库存取的时候：时间不匹配。例如在/config/environment/development.rb文件中添加：`config.time_zone = Beijing`

    def index
      log = Log.find(1)
      log.update_attributes([:log => "数据库进行了第二次修改", :time => Time.new])
      @logs = Log.all
      ...
    end

#### 9.8.1.4 update方法
用来更新一行或者多行记录。
使用这个方法，需要传入主键id属性指定记录。更新多条数据的时候，id数组和Hash对象数组的项要按顺序一一对应，都则可能出错。

    #更新一行
    def index
      Log.update(1,{:record_time => Time.now, :log => "第三次修改"})
      @log = Log.all
      ...
    end
    #更新多行
    def index
      Log.update(
        [2, 1],
        [{:record_time => Time.now, :log => "第四次修改"}]
        [{:record_time => Time.now, :log => "第一次修改"}]
      ）
      @log = Log.all
      ...
    end

#### 9.8.1.5 `update_all`方法
更新数据库表中的所有记录，当然也可以修改符合指定条件的记录
这个方法可以接收两个参数：第一个参数是执行更新操作的设置选项，相对于update语句中的set子句；第二个参数可选，是执行条件查询的设置选项，相对于update语句中的where子句。
执行完毕，如果成功返回响应行数。

    def index
      Log.update_all(" log = '被恶意破坏了的日志信息' ", " id < 10000 ")
      @logs = Log.all
      ...
    end

### 9.8.2 实例描述 316
### 9.8.3 实例应用 316
### 9.8.4 运行结果 318
### 9.8.5 实例分析 319
## 9.9 删除过期的药品信息 319
视频教学：8分钟 319
### 9.9.1 基础知识——删除数据 320
#### 9.9.1.1 delete方法
语法：

    ModeClass.delete(id1, id2, ..., idn) 

#### 9.9.1.2 `delete_all`方法
如果没有指定参数，这个方法将删除数据库表中的所有记录。
语法：

    ModeClass.delete_all("condition")
    例如：
    Log.delete_all("id>1200")

#### 9.9.1.3 destroy方法
作为类方法使用的时候，destroy方法的用法和功能上与delete类似，可以接收一个id或一个id集合来删除指定数据记录。
作为实例方法使用的时候，将删除当前实例对象对应的数据记录。

虽然destroy方法和delete方法在用法和功能上十分类似，但实现方式却大不相同。
delete方法只是简单根据传入的参数生成相应的删除语句，并没有执行其他多余的操作。
destroy方法需要使用ActiveRecord的回调机制和验证函数进行一个额外的操作，删除数据时需要确保数据对象与数据库的值一直，并且不破坏实例类中的业务逻辑。这些额外操作脏中浪费一点性能。
通常情况下建议使用destroy方法删除数据。

举例：

    Log.destroy(131058)
    Log.destroy([131058, 131059, 131060])
    @log = Log.find(131061)
    @log.destroy

#### 9.9.1.4 `destroy_all`方法
如果没有指定参数，这个方法将删除数据库表中的所有记录。
同样对每一个删除记录进行了回调和校验。
语法：

    ModeClass.destroy_all("condition")
    例如：
    Log.destroy_all("id>1200")

### 9.9.2 实例描述 322
### 9.9.3 实例应用 322
### 9.9.4 运行结果 324
### 9.9.5 实例分析 324
## 9.10 常见问题解答 324
### 9.10.1 开发过程中需求变动，能否更换数据库问题 324
ActiveRecord和其他ORM框架一样，已经把数据库做了最高层次的封装。

1. 修改数据库配置文件database.yml。包括`adapter: mysql2、username: root、password: 、host: `等等
2. 建立数据库相应的表格

### 9.10.2 向数据库保存bit类型数据报错 325
在ruby中，一些数据库支持boolean类型，另一些则不支持，这使得ActiveRecord要抽象boolean类型变得困难。
如果数据库不支持boolean类型，有的使用char(1)来替代，内容使用t和f来表示true和false；有的使用integer类型，0是false、1是true。
即使数据库支持boolean类型，内部也许还是使用0和1来存储。

ruby的条件判断中，数字0和1都被认为true。所以当你在查询条件中使用属性时，必须在列名后添加一个问号。例如：

    user = Users.find(1)
    if user.isShow?
    end

## 9.11 习题 326

---
# 第10章 高级数据持久层技术 327
## 10.1 学生餐卡管理系统中的一对一关联 328
视频教学：11分钟 328
### 10.1.1 基础知识——一对一关联 328
#### 10.1.1.1 数据库中的一对一关联
一个表中的记录在另一个表中最多有一条与之对应的关联数据。同样，另一个表也是如此。
例如有下面两个表：
用户表users（id name）                            主表
VIP会员表vips（`id intergral(积分) user_id`）     外表

【kinder:note: 下面解释什么是外键，来自百度百科】
简介　　外键（Foreign Key）
　　如果公共关键字在一个关系中是主关键字，那么这个公共关键字被称为另一个关系的外键。由此可见，外键表示了两个关系之间的联系。以另一个关系的外键作主关键字的表被称为主表，具有此外键的表被称为主表的从表。外键又称作外关键字。换而言之，如果关系模式R中的某属性集不是R的主键，而是另一个关系R1的主键则该属性集是关系模式R的外键，通常在数据库设计中缩写为FK。
外键的作用　　保持数据一致性，完整性，主要目的是控制存储在外键表中的数据。 使两张表形成关联，外键只能引用外表中的列的值或使用空值

#### 10.1.1.2 一对一关联的实现
由一个数据库的外键引用另一个数据库表的主键。也就是一个数据表中的一行记录严格关联到另一个数据库表的至多一行记录。
在模型类中使用`has_one`方法和`belongs_to`方法，可以实现数据库表中的一对一关联，还可以为方法添加一些选项，进行一些配置。
举例：
app/models/user.rb

    class User < ActiveRecord::Base
      has_one(:vip, :class_name => "Vip", :foreign_key => "user_id")    # 括号中的:vip表示vips表中的一个元素
    end

app/models/vip.rb

    class Vip < ActiveRecord::Base
      belongs_to(:user, :class_name => "User", :foreign_key => "user_id")  #【kinder:note:这个外键应该理解主表的外键】
    end

再修改index.html.erb代码：

    <table>
    	<tr>
    		<th>编号</th>
    		<th>姓名</th>
    		<th>是否会员</th>
    		<th>会员编号</th>
    		<th>会员积分</th>
    	</tr>
            <% @users.each do |user| %>
    	<tr>
    		<th><%= user.id %></th>
    		<th><%= user.name %></th>
    		<th><%= user.vip == nil ? "否" : "是" %></th>
    		<th><%= user.vip.id if user.vip != nil %></th>
    		<th><%= user.vip.integral if user.vip != nil %></th>
    	</tr>
            <% end %>
    </table>

**`has_one`**
主表，指定关联。
可以接收一个符号变量作为第一个参数，用于指定生成的动态方法的方法名。语法：

    has_one(:attr_name [, options])

选项：
`:class_name` --- 指定关联的类名。
`:conditions` --- 指定关联匹配的条件。对应SQL语句中的where子句。
`:order` -------- 指定查找关联对象是的排序。对应SQL语句中的order by子句。
`:dependent` ---- 指定关联对象是否级联删除。设置为:destroy或者true，启用级联删除；设置为nullify关闭级联删除，对应的记录的外键将被更新为null
`:foreign_key` -- 指定关联的外键。如果外键列的列名没有遵循ActiveRecord的约定 【kinder:unknow: 什么约定？？】，可以使用该选项来指定外键列的列名。外键列的命名规则：主键表名的单数形式加上后缀`_id`
`:primaty_key` -- 返回关联对象的主键。默认值是id，如果有特殊需要使用其他主键，可以指定该选项。
`:include` ------ 对象查找它的关联对象时，如果需要让当前数据库表与另一个数据库表进行左外连接，就需要用这个选项优化数据查询。
`:as` ----------- 指定多个接口
`:select` ------- 设置执行SQL语句的查询子句。默认情况下，使用`select * from`，也可以在这里通过:select选项改变
`:through` ------ 指定一个连接，使用该模型进行查询。【kinder:unknow: ？？】
`:readonly` ----- 设置关联对象的只读模式。true为只读
`:validate` ----- 设置关联对象的验证模式。false为不校验关联对象
`:autosave` ----- 设置关联对象是否启动自动保存。true表示自动保存相关对象。

使用`has_one`方法以后，系统会自动创建一些动态方法，使我们更加方便操作对应的关联对象。
就上面例子而言，主要有：
- vip ---------------------------- 返回关联的子对象，如果没有对应的数据记录，返回nil。
- vip= --------------------------- 为关联对象对应的外键赋值，并保存关联对象。
- `build_vip(attributes = {})` --- 创建一个关联的子对象（对应外键的属性被赋值），并返回未保存的关联对象。
- `create_vip(attributes = {})` --  创建一个关联的子对象（对应外键的属性被赋值），并返回通过验证后被保存了的新对象。

注意，`build_*`方法仅适用于已经存在了的关联，即直接获取的关联对象不为nil，该方法才可用。

**belongs_to**
从表，声明关联。如果在主表对应的实体类中已经使用`has_one`声明过关联，再使用`belongs_to`就形成双向关联。
一旦使用`belongs_to`方法在从表中声明了数据库表关联，系统就会自动生成相应的动态方法。这些动态方法和`has_one`的动态方法相同，意义也相同。
用法和`has_one`相同，可以接收一个符号变量作为第一个参数，用于指定生成的动态方法的方法名。语法：

    belongs_to(:attr_name [, options])

`has_one`的选项都适用于`belongs_to`
`belongs_to`的其他选项：
- `:counter_cache` -- 用来缓存关联的父对象的数目
- `:polymorphic` ---- 指定该关联是否多态关联 【kinder:unknow: ？？】
- `:touch` ---------- 是否关联删除当前对象。设置为true，则关联对象设置属性时，可以保存或删除当前对象。【kinder:unknow: ？？】
  
### 10.1.2 实例描述 332
### 10.1.3 实例应用 332
### 10.1.4 运行结果 333
### 10.1.5 实例分析 334
## 10.2 分类展示产品信息 334
视频教学：6分钟 334
### 10.2.1 基础知识——一对多关联 334
#### 10.2.1.1 数据库中的关联关系
一个用户有多个登录信息
用户表（User：id username password） <==> 登录信息表（Loginlog: id `login_name` `login_time` `login_ip`等）

#### 10.2.1.2 一对多关联的实现
需要使用`has_many`方法和`belongs_to`方法配合起来声明，从而实现双向的一对多关联。
同样，如果要实现单项的一对多关系，只需要在主键表中使用`has_many`方法声明即可。
【kinder:note: 既然是一对多，一应该是主表，多是从表。】

举例：

    class User < ActiveRecord::Base
      has_many(:login_logs, :class_name => "LoginLog", :foreign_key => "login_name")
    end

使用`has_many`方法声明过以后，系统会自动生成访问与之关联的子对象的方法，生成的这些动态方法如下：

- `login_logs` ---------------------- 查找与主键对象相关的所有外键对象。返回一个包含所有关联的外键对象的数组。
- `login_logs<<(object, ...)` ------- 向外键对象组添加一个或多个对象，并在主键执行保存操作的时候同时保存添加进去的新的外键对象
- `login_logs.delete(object, ...)` -- 从外键对象数组中删除一个或多个对象。并根据`has_many`方法中设置的dependent选项的值确定是否更新外键集合
- `login_logs=` --------------------- 覆盖原来的对象，添加新的对象
- `login_log_ids=` ------------------ 根据外键覆盖原来的对象
- `login_logs.clear` ---------------- 从外键对象集合中删除所有与之相关的外键对象
- `login_logs.empty?` --------------- 验证该集合是否为空
- `login_logs.size` ----------------- 返回外键对象集合中记录的数目
- `login_logs.find` ----------------- 查找一个特定的外键对象
- `login_logs.build` ---------------- 创建一个外键对象，将其与主键对象关联起来，并返回这个未经保存的外键对象
- `login_logs.create` --------------- 创建成额外键对象，将其与主键对象关联起来，然后保存并返回该外键对象

选项：
`has_many`方法包括了`has_one`的选项。另外还有：

- `:finder_sql` --- 通过一个完整的SQL命令来查找关联的对象
- `:counter_sql` -- 通过一个完整的SQL命令来获取关联对象的个数
- `:extend` ------- 为扩展代理而指定一个模块
- `:group` -------- 查询数据并为其分组，相当于SQL语句中的group by子句
- `:having` ------- 对查询的结果集进行过滤，相当于SQL语句中的having子句
- `:limit` -------- 指定获取关联对象时最多获取多少个对象
- `:offset` ------- 指定获取关联对象时从第几个开始获取
- `:uniq` --------- 是否删除重复对象。设置为true则删除集合中重复的对象

### 10.2.2 实例描述 336
分类信息表types（id:int namevarchar(20)） == 产品信息表products （`id:int name:varchar(20) type_id:int price:float model:varchar(20)`）
### 10.2.3 实例应用 336
### 10.2.4 运行结果 338
### 10.2.5 实例分析 338
## 10.3 设计可随意配置的角色权限 338
视频教学：9分钟 339
### 10.3.1 基础知识——多对多关联 339
#### 10.3.1.1 数据库中的关联关系

学生表students (id:int name:varchar(20)) == 社团信息表corporations (id:int name:varchar(20))

通常需要在数据表中引入一个辅助，即连接关系表，专门用来保存实现多对多关联的两个表的映射信息。
创建数据库多对多连接关系表的时候，表名需要由两个表名组成，中间使用下划线间隔。这时rails的命令约定。当然也可以显示指定自定义的表名。
社团学生关系表`corporations_students (id:int student_id:int corporation_id:int)`

注意：这里的关联关系表的设计一定要包含这样两个字段，该表的主键必须是由这两个字段组成的联合主键。否则会产生ActiveRecord::HasAndBelongsToManyAssociationWithPrimaryKeyError异常。

#### 10.3.1.2 多对多关联的实现

在两个关联表对应的模型类中分别调用`has_and_belongs_to_many`方法进行声明。
这个方法和`has_one``has_many`方法用法相似，也可以自动创建一系列的方法来供关联对象使用。
此外，这个方法还生成了一个新的方法：`push_with_attributes`方法；表示连接表记录中的附加列。该方法语法如下：

    push_with_attributes(object, join_attributes)

选项也包含了`has_one``has_many`的选项，另有一些：
- `:join_table` --------------- 用于指定自定义的连接表名
- `:association_foreign_key` -- 指定连接表中的外键列名
- `Uniq` ---------------------- 是否只查询没有重复的关联对象
- `:delete_sql` --------------- 通过一个SQL语句手动删除关联类之间的连接
- `:insert_sql` --------------- 通过一个SQL语句为关联类手动的增加连接

举例：

    class Student < ActiveRecord::Base
      has_and_belongs_to_many :corporations
    end
    
    class Corporation < ActiveRecord::Base
      has_and_belongs_to_many :students
    end
    class CorporaitonsStudent < ActiveRecord::Base
    end

### 10.3.2 实例描述 341
设计可随意配置的角色权限
保存角色信息：roles (id:int name:varchar(20))
保存功能信息：functions (id:int name:varchar(10) number:varchar(10))
保存关联关系：`functions_roles(role_id:int function_id:int)`
### 10.3.3 实例应用 342
### 10.3.4 运行结果 344
### 10.3.5 实例分析 344
## 10.4 无限级分类的菜单 345
视频教学：5分钟 345
### 10.4.1 基础知识——自关联 345
例如电脑中的文件夹，文件夹层次的深度没有限制。
`folders(id:int name:varchar(50) parent_id:int)`
自关联关系和一对多关联关系十分相像，只不过一对多关联作用于两个数据库表，而自关联关系作用于一个数据表本身。
实现：在模型类中声明自关联:

    class Folder < ActiveRecord::Base
      belongs_to(:parents,
                 :class_name=>"Folder",
                 :foreign_key=>"parent_id")
      has_many(:childs,
               :class_name=>"Folder",
               :foreign_key=>"parent_id")
    end

声明过以后，可以在程序中使用Folder类实例的childs方法来获得当前对象下属的所有子级对象，或者使用parent方法获取当前对象的父对象。

### 10.4.2 实例描述 346
menus`(id:int name:varchar(50) url:varchar(50) parent_id:int)`
### 10.4.3 实例应用 346
### 10.4.4 运行结果 347
### 10.4.5 实例分析 348
## 10.5 使用ActiveRecord重构银行转账的事务 348
视频教学：6分钟 348
### 10.5.1 基础知识——事务处理 348
事务--数据库中为了确保数据完整性而设立的一种机制。
例如银行转账业务的功能，需要保证转入和转出的变动同时执行，或者一起不执行。

ActiveRecord::Base提供了一个名为transaction的类方法来执行事务的处理。所以可以在控制器相应的动作中直接使用该类的transaction方法来创建一个事务。语法：

    ModelClass.transaction do
      ...
    end

注意：使用MySQL数据库创建数据库表的时候，需要选择支持事务的相应数据库引擎才能支持事务，即设置属性type=InnoDB；幸运的是，这刚好是默认设置。

在执行操作的时候，如果遇到异常，系统将抛出一个异常信息，则事务将自动回滚；如果所有语句都正常执行，则事务将自动全部提交，从而完成对数据库的增删改等操作。

为了处理一些比如跨表或跨数据库的事务操作等特殊情况，这个方法还可以实现嵌套调用的方法进行事务处理。
但通常情况下，**不**建议使用**跨数据库**的事务处理，因为这超出了ActiveRecord的处理范围。系统不能给出完美的解决方案来进行该类操作。
格式举例如下：

    Bank.transaction do 
      ...
      Card.transaction do
        ...
      end
    end

### 10.5.2 实例描述 349
### 10.5.3 实例应用 350
### 10.5.4 运行结果 351
### 10.5.5 实例分析 352
## 10.6 验证用户注册信息 352
视频教学：7分钟 352
### 10.6.1 基础知识——自定义数据校验 352
ActiveRecord::Base类提供了`validate`方法、`validate_on_create`方法和`validate_on_update`方法，将在模型类执行向数据库表保存数据的时候进行数据验证。
可以通过重写这三个方法，并在这三个方法中编写相应的数据验证代码来保证保存对象的数据完整性。

- `validate`方法 ------------ 在所有向数据库执行保存数据的操作时，进行数据校验。
- `validate_on_ceate`方法 --- 在所有向数据库中创建一条记录时，对要保存的数据对象进行验证。
- `validate_on_update`方法 -- 在所有向数据库中更新一条记录时，对要保存的数据对象进行验证。

重写这三个方法之后，可以在着三个方法中编写具体的校验代码：如果检查到相应的属性值不合法，可以向一个Error类的对象errors中保存一个错误信息。如果没有errros中保存错误信息，则默认数据合法，执行保存操作。

    class User < ActiveRecord::Base
      def validate
        if username.blank?
          errrors.add(:username, "用户名不能为空!")
          # errors.add_to_base("用户名不能为空！")  # 直接将错误信息添加到模型类中。
        end
      end
    end

### 10.6.2 实例描述 353
### 10.6.3 实例应用 354
### 10.6.4 运行结果 355
### 10.6.5 实例分析 356
## 10.7 使用模型校验器验证登录信息 356
视频教学：19分钟 356
上一节的自定义数据校验方法使用起来比较灵活，但当仅仅对数据进行一些简单验证时，则过于笨重。
### 10.7.1 基础知识——模型校验器 357
ActiveRecord中的模型校验器都是一些以`validate_`开头的类方法。特点如下：

- 接收可选的属性名称作为参数，用于指定该规则验证的具体属性
- 接收:message选项，用于指定错误提示信息
- 接收:on选项，用于指定出发这个校验的事件。默认是:save，还可以是:create或者:update
- 接收:if选项，用于接收一个方法、过程对象或字符串，它们决定什么时候调用该模型检验方法。

#### 10.7.1.1 非空校验`validates_presence_of`

    validates_presence_of (:attributes1, :attribute2, ...,:messsage => "...")

可以指定多个属性名称，但只能指定一个错误信息。如果指定多个错误信息，最后一个信息将覆盖前面的所有信息。

#### 10.7.1.2 唯一校验`validates_uniqueness_of`

    validates_uniqueness_of(:attributes_list, :options_list)

注意这个校验不接收:on选项，但接收:message和:if选项。其他选项还有：
- `:message`
- `:on`
- `:scope` ----------- 表示验证基于多个参数的唯一属性值 
- `:case_sensitive` -- 指定在执行唯一性验证的时候，是否区分大小写。默认区分大小写
- `:allow_nil` ------- 是否运行nil值，默认false
- `:allow_blank` ----- 是否允许空值。true则跳过属性为空的校验。【kinder:note:跳过该是通过的，不阻拦的意思】

#### 10.7.1.3 验证数据长度`validates_length_of`(别名：`validates_size_of`)
选项:

- `:message`
- `:on`
- `:minimum` ------- 定义最小长度
- `:maximum` ------- 定义最大长度
- `:is` ------------ 定义精确长度
- `:within` -------- 定义长度的有效范围
- `:allow_nil` ----- 是否允许为nil。如true跳过校验
- `:too_long` ------ 属性值太长时的错误提示信息
- `:too_short` ----- 属性值太短时的错误提示信息
- `:wrong_length` -- 属性值不匹配时的错误提示信息

#### 10.7.1.4 数值校验`validates_numericality_of`
选项:

- `:message`
- `:on`
- `:only_interger` ------------- 是否必须为整形数值
- `:greater_than` -------------- 值必须大于该选项指定的值
- `:greater_than_or_equal_to` -- 值必须大于或等于该选项指定的值
- `:equal_to` ------------------ 值必须等于该选项指定的值
- `:less_than` ----------------- 值必须小于该选项指定的值
- `:less_than_or_equal_to` ----- 值必须小于或等于该选项指定的值
- `:odd` ----------------------- 值必须是奇数
- `:even` ---------------------- 值必须是偶数

#### 10.7.1.5 数值格式校验`validates_format_of`
选项:

- `:message`
- `:on`
- `:if`
- `:allow_nil`
- `:allow_blank`
- `:with` -------------- 接收一个正则表达式，和属性的值进行匹配校验

#### 10.7.1.6 确认校验`validates_confirmation_of`
校验用户两次输入的值是否相同，一般用在输入复杂又非常重要的数据上面。

    validates_confirmation_of(:attributes_list, :message => "您两次的输入不一致，请您重新输入")

例如：

    validates_confirmation_of(:name, :message => "您两次的输入不一致！")

然后，还需要在视图表单中使用一个虚拟的对象属性`name_confirmation`，并添加一个确定输入的项。例如：

    <tr><td>姓名：</td><td>
      <div class="field"><%= f.text_field :name %><br>请填写您的真实姓名</div>
    </td></tr>
    <tr><td>确认姓名：</td><td>
      <div class="field"><%= f.text_field :name_confirmation %></div>
    </td></tr>

这个虚拟的对象属性的命名规则是`属性名_confirmation`，否则报错。

#### 10.7.1.7 复选框选择校验`validates_acceptance_of`
校验复选框是否被选中。
选项有：

- `:message`
- `:on`
- `:if`
- `:accept` -- 指定当复选框被选中时属性具有的值，默认为1。

#### 10.7.1.8 关联对象校验`validates_associated`
校验数据对象是否为关联对象

#### 10.7.1.9 遍历多个属性校验`validates_each`
通过接收一个代码块来遍历指定的多个属性，然后一一进行验证。

#### 10.7.1.10 枚举校验`validates_exclusion_of`
校验指定的属性的值是否不在一个枚举对象中。

#### 10.7.1.11 枚举校验`validates_inclusion_of`
和上个方法相反。校验指定的属性的值是否在一个枚举对象中。

### 10.7.1-1 新的模型校验器
因为上面的知识漏了一个重大知识，造成了极大的缺陷。现在根据`guides.rubyonrails.org/active_record_validations_callbacks.html`补录如下：
Active Record 校验与回调

本章节将指导你如何将代码逻辑和 Active Record 的生命周期相关联。你将学习如何在数据保存到数据库前对其进行校验，以及如何在 Active Record 对象生命周期的特定时刻进行定制化操作。

阅读完本章节并理解相关概念后，希望你能够：

    理解 Active Record 对象的生命周期
    使用 Active Record 内建的校验(Validation)helpers
    定制自己的校验方法
    获取和使用校验产生的错误信息
    创建回调(Callback)方法来响应 Active Record 对象生命周期中的事件
    创建特殊的类用来封装回调的共同行为
    创建观察者(Observers)来在模型类外响应生命周期中的事件

#### 1 对象的生命周期

Rails 应用中常用的操作包括对象的创建，更新和销毁。Active Record 提供了方法让你关联到这些对象生命周期，让你可以更好地控制应用和数据。

校验让你确保只有有效数据被储存到数据库中去。回调和观察者允许你在对象状态发生变化前后来触发特定代码逻辑。

#### 2 校验的概述
在你接触到 Rails 中验证的过多细节之前，应该在整体上对验证有个了解。
##### 2.1 为什么需要校验？
有很多方法用来在数据存入数据库之前进行校验，包括数据库约束，客户端校验，控制器级别的校验以及模型级别的校验。

    数据库约束和/或存储过程的验证机制依赖于特定的数据库， 这导致测试和维护比较困难。但是，如果你的数据库需要提供给第三方应用，那么必要的数据库约束将是很好的策略。另外，数据库级别验证能够安全地处理一些其 他验证方法很难实现的情况(如在重负荷数据表中的唯一性约束)。
    客户段校验很有用，但是如果单独使用，通常来讲不是很可靠。如果是通过 JavaScript 来实现的校验，当用户在浏览器中关闭 Javascript，校验就很容易被绕过。虽然如此，但如果在你的网站中结合其他的校验技术共同使用的话，客户端校验将会非常方便，因为它可以立刻给用 户反馈校验结果。
    控制器级别的校验用起来很方便直观，但是通常会使控制器变得笨重以至于难以测试和维护。所以无论何时， keep your controllers skinny 都将是个好主意，他将让你的应用适合长期运行和维护。
    模型级别的校验最适合用来在保存到数据库前来验证数据的有效性。它不依赖于特定数据库，也不能被客户端绕过，并且方便测试和维护。而且 Rails 让校验变的很容易，因为它提供了内建helpers供常用的校验使用，并同时允许你创建自己的校验方法。

##### 2.2 校验发生在什么时候？

Active Record 对象有两种：一种表示已经存入到数据库表中的一行，另一种则还没有存入到数据库。当你新创建一个对象时，如使用 new 方法，这时这个对象还不属于数据库。一旦你在这个对象上调用 save 方法，它将被保存到指定的数据库表中。Active Record 使用 `new_record?` 这个实例方法来判断对象是否已经存入数据库。考虑下面这个简单的 Active Record 类：

    class Person < ActiveRecord::Base
    end

我们可一通过 rails console 的输出来查看它是如何工作的：

    >> p = Person.new(:name => "John Doe")
    => #<Person id: nil, name: "John Doe", created_at: nil, :updated_at: nil>
    >> p.new_record?
    => true
    >> p.save
    => true
    >> p.new_record?
    => false

创建和保存一个新对象将会在数据库中执行 SQL INSERT 命令。而更新一个已经存在的记录将会在数据库中执行 SQL UPDATE 命令。校验通常在这些 SQL 命令执行前运行。如过有任何的校验失败，对象将被标记为无效，这样 Active Record 将不会执行 INSERT 或者 UPDATE 操作。这将帮助我们避免将无效数据保存到数据库中。你也可以选择在创建，保存或者更新时执行特定的校验。

Rails 中有很多方法可以修改已经保存到数据库中的对象。其中一些方法会触发校验，另一些方法并不会。这意味着如果我们不注意，仍然有可能将一个无效的对象保存到数据库中去的。

下列方法将会触发校验，并仅当对象通过校验后才会保存到数据库中：

    create
    create!
    save
    save!
    update
    update_attributes
    update_attributes!

带有感叹号的方法(如 save!)将会在对象未通过校验时抛出异常。不带感叹号的则不会：如 save 和 update 将会返回 false，而 create 和 update 将仅仅返回对象。
##### 2.3 跳过校验

下列方法将跳过校验，无论对象是否有效，都将把对象保存到数据库中去。所以必须谨慎使用：

    decrement!
    decrement_counter
    increment!
    increment_counter
    toggle!
    touch
    update_all
    update_attribute
    update_column
    update_counters

需要注意的是，当将 :validate => false 作为参数传递给save方法时，save 也可以略过校验。但也请谨慎使用这个技巧。

    save(:validate => false)

##### 2.4 valid? 和 invalid?

Rails 内部使用 valid? 方法用来验证对象是否有效。你也可以直接使用此方法。valid? 会触发所有的校验，当没有检查到任何错误时返回 true，否则返回 false。

    class Person < ActiveRecord::Base
      validates :name, :presence => true
    end
     
    Person.create(:name => "John Doe").valid? # => true
    Person.create(:name => nil).valid? # => false


执行完校验后，所有检查到的错误可以通过调用 errors 方法获取到，它会返回所有错误的集合。因此，如果一个对象在运行完校验后这个错误集合为空，我们就可以认为这个对象是有效的。

需要注意的是通过 new 来实例化一个对象不会报告任何错误，即使这个对象从技术上来讲确实是无效的。因为调用 new 方法并不会运行校验。

    class Person < ActiveRecord::Base
      validates :name, :presence => true
    end
     
    >> p = Person.new
    => #<Person id: nil, name: nil>
    >> p.errors
    => {}
     
    >> p.valid?
    => false
    >> p.errors
    => {:name=>["can't be blank"]}
     
    >> p = Person.create
    => #<Person id: nil, name: nil>
    >> p.errors
    => {:name=>["can't be blank"]}
     
    >> p.save
    => false
     
    >> p.save!
    => ActiveRecord::RecordInvalid: Validation failed: Name can't be blank
     
    >> Person.create!
    => ActiveRecord::RecordInvalid: Validation failed: Name can't be blank
    

invalid? 仅仅是 valid? 的反意词。invlaid? 会触发校验，当检查到任何错误时返回 true，否则返回 false。
##### 2.5 errors[]

为了验证对象特定的属性是否有效，你可以使用 errors[:attribute]。它将返回属性 :attribute 的所有错误。如果这个属性没有任何错误，将返回一个空数组。

这个方法只能在校验_执行后_使用，因为他只是检查并返回错误集合中的值，并不会触发校验。这不同与前面介绍的 ActiveRecord::Baseinvalid? 方法，因为他不会验证对象作为一个整体时的有效性。它只是检查对于对象特定的属性是否已经检查到错误。

    class Person < ActiveRecord::Base
      validates :name, :presence => true
    end
     
    >> Person.new.errors[:name].any? # => false
    >> Person.create.errors[:name].any? # => true


在 Working with Validation Errors 节(【kinder:note: 下面第八节】)中，我们将对校验的验错误信息讨论地更深入一些。但现在，先让我们来看看 Rails 内建的校验 helpers。

#### 3 Validation Helpers 验证的辅助方法

Active Record 提供了很多预定义好的校验 helper，你可以直接拿来使用到你的类声明中。这些 helper 方法提供了很多常用的校验规则。而一旦有校验失败，一个和被校验属性关联的错误信息会被添加到对象的 errors 集合中。

每个 helper 可接受的属性名称数目不限，这意味着我们可以通过一行代码为多个属性添加同一类型的校验。

所有的 helper 方法都可以指定 :on 和 :message 选项，分别用来指定校验何时执行以及当校验失败时，何种错误信息应该被添加到 errors 集合中。:on 的值必须为以下之一：:save(默认值)，:create，：update。而每个校验 helper 也有默认的错误信息，用在当 :message 没有指定时。现在让我们分别来看看 Rails 提供的校验 helper。

##### 3.1 acceptance 【受选】

该校验用来验证当表单提交时，用户界面上的 checkbox 已经被选择。比较典型的使用场景是在 用户使用你的应用前，需要确定其已经阅读过并接受你的服务条款，或者其他相似的情况下。 对于 web 应用，这个被接受的状态其实并不一定需要保存到数据库中(如果我们没有在数据库表中建立这个字段，该 helper 将为它创建一个虚拟属性)。

    class Person < ActiveRecord::Base
      validates :terms_of_service, :acceptance => true
    end

该校验的默认错误信息是 “must be accepted”。

该校验可以通过指定 :accept 选项来指定需要被接受选项的值，默认为"1"。

    class Person < ActiveRecord::Base
      validates :terms_of_service, :acceptance => { :accept => 'yes' }
    end

##### 3.2 `validates_associated` 【关联】

当你的模型和其它的模型有关联，并且关联的模型也需要校验时，应该使用该校验 helper。当你试图保存 Active Record 对象时，它会在所有关联的对象上执行 valid? 方法

    class Library < ActiveRecord::Base
      has_many :books
      validates_associated :books
    end

该校验可以在所有的关联类型下执行。

不要在关联的两端同时使用 `validates_associated` 校验。这会导致相互调用而陷入死循环。

该校验的默认错误信息为 “is invalid”。需要注意的是每个关联对象都含有其各自的 errors 集合；errors 集合并不会被绑定到执行此校验的对象上。

##### 3.3 confirmation  【确认】

当你有两个文本框，并且需确认他们的内容相同时，可以使用该校验 helper。例如，你需要确认用户输入的电子邮件地址或者密码。该校验方法会创建一个虚拟属性，名称为被确认字段名称后加 `_confirmation`。

    class Person < ActiveRecord::Base
      validates :email, :confirmation => true
    end
    
在视图模板中使用如下

    <%= text_field :person, :email %>
    <%= text_field :person, :email_confirmation %>

该校验只有当 `email_confirmation` 不为 nil 的时候才执行。所以为了确保该校验被执行，我们需要为 `email_confirmation` 添加 presence 校验(稍后我们会介绍 presence 校验)。

    class Person < ActiveRecord::Base
      validates :email, :confirmation => true
      validates :email_confirmation, :presence => true
    end

该校验的默认错误信息为 “doesn’t match confirmation”。

##### 3.4 exclusion 【排除】

该校验 helper 用来验证属性的值没有包含在给定的集合中。用来校验的集合可以是任意实现了 enumerable 接口的对象。

    class Account < ActiveRecord::Base
      validates :subdomain, :exclusion => { :in => %w(www us ca jp),
        :message => "Subdomain %{value} is reserved." }
    end

exclusin 校验通过 :in 选项来指定一个集合，用来验证属性的取值不包含在该集合中。你也可以使用 :in 选项的别名 :within。上面的例子使用 :message 选项来演示了你可以在错误信息中引用属性的值。

该校验的默认错误信息为 “is reserved”。

##### 3.5 format 【格式】

该校验用来验证该属性值是否匹配通过 :with 选项指定的正则表达式。

    class Product < ActiveRecord::Base
      validates :legacy_code, :format => { :with => /\A[a-zA-Z]+\z/,
        :message => "Only letters allowed" }
    end

该校验的默认错误信息为 “is invalid”。

##### 3.6 inclusion 【包含】

该校验用来验证属性的值是否包含在给定的集合中。该集合可以是任何实现了enumerable 接口的对象。

    class Coffee < ActiveRecord::Base
      validates :size, :inclusion => { :in => %w(small medium large),
        :message => "%{value} is not a valid size" }
    end

inclusion 校验通过 :in 选项来指定一个集合，用来验证属性的取值不包含在该集合中。你也可以使用 :in 选项的别名 :within。上面的例子使用:message选项来演示了你可以在错误信息中引用属性的值。

该校验的默认错误信息为 “is not included in the list”。

##### 3.7 length 【长度】

该校验用来验证属性值的长度。它提供了多种选项来指定长度的约束条件

    class Person < ActiveRecord::Base
      validates :name, :length => { :minimum => 2 }
      validates :bio, :length => { :maximum => 500 }
      validates :password, :length => { :in => 6..20 }
      validates :registration_number, :length => { :is => 6 }
    end

有以下几种约束选项：

    :minimum – 该属性值的长度不能小于指定的长度。
    :maximum – 该属性值的长度不能大于指定的长度.
    :in (or :within) – 该属性值的长度必须包含在指定的区间中。所以这个选项的值必须是 range 对象.
    :is – 该属性值的长度必须等于指定的长度.

该校验的默认错误信息依赖于所执行的长度校验的类型。你可以通过使用 `:wrong_length`，`:too_long`，和 `:too_short` 选项以及 %{count} 作为所使用的相应长度约束的占位符来自由的订制信息。而且你仍然可以使用 :message 选项来指定错误信息.

    class Person < ActiveRecord::Base
      validates :bio, :length => { :maximum => 1000,
        :too_long => "%{count} characters is the maximum allowed" }
    end

该校验默认通过统计字母个数来计算长度，但是你也可以通过指定 :tokenizer 选项来使用不同的方式分割属性值：

    class Essay < ActiveRecord::Base
      validates :content, :length => {
        :minimum   => 300,
        :maximum   => 400,
        :tokenizer => lambda { |str| str.scan(/\w+/) },
        :too_short => "must have at least %{count} words",
        :too_long  => "must have at most %{count} words"
      }
    end

需要注意的是默认的错误信息为复数形式(如，"is too short (minimum is %{count} characters)")。因此，当 :minimum 为1的时候，你需要指定一个错误信息或者使用 `validates_presence_of` 来替换。当 :in 或 :within 的下限为1时，你也需要指定一个错误信息或者在该 length 校验前添加一个 presence 校验。

size 校验是 length 校验的别名。

##### 3.8 numericality 【数字】

该校验用来检验属性值仅含有数字。默认会匹配整数和浮点数。可以通过设置 `:only_integer` 为 true 来使其只匹配整数。

如果你将 `:only_integer` 设置为 true，将使用如下的正则表达式来验证属性值。
/\A[+-]?\d+\Z/

否则，该校验将会尝试将被校验的值先通过 Float 转换为浮点数。

请注意上面的正则允许以换行符结尾。

    class Player < ActiveRecord::Base
      validates :points, :numericality => true
      validates :games_played, :numericality => { :only_integer => true }
    end

除过 `:only_integer` 外，该校验也接受如下的选项来为被校验值添加额外的约束：

    `:greater_than` – 被校验的属性值必须大于指定的值。该选项的默认错误信息为 “must be greater than %{count}”。
    `:greater_than_or_equal_to` – 被校验的属性值必须大于或等于指定的值。该选项的默认错误信息为 “must be greater than or equal to %{count}”。
    `:equal_to` – 被校验的属性值必须等于指定的值。该选项的默认错误信息为 “must be equal to %{count}”。
    `:less_than` – 被校验的属性值必须小于指定的值。该选项的默认错误信息为 “must be less than %{count}”。
    `:less_than_or_equal_to` – 被校验的属性值必须小于或等于指定的值。该选项的默认错误信息为 “must be less than or equal to %{count}”。
    `:odd` – 设置为 true 时，代表被校验的属性值必须为奇数。该选项的默认错误信息为 “must be odd”。
    `:even` – 设置为 true 时，代表被校验的属性值必须为偶数。该选项的默认错误信息为 “must be even”。

该校验的默认错误信息为 “is not a number”。

##### 3.9 presence 【非空】

该校验用来验证指定的属性不应该为空。其实它使用的是 blank? 方法来判断被校验值是否为 nil 或者是空字符串，即一个字符串为空或者只含有空格。

    class Person < ActiveRecord::Base
      validates :name, :login, :email, :presence => true
    end

如果你想确定对象之间的某一关联是否存在，应该通过检查关联的外键是否存在，而不是检查关联对象是否存在。

    class LineItem < ActiveRecord::Base
      belongs_to :order
      validates :order_id, :presence => true
    end

由于 false.blank? 为 true，所以如果想校验一个 boolean 值是否存在，应该使用 `validates :field_name, :inclusion => { :in => [true, false] }`。
【kinder:note: 最好不用boolean值作为数据库的数据。是否可以考虑使用0或者1来表达？
】
该校验的默认错误信息为"_can’t be empty_"。

##### 3.10 uniqueness 【唯一】

该校验用来检查在对象保存到数据库前，该属性值是否惟一。但是该校验并不会在数据库上创建惟一性约束，所以有可能会出现虽然我们想保持数据的惟一性，但是由于使用了不同的数据连接而插入了两个相同值。所以为了避免这样的情况，你必须为 该列在数据库中建立惟一性索引。

    class Account < ActiveRecord::Base
      validates :email, :uniqueness => true
    end

该校验实际上就是在模型关联的数据表中执行一条SQL语句，使用被校验属性的值进行一次查询。

可以通过 :scope 选项来指定其他的属性来限制惟一性校验：

    class Holiday < ActiveRecord::Base
      validates :name, :uniqueness => { :scope => :year,
        :message => "should happen once per year" }
    end

还可以通过 `:case_sensitive` 选项来指定唯一性约束是否是大小写敏感的，默认为 true。

    class Person < ActiveRecord::Base
      validates :name, :uniqueness => { :case_sensitive => false }
    end

需要注意的是某些数据库在执行查询时总是大小写敏感的。

该校验的默认错误信息为 “has already been taken”。

##### 3.11 `validates_with`  【类校验】

该校验helper会将AR对象传递到单独的类中校验。

    class Person < ActiveRecord::Base
      validates_with GoodnessValidator
    end
     
    class GoodnessValidator < ActiveModel::Validator
      def validate(record)
        if record.first_name == "Evil"
          record.errors[:base] << "This person is evil"
        end
      end
    end

错误信息是被添加到record.errors[:base]中，而不是某一特定的属性。

`validates_with` 可以接受一个类或者一个类的数组用来校验。`validates_with` 没有默认的错误信息，你必须自己在校验中添加适当的错误信息到 Active Record 对象的错误集合中。

声明校验方法时，参数列表中必须有 record 参数，代表被校验的 AR 对象。

何其它的校验一样，`validates_with` 接受 :if, :unless 和 :on 选项。如果你传入除此之外的选项，那么这些选项将作为 options 参数的一部分传递给校验器:

    class Person < ActiveRecord::Base
      validates_with GoodnessValidator, :fields => [:first_name, :last_name]
    end
     
    class GoodnessValidator < ActiveModel::Validator
      def validate(record)
        if options[:fields].any?{|field| record.send(field) == "Evil" }
          record.errors[:base] << "This person is evil"
        end
      end
    end

##### 3.12 `validates_each` 【检验区块】

该 helper 通过 block 来校验指定的属性。它没有预定义好的校验方法。你必须通过 block 来自己创建相应的校验逻辑，每个被传递给 validates_each 的属性都将被依次校验。如下例中，我们需要确保 name 和 surname 不是以小写字母开头的。

    class Person < ActiveRecord::Base
      validates_each :name, :surname do |record, attr, value|
        record.errors.add(attr, 'must start with upper case') if value =~ /\A[a-z]/
      end
    end

该 block 接受 record 对象，属性名称和属性值三个参数。你可以在 block 中实现任何的校验逻辑。如果校验失败，你需要添加错误信息到 Active Record 对象中，将该对象标记为无效的。


#### 4 常用校验选项
##### 4.1 `:allow_nil`

`:allow_nil` 可以在被校验属性值为 nil 的时候跳过校验。

    class Coffee < ActiveRecord::Base
      validates :size, :inclusion => { :in => %w(small medium large),
        :message => "%{value} is not a valid size" }, :allow_nil => true
    end

`:allow_nil` 选项在 presence 校验中将被忽略。

##### 4.2 `:allow_blank`

`:allow_blank` 选项和 `:allow_nil` 选项很相似。当被校验的值为 blank? 时，譬如 nil 或者空字符串，校验将被跳过。

    class Topic < ActiveRecord::Base
      validates :title, :length => { :is => 5 }, :allow_blank => true
    end
     
    Topic.create("title" => "").valid?  # => true
    Topic.create("title" => nil).valid? # => true

`:allow_blank` 选项在 presence 校验中将被忽略。

##### 4.3 :message

如前所见，你可以通过 :message 选项来指定当校验失败时需要添加到 errors 集合中的错误信息。如果没有使用该选项，Active Record 将会使用校验 helper 各自默认的错误信息。

##### 4.4 :on

你可以通过 :on 选项来指定何时进行校验。所有内建的校验 helpers 默认在 Active Record 对象 save 的时候运行校验(无论你是新建一个AR对象还是更新它都会执行校验)。如果你想改变校验时机，你可以使用 :on => :create 来指定仅在新建一个 Active Record 对象的时候进行校验，或者使用 :on => :update 来指定仅在更新一个 Active Record 对象的时候进行校验。

    class Person < ActiveRecord::Base
      # it will be possible to update email with a duplicated value
      validates :email, :uniqueness => true, :on => :create
     
      # it will be possible to create the record with a non-numerical age
      validates :age, :numericality => true, :on => :update
     
      # the default (validates on both create and update)
      validates :name, :presence => true, :on => :save
    end

#### 5 严格校验

你也可以制定校验为严格，这样当 AR 对象校验失败时总会抛出 ActiveModel::StrictValidationFailed 异常。

    class Person < ActiveRecord::Base
      validates :name, :presence => { :strict => true }
    end
     
    Person.new.valid?  => ActiveModel::StrictValidationFailed: Name can't be blank

#### 6 有条件的校验

有时你可能想在只有当满足给定的条件后才对 AR 对象进行校验。这时你可以使用 :if 和 :unless 选项来达到这个目的，他们接受一个符号，字符串，Porc 或者一个 Array。使用 :if 来指定何时*应该*执行校验，使用 unless 来指定何时*不应该*执行校验。
##### 6.1 使用 Symbol 作为 :if 和 :unless 的参数

你可以在 :if 和 :unless 中通过 symbol 来指定一个的方法的名称，这个方法会在校验前执行。这也是最常用的方法。

    class Order < ActiveRecord::Base
      validates :card_number, :presence => true, :if => :paid_with_card?
     
      def paid_with_card?
        payment_type == "card"
      end
    end

##### 6.2 使用 String 作为 :if 和 :unless 的参数

你也可以使用字符串指定一段有效的 Ruby 代码，它将通过 eval 来执行。仅当条件很短的时候建议使用此方式。

    class Person < ActiveRecord::Base
      validates :surname, :presence => true, :if => "name.nil?"
    end

##### 6.3 使用 Proc 作为 :if 和 :unless 的参数

最后，还可以指定一个 Proc 对象。Proc 对象可以让你将条件写在其内部，而不用单独写一个方法。该方式适用于单行代码。

    class Account < ActiveRecord::Base
      validates :password, :confirmation => true,
        :unless => Proc.new { |a| a.password.blank? }
    end

##### 6.4 校验按条件分组

有时多个校验以同一个条件为前提，这时 `with_options` 就派上用场了。

    class User < ActiveRecord::Base
      with_options :if => :is_admin? do |admin|
        admin.validates :password, :length => { :minimum => 10 }
        admin.validates :email, :presence => true
      end
    end

所有在 `with_options` 块中的校验将自动添加条件 `:if => :is_admin?`

##### 6.5 组合校验条件

另一方面，当使用了多个条件来判定是否需要执行校验时，Array 对象就派上用场。此外，你还可一在同一个校验中同时使用 :if 和 :unless 来指定条件。

    class Computer < ActiveRecord::Base
      validates :mouse, :presence => true,
                        :if => ["market.retail?", :desktop?]
                        :unless => Proc.new { |c| c.trackpad.present? }
    end

校验只用在所有的 :if 指定的条件全部评估为 true，并且所有 :unless 指定的条件没有任何一个评估为 true 的时候才能执行。

#### 7 自定义校验

当内建的校验 helpers 不能满足你的需求时，你可以根据自己的需求来编写自己的校验器或者校验方法。

##### 7.1 自定义校验器

自定义校验器其实就是一个继承了 ActiveModel::Validator 的类。该类中必须实现一个 validate 方法，它需要接受一个 AR 对象作为参数并对其进行校验。自定义校验器通过 validates_with 来调用。

    class MyValidator < ActiveModel::Validator
      def validate(record)
        unless record.name.starts_with? 'X'
          record.errors[:name] << 'Need a name starting with X please!'
        end
      end
    end
     
    class Person
      include ActiveModel::Validations
      validates_with MyValidator
    end

给需要校验的单独属性添加自定义校验最便捷的方法是使用 ActiveModel::EachCalidator。这种情况下，自定义校验类必须实现一个 `validate_each` 方法，它接受三个参数：record，attribute 和 value，它们分别代表AR对象实例，被校验的属性和被校验属性的值。

    class EmailValidator < ActiveModel::EachValidator
      def validate_each(record, attribute, value)
        unless value =~ /\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\z/i
          record.errors[attribute] << (options[:message] || "is not an email")
        end
      end
    end
     
    class Person < ActiveRecord::Base
      validates :email, :presence => true, :email => true
    end

如上例所示，你可以将校验 helpers 和自定义校验结合在一起使用。

##### 7.2 自定义校验方法

你也可以通过创建自定义校验方法来验证模型的状态，并且当对象校验失败无效后添加相应的信息到 errors 对象。你必须使用 validate 类方法，通过 symbols 传入校验方法的方法名来注册自定义校验方法。

你可以传入多个自定义校验的方法名，他们将按照注册顺于依次执行校验。

    class Invoice < ActiveRecord::Base
      validate :expiration_date_cannot_be_in_the_past,
        :discount_cannot_be_greater_than_total_value
     
      def expiration_date_cannot_be_in_the_past
        if !expiration_date.blank? and expiration_date < Date.today
          errors.add(:expiration_date, "can't be in the past")
        end
      end
     
      def discount_cannot_be_greater_than_total_value
        if discount > total_value
          errors.add(:discount, "can't be greater than total value")
        end
      end
    end

默认情况下，当你调用 valid? 时，这些校验总会执行。但可以通过 :on 选项指定 :create 或 :update 来控制何时执行校验。

    class Invoice < ActiveRecord::Base
      validate :active_customer, :on => :create
     
      def active_customer
        errors.add(:customer_id, "is not active") unless customer.active?
      end
    end

你可以创建自己的校验 helpers，并且在多个 models 中复用。例如，在一个管理调查问卷的应用，限定某些字段的取值范围到特定的集合中是很必要的：

    ActiveRecord::Base.class_eval do
      def self.validates_as_choice(attr_name, n, options={})
        validates attr_name, :inclusion => { { :in => 1..n }.merge!(options) }
      end
    end

你只需要给 ActiveRecord::Base 类追加定义一个类方法。将这些代码放到 config/initializers 文件夹中。就可以如下使用它了：

    class Movie < ActiveRecord::Base
      validates_as_choice :rating, 5
    end

#### 8 获取和使用校验错误信息

作为前面提到过的 valid? 和 invalid? 的补充，Rails 还提供了一些方法来配合 errors 集合使用以及用来检查对象的有效性。

下面是最常用的一些方法。你也可以通过 ActiveModel::Errors 文档来查看所有有效的方法。
##### 8.1 errors

该方法返回一个 ActiveModel::Errors 实例变量。它包含了该对象校验后的所有错误信息的哈系，以属性为键，以该属性对应错误信息组成的字符串数组为值。

    class Person < ActiveRecord::Base
      validates :name, :presence => true, :length => { :minimum => 3 }
    end
     
    person = Person.new
    person.valid? # => false
    person.errors
     # => {:name => ["can't be blank", "is too short (minimum is 3 characters)"]}
     
    person = Person.new(:name => "John Doe")
    person.valid? # => true
    person.errors # => []

##### 8.2 errors[]

使用 errors[]可以查看特定属性的错误信息。它会返回一个包含了该属性对应的所有错误信息组成的字符串数组，每句是一个条错误信息。如果该属性没有相应的错误信息，将返回一个空数组。

    class Person < ActiveRecord::Base
      validates :name, :presence => true, :length => { :minimum => 3 }
    end
     
    person = Person.new(:name => "John Doe")
    person.valid? # => true
    person.errors[:name] # => []
     
    person = Person.new(:name => "JD")
    person.valid? # => false
    person.errors[:name] # => ["is too short (minimum is 3 characters)"]
     
    person = Person.new
    person.valid? # => false
    person.errors[:name]
     # => ["can't be blank", "is too short (minimum is 3 characters)"]

##### 8.3 errors.add

通过 add 方法可以手动为特定的属性添加错误信息。你可以使用 `errors.full_messages` 或者 `errors.to_a` 方法将错误信息展示在用户的表单上。这些特定的错误信息添加了属性(首字母大写)名称作为前缀。add 方法需要传入属性名称以及错误信息两个参数。

    class Person < ActiveRecord::Base
      def a_method_used_for_validation_purposes
        errors.add(:name, "cannot contain the characters !@#%*()_-+=")
      end
    end
     
    person = Person.create(:name => "!@#")
     
    person.errors[:name]
     # => ["cannot contain the characters !@#%*()_-+="]
     
    person.errors.full_messages
     # => ["Name cannot contain the characters !@#%*()_-+="]
    
也可以使用 []= 达到同样的目的

    class Person < ActiveRecord::Base
        def a_method_used_for_validation_purposes
          errors[:name] = "cannot contain the characters !@#%*()_-+="
        end
      end
     
      person = Person.create(:name => "!@#")
     
      person.errors[:name]
       # => ["cannot contain the characters !@#%*()_-+="]
     
      person.errors.to_a
       # => ["Name cannot contain the characters !@#%*()_-+="]

##### 8.4 errors[:base]

你也可以将添加的错误信息关联到对象自身整体，而不是特定的某一属性。当你想要表示该对象为无效的，而不在乎它的属性值如何时，可以使用该方法。由于 errors[:base] 是一个数组，所以我们只需要将错误信息直接添加进这个数组就可以了，

    class Person < ActiveRecord::Base
      def a_method_used_for_validation_purposes
        errors[:base] << "This person is invalid because ..."
      end
    end

##### 8.5 errors.clear

当你想要清空 errors 集合中的所有错误信息时，可以使用 clear 方法。当然，在一个校验后无效的对象上调用 errors.clear 方法并不能使其变为有效：虽然在调用完该方法后 errors 集合为空，但是下次你再调用 valid? 或者其他试图将该对象保存到数据库的方法时，校验会再执行。而任何校验失败时，错误信息就又会被添加入 errors 集合中。

    class Person < ActiveRecord::Base
      validates :name, :presence => true, :length => { :minimum => 3 }
    end
     
    person = Person.new
    person.valid? # => false
    person.errors[:name]
     # => ["can't be blank", "is too short (minimum is 3 characters)"]
     
    person.errors.clear
    person.errors.empty? # => true
     
    p.save # => false
     
    p.errors[:name]
     # => ["can't be blank", "is too short (minimum is 3 characters)"]

##### 8.6 errors.size

size 方法可以返回被校验对象的错误信息总数。

    class Person < ActiveRecord::Base
      validates :name, :presence => true, :length => { :minimum => 3 }
    end
     
    person = Person.new
    person.valid? # => false
    person.errors.size # => 2
     
    person = Person.new(:name => "Andrea", :email => "andrea@example.com")
    person.valid? # => true
    person.errors.size # => 0

#### 9 在View中展示校验错误信息

DynamicForm 提供了一些 helpers 可以帮助我们在视图的模板中显示错误信息。

你可以通过在 Gemfile 文件中添加下面这行代码来安装该 gem 包：

    gem "dynamic_form"

现在你就可以在试图模板中访问 `error_messages` 和 `error_messages_for` 两个 helper 方法了。

##### 9.1 `error_messages` 和 `error_messages_for`

当使用 `form_for` helper 来创建表单的时候，你可以使用 `error_messages` 方法在表单上显示当前模型实例的所有校验后的错误信息。

    class Product < ActiveRecord::Base
      validates :description, :value, :presence => true
      validates :value, :numericality => true, :allow_nil => true
    end
    <%= form_for(@product) do |f| %>
      <%= f.error_messages %>
      <p>
        <%= f.label :description %><br />
        <%= f.text_field :description %>
      </p>
      <p>
        <%= f.label :value %><br />
        <%= f.text_field :value %>
      </p>
      <p>
        <%= f.submit "Create" %>
      </p>
    <% end %>
    
如果你提交了一个空表单，结果会如下图显示的一样：

    Error messages

产生的 HTML 可能会和上图显示的不太一样，除非你是使用脚手架来生成代码的。参考 Customizing the Error Messages CSS.

你同样可以使用 `error_messages_for` helper 来在视图模板中显示和模型相关的错误信息。如下面所示，我们可以获得和前面例子几乎相同的效果。

    <%= error_messages_for :product %>

显示出的错误信息总是以首字母大写的属性名为前缀，而后才是错误信息本身的内容。

`form.error_messages` 和 `error_messages_for` 方法都可以接受参数以定制用来显示错误信息的 div 元素，改变 header 的文字，改变 header 下的信息，我们甚至可以指定 header 元素使用的 HTML 标签。例如：

    <%= f.error_messages :header_message => "Invalid product!",
      :message => "You'll need to fix the following fields:",
      :header_tag => :h3 %>

结果如下：

    Customized error messages

但是如果你给这些选项中的任意一个传递了 nil，相应片段的整个 div 元素都将不显示。

##### 9.2 定制错误信息的 CSS

用来定制错误信息样式的 CSS 选择器有以下几种：

    .field_with_errors – 表单中错误字段和标签的样式。
    #error_explanation – 包含具体错误信息的 div 元素的样式。
    #error_explanation h2 – 包含具体错误信息的 div 元素的标题样式。
    #error_explanation p – div 元素中标题下面防止具体错误信息段落的样式，位于 div 标题的右下方。
    #error_explanation ul li – 各自错误信息对应的列表元素的样式。

如果使用了脚手架来生成代码，将会自动生成文件 app/assets/stylesheets/scaffolds.css.scss ，用来定义如上图中所示的红色风格的样式。

两种 helper 方法都可以使用 :class 和 :id 选项来设置相应的名称。

##### 9.3 自定义错误信息的 HTML

错误字段的 HTML 是通过 ActionView::Base.field_error_proc 来定义的。这个 Proc 需要如下两个参数：

    一段定义 HTML 标签的字符串。
    一个 ActionView::Helpers::InstanceTag 实例。

下面是一个简单的示例，我们改变了 Rails 默认总是将所有错误的字段信息显示在表单之前的行为。而是将错误信息包装在一个拥有 validation-error CSS 类的 span 元素中。这里 input 元素不会包装在 div 元素中，这样我们就摆脱了文本字段被红色边框围绕的烦恼。你还可以在 CSS 中通过 validation-error 来进一步定义你想要的样式。

    ActionView::Base.field_error_proc = Proc.new do |html_tag, instance|
      errors = Array(instance.error_message).join(',')
      %(#{html_tag}<span class="validation-error">&nbsp;#{errors}</span>).html_safe
    end

结果如下：

    Validation error messages

#### 10 回调简介

回调就是在对象特定的生命周期可以被调用的方法。通过使用回调，我们可以让代码在 Active Record 对象创建，保存，更新，删除，校验或者从数据库载入时被运行。

##### 10.1 回调注册

使用回调前，你必须先要注册他们。你可像平常一样声明一个方法，然后使用 macro-style 类方法注册他们为回调：

    class User < ActiveRecord::Base
      validates :login, :email, :presence => true
     
      before_validation :ensure_login_has_a_value
     
      protected
      def ensure_login_has_a_value
        if login.nil?
          self.login = email unless email.blank?
        end
      end
    end

而 macro-style 类方法也可以接受 block。当 block 中的代码比较少的时候可以考虑使用：

    class User < ActiveRecord::Base
      validates :login, :email, :presence => true
     
      before_create do |user|
        user.name = user.login.capitalize if user.name.blank?
      end
    end

一般认为将回调方法声明为 protected 或者 private 是比较好的实践。因为一旦我们声明为 public 时，该方法就可以直接在模型外调用，而这破坏了对象封装的原则。

#### 11 有效的回调

下面列出了 Acrive Record 中所有的回调，同类型的多个回调其各自的调用顺序如下所示的排列次序：
##### 11.1 创建对象时

    before_validation
    after_validation
    before_save
    around_save
    before_create
    around_create
    after_create
    after_save

##### 11.2 更新对象时

    before_validation
    after_validation
    before_save
    around_save
    before_update
    around_update
    after_update
    after_save

##### 11.3 销毁对象时

    before_destroy
    around_destroy
    after_destroy

`after_save` 在创建和更新对象是都会运行，但总是在 `after_create` 和 `after_update` 之后，而和通过宏注册时的顺序无管。

##### 11.4 `after_initialize` 和 `after_find`

`after_initialize` 在 `Active Record` 对象被实例化时调用，无论是通过 new 来新建一个对象还是从数据库中载入一个对象。这个方法非常有用，因为可以避免你直接重写 Active Record 的 initialize 方法。

`after_find` 在从数据库载入 Active Record 对象时被调用。当 `after_find` 和 `after_initialize` 同时声明时，`after_find` 将首先被调用。

`after_initialize` 和 `after_find` 回调没有与之对用的 `before_*` 回调，但他们也是和其他 Active Record 回调一样注册使用。

    class User < ActiveRecord::Base
      after_initialize do |user|
        puts "You have initialized an object!"
      end
     
      after_find do |user|
        puts "You have found an object!"
      end
    end
     
    >> User.new
    You have initialized an object!
    => #<User id: nil>
     
    >> User.first
    You have found an object!
    You have initialized an object!
    => #<User id: 1>
    
#### 12 执行回调

下面的方法会触发回调：

    create
    create!
    decrement!
    destroy
    destroy_all
    increment!
    save
    save!
    save(:validate => false)
    toggle!
    update
    update_attribute
    update_attributes
    update_attributes!
    valid?

另外，`after_find` 回调只会被下面列出的方法触发：

    all
    first
    find
    find_all_by_attribute
    find_by_attribute
    find_by_attribute!
    last

而 `after_initialize` 回调在每次新AR对象初始化时都会被触发。

#### 13 跳过回调

和校验相同，我们也可以跳过回调。但是这些方法使用是必须多加注意，因为回调中可能含有重要的业务逻辑。在没有完全理解其潜在危险的情况下贸然使用可能会导致无效数据的产生。

    decrement
    decrement_counter
    delete
    delete_all
    find_by_sql
    increment
    increment_counter
    toggle
    touch
    update_column
    update_all
    update_counters

#### 14 执行挂起

当你为模型注册回调时，他们将会被放入队列中执行。这个队列中将包括模型所有的校验，所有注册的回调，以及对数据库的操作。

整个回调链封装在一个事务中。如果任何一个 before 回调方法返回 false 或者抛出异常，整个执行链会中止并且回滚；而 after 回调则只会抛出一个异常。

随意抛出一个异常，可能会中断预期执行的保存逻辑甚至可能导致未知的失败。而抛出 ActiveRecord::Rollback 异常是特地用来通知 Active Record 需要执行回滚操作。而且该异常会在内部捕捉到并不再抛出。

#### 15 关联回调

回调可以和关联一起工作，甚至是通过关联来定义的。例如一个 user 拥有多个 posts。而一个用户的 posts 应到在该用户被销毁是全部删除。我们可以给和 User 模型关联的 Post 模型添加一个 `after_destroy` 回调：

    class User < ActiveRecord::Base
      has_many :posts, :dependent => :destroy
    end
     
    class Post < ActiveRecord::Base
      after_destroy :log_destroy_action
     
      def log_destroy_action
        puts 'Post destroyed'
      end
    end
     
    >> user = User.first
    => #<User id: 1>
    >> user.posts.create!
    => #<Post id: 1, user_id: 1>
    >> user.destroy
    Post destroyed
    => #<User id: 1>

#### 16 有条件的回调

和校验相同，我们也可以让回调只有在满足特定的条件时才被触发。我们可以使用 :if 和 :unless 选项，他们接收一个符号(symbol)，字符串，Proc 或者 Array 作为参数。使用 :if 选项来指定在什么条件下回调*应该*被触发。而当你想指定在何种情况下回调*不应该*触发时，请使用 :unless 选项。

##### 16.1 使用:Symbol作为:if和:unless的参数

你可传递给一个 symbol 作为 :if 和 :unless 选项的参数，该 symbol 表示一个断言方法的名称，该方法会在回调发生前调用。当使用 :if 选项时，如果该方法返回 false，回调就不会触发；而当使用 :unless 选项时，如果该方法返回 true，回调就不会被触发。这是最常用的选项。使用这个方式，我们可以注册多个不同的断言方法来确定回调是否应该被触发。

    class Order < ActiveRecord::Base
      before_save :normalize_card_number, :if => :paid_with_card?
    end

##### 16.2 使用String作为 :if和:unless的参数

你也可以使用一个字符串作为参数，rails 会使用 eval 执行，因此该字符串必须含有有效的 Ruby 代码。你应该只有当条件判断语句很短的时候才使用该方法。

    class Order < ActiveRecord::Base
      before_save :normalize_card_number, :if => "paid_with_card?"
    end

##### 16.3 使用Proc作为:if和:unless的参数

最后，我们还可以将一个 Proc 作为 :if 和 :unless 的参数传入。这种情况最适合于判断条件是很短的校验函数，通常是单行时使用。

    class Order < ActiveRecord::Base
      before_save :normalize_card_number,
        :if => Proc.new { |order| order.paid_with_card? }
    end

##### 16.4 回调前有多个条件判断

当写有条件的回调时，可以将 :if 和 :unless 在同一个声明中同时混合使用：

    class Comment < ActiveRecord::Base
      after_create :send_email_to_author, :if => :author_wants_emails?,
        :unless => Proc.new { |comment| comment.post.ignore_comments? }
    end

##### 17 回调类

有时候，你写的一些回调十分有用甚至可以重用到其他的模型中。而 Active Record 可以让我们方便的将回调方法封装起来，以方便我们日后重用。

这里的例子中，我们为 PictureFile 模型创建了一个含有 after_destroy 回调的类：

    class PictureFileCallbacks
      def after_destroy(picture_file)
        if File.exists?(picture_file.filepath)
          File.delete(picture_file.filepath)
        end
      end
    end

如上所示，我们在类内部声明的回调方法需要接受一个模型对象作为参数。现在我们可以如下所示在模型中使用该回调：

    class PictureFile < ActiveRecord::Base
      after_destroy PictureFileCallbacks.new
    end


需要注意的是我们需要实例化一个 PictureFileCallbacks 对象，因为我们声明的回调是实例方法。当我们需要使用该实例对象的状态时，这就会很有用。通常来讲，将回调声明为一个类方法更加方便一些：

    class PictureFileCallbacks
      def self.after_destroy(picture_file)
        if File.exists?(picture_file.filepath)
          File.delete(picture_file.filepath)
        end
      end
    end

如果回调如上面一样声明为类方法，就不需要实例化 PictureFileCallbacks 对象了。

    class PictureFile < ActiveRecord::Base
      after_destroy PictureFileCallbacks
    end

回调类中，声明的回调方法的数量是不限制的。

##### 18 观察者

观察者类似于回调，但是他们之间又有很重要的区别。回调会给模型中引入和模型没有直接关系的代码，而观察者则可以在不更改模型代码的条件下可以达到相同的目的。例如，User 模型不应该包含发送注册确认邮件的代码。所以当你使用的回调写了和模型不直接相关的代码时，你可能应该考虑使用观察者来代替它。

##### 18.1 创建观察者

例如，我们想在每位新用户被创建的时候，都会发送一封确认邮件。但是发送确认邮件并非和用户模型逻辑直接相关，所以我们应该创建一个观察者来实现这部分功能。

    $ rails generate observer User

上面的命令会生成包含 UserObserver 类的 `app/models/user_observer.rb` 文件：

    class UserObserver < ActiveRecord::Observer
    end

添加在适当时间需要被调用的方法：

    class UserObserver < ActiveRecord::Observer
      def after_create(model)
        # code to send confirmation email...
      end
    end

和回调类一样，观察者类中的方法也是接收被观察的模型对象作为参数。

##### 18.2 注册观察者

观察者通常放置在 app/models 文件夹下面，并在 config/application.rb 文件中注册。例如，上面的 UserObserver 应该保存为 `app/models/user_observer.rb` 文件并在文件 config/application.rb 中如下注册：

    # 注册激活后的观察者会一直运行下去。
    config.active_record.observers = :user_observer

通常来说，config/environments 中配置的优先级高于在 config/application.rb 中的配置。所以，如果你并不想让观察者在所有的环境下运行，只需要在指定的环境文件中配置即可。

##### 18.3 分享观察者

默认情况下，Rails 仅通过“观察者”的名称确定需要观察的模型。但是，观察者也可以被用来给多个模型添加同一行为，我们可以明确的指定需要观察的多个模型：

    class MailerObserver < ActiveRecord::Observer
      observe :registration, :user
     
      def after_create(model)
        # code to send confirmation email...
      end
    end

本例中，当 Registration 或 User 被创建后，`after_create` 方法便会被调用。需要注意的是，这个新建的 MailerObserver 需要在 config/application.rb 中注册后才能生效：

    # 注册激活后的观察者会一直运行下去。
    config.active_record.observers = :mailer_observer

##### 19 事务回调

还有两个回调是在完成一次数据库事务操作后被触发的：`after_commit` 和 `after_rollback`。这两个回调和 `after_save` 很相似，只不过他们直到数据库操做成功完成或者失败后回滚完成后才被触发。当你的 AR 模型需要和不属于数据库事务的外部系统打交道时会非常的有用。

考虑如下场景，前面的示例中 PictureFile 模型需要在被销毁时删除和他关联的图片文件。如果在 `after_destroy` 回调之后发生任何异常，事务回滚，但是图片文件已经被删除而且无法恢复，这就会导致模型数据不一致。例如，假设下面代码中的 `picture_file_2` 是无效的，当我们执行 save! 方法时会抛出错误。

    PictureFile.transaction do
      picture_file_1.destroy
      picture_file_2.save!
    end


我们可以在这种情况下使用 `after_commit` 回调。

    class PictureFile < ActiveRecord::Base
      attr_accessor :delete_file
     
      after_destroy do |picture_file|
        picture_file.delete_file = picture_file.filepath
      end
     
      after_commit do |picture_file|
        if picture_file.delete_file && File.exist?(picture_file.delete_file)
          File.delete(picture_file.delete_file)
          picture_file.delete_file = nil
        end
      end
    end

当模型在一个事务中被创建，更新或者销毁时，`after_commit` 和 `after_rollback` 回调被确保会被调用。如果这些回调中的任何一个抛出异常，他们会被忽略并且不会干涉其它的回调。所以，如果你的回调代码中可能抛出异常，你就需要在回调中捕获并适当的处理它。

### 10.7.2 实例描述 361
验证登录信息

### 10.7.3 实例应用 361
### 10.7.4 运行结果 362
### 10.7.5 实例分析 363
## 10.8 ActiveRecord中的回调方法 363
视频教学：6分钟 363
回调，就是当一个方法执行时，必须调用执行另一个方法，才能够完成该方法的业务逻辑。这个调用并执行另一个方法的操作就是回调。
发出回调动作的操作由系统来完成，称之为“钩子（hook）”。钩子负责调用被回调的方法（也就是处理程序），被回调的方法由程序员编写，在执行特定任务的时候执行。

ActiveRecord中的回调是一系列以`before_`或者`after_`开头后面缀有相应事件的方法。
ActiveRecord中的回调支持以下几个事件：
- 模型校验：`validation``validation_on_creat``validation_on_update`，相应的方法有`before_validation`等六种
- 保存记录：使用模型类的save方法保存对象的事件：`before_save`和`after_save`
- 创建记录：使用模型类的create方法保存对象的事件：`before_create`和`after_create`
- 更新记录：使用模型类的update方法保存对象的事件：`before_update`和`after_update`
- 删除记录：使用模型类的delete方法保存对象的事件：`before_delete`和`after_delete`

定义一个回调有两种基本的形式：
- 以回调名称作为方法名的形式直接定义实例方法。

    def before/after_***
      ...
    end

- 用回调名称声明一个回调方法名，并在该声明下面定义该回调方法。

    before/after_*** :自定义方法名
    def 自定义方法名
     ...
    end

## 10.9 常见问题解答 364
### 10.9.1 `has_many`关联哪个数据库表的问题 364
### 10.9.2 请教一个表关联的问题 365
`belongs_to``has_many`中的`foreign_key`属性，虽然可以改变关联中的字段的默认名称，但改变后的字段仍需要是id类型（interger type）；基于字符串的关联是不支持的（当然，你可以自定义）
## 10.10 习题 366

---
# 第11章 使用控制器控制页面定向连接 369
## 11.1 了解Action Pack与控制器的关系 370
视频教学：13分钟 370
ActionPack把web请求的输出分成两个部分：
处理逻辑的控制部分——ActionController，负责一个应用的所有动作，一般包含列表显示动作和CRUD动作，通过调用相应的模型对象来完成。
解析视图模板的视图部分——ActionView，通过在HTML中混入嵌入式的ruby代码来完成。为了使视图模板尽量清晰，rails内置了大量辅助类来处理表单、日期和字符串等对象。
## 11.2 Rails控制器执行流程 370
视频教学：13分钟 370
例如：在浏览器地址栏输入`http://localhost:3000/user/show/1`

1. rails的路由(routing)对请求进行解析。
默认的解析方法是将URL以斜杠为分隔符，分为四部分：`http://域名/控制器/Action方法名/请求参数`。
2. 路由确定需要使用哪个控制器的哪个Action方法来处理用户请求。
3. 控制器中的方法调用对应模型对象的业务逻辑方法。
如上例，rails调用控制器`user_controller`中的`show`方法处理用户请求。`show`方法中的代码`@user=User.find(params[:id])`将调用User模型的find(1)方法。继承了ActiveRecord::Base类的User模型类与数据库交互，查找users表id为1的记录，返回查询到的User实例。
4. 控制器将结果提交视图文件。视图文件负责现实控制器的处理结果。
如果控制器没有明确使用render方法将处理结果提交给视图页面，控制器默认把控制器的处理结果提交给`app/views/控制器名/方法名.erb.html`文件，在该文件中访问控制器中的实例变量`@user`获取的数据库中的数据。【kinder:unknow: 不是在下面几行就会使用`render :xml => @article`吗？】
5. ActionView视图文件发送相应到用户的浏览器，最终将结果呈现给用户。

## 11.3 认识路由配置文件 371
视频教学：13分钟 372
/config/routes.rb文件详见上面8.4章。
注意：如哦rails找不到可以和用户请求匹配的路由规则，将会导致一个RoutingError异常。

## 11.4 自定义博客访问规则 373
视频教学：17分钟 373
### 11.4.1 基础知识——路由类型 374
#### 11.4.1.1 默认路由
位于routes.rb文件的最底部，代码如下：

    match `:controller(/:action(/:id(.:format)))'

其中format表示请求返回结果的格式，可以为HTML或者XML等，默认为HTML
举例：输入`http://localhost/user/show/1`之后，rails解析为：

    :controller=>users
    :action=>show
    :id=>100

#### 11.4.1.2 资源路由
在rails程序中，资源路由(RESTful Routes)是当前rails的标准路由。

它可以使用资源标识符描述资源，以及系统组件之间的资源状态迁移。【kinder:unknow: ？？】
它还提供了HTTP响应，控制器Action和数据库CRUD操作之间的映射。

举例：`resources :users`将同时生成7个不同的路由，分别用于增、查、改、删等动作：
HTTP响应 -- URL ------------ 对应的方法-- 作用
GET ------- /users --------- index ------ 以列表形式显示所有数据
GET ------- /users/new ----- new -------- 转到创建新数据的HTML页面
POST ------ /users --------- create ----- 创建新的数据 
GET ------- /users/1 ------- show ------- 根据id显示单条数据
GET ------- /users/1/edit -- edit ------- 根据id编辑数据
PUT ------- /users/1 ------- update ----- 根据id更新数据
DELETE ---- /users/1 ------- destroy ---- 根据id删除数据
【kinder:unknow: ？？？】

创建了它，还可以使用生成的一些辅助(helper)方法;
`users_url` `users_path` -------- 映射了index方法和create方法的相对路径：`http://localhost:3000/users``/users`
`new_user_url` `new_user_path` -- 映射的new方法的相对路径：`http://localhost:3000/users/new`
`edit_user_url(id)` `edit_user_path(id)` -- 映射了edit方法的相对路径`http://localhost:3000/users/id/edit``users/id/edit`
`user_url` `user_path` -- 映射了show方法、update方法和destroy方法的相对路径。`http://localhost:3000/users/id``/usrs/id`

选项：
(1) `:as`选项
可以使用新的名称重写标准的路径:

    resource :users, :as => "members"

这样执行新名称的路径后，URLs中就包含了members，但路由还是users控制器。更改后路由指定URL如下:
HTTP响应 -- URL ------------ 对应的方法-- 作用
GET ------- /members --------- index ------ 以列表形式显示所有数据
GET ------- /members/new ----- new -------- 转到创建新数据的HTML页面
POST ------ /members --------- create ----- 创建新的数据 
GET ------- /members/1 ------- show ------- 根据id显示单条数据
GET ------- /members/1/edit -- edit ------- 根据id编辑数据
PUT ------- /members/1 ------- update ----- 根据id更新数据
DELETE ---- /members/1 ------- destroy ---- 根据id删除数据
不过，即使使用as执行路径名称，也不影响生成获取路径的辅助方法。仍然得到的是`users_path`方法和`new_user_path`方法等。

(2) `:controller`选项
可以在资源路由中指定一个不同的控制器名称。例如：

    resources :users, :controller => "members"

这表示使用members控制器，但请求路径在users文件夹中。同样生成7个路由。

(3) `:conditions`选项
设置http响应的各别路由，但实际中，并不推荐这么做。

(4) `:path_names`选项
重写URLs中自动生成的new和edit部分，但实际的方法名称没有改变，只是URLs变化。例如：

    map.resources :users, :path_names => {:new => 'add', :edit => 'modi'}

URLs就变成下面代码的形式：`/users/add`和`/users/1/modi`

(5) `:path_prefix`选项
在路径前面增加一个前缀。例如在用户管理应用程序中，实现用户属于哪个角色，可以声明如下：

    resource :users :path_prefix => "/showrole/:user_id"

路径如下：`/showrole/1/users`和`showrole/1/users/2`
【kinder:unknow:路径怎么是这样变化的？什么规律嘛？】

(6) `:singular`选项
rails一般要求不把复数资源转换为单数资源。但可以使用:singular选项重写复数资源。例如：

    resources :cities, :singular => "city"

【kinder:unknow: 为什么非单数不可？】

(7) `:requirements`选项
在RESTful路由中能够使用:requirements选项为:id参数添加一个格式。例如：
resources :users, :requirement =>  {:id => /[A-Z][a-z][0-9]+/}
上面代码为:id参数添加一个匹配格式"字母+字母+数字"的正则表达式。一旦用户选择的id不匹配，应用程序不会识别。

(8) `:only`选项和`:except`选项
默认情况下，rails会根据默认的方法创建7个路径，但可以使用:only和:except选项来调整这个行为。例如：
resources :photos, :only => {:index, :show}
resources :photos, :except => :destroy
第一段代码指定只生成:index和:show两个路由
第二段代码指定不生成:destroy路由

#### 11.4.1.3 命名路由
为路由定一个名称可以提高可读性，还可以在控制器的方法中直接应用命名路由，从而实现页面提交和重定向，或是用于测试。
命名路由的方法是将默认match调用中的URL直接改为路由名称。例如：

    match 'welcom', :to=>'users#index', :as=>'welcome' 

就在routes.rb文件中创建了一个名称为“welcome”的路由，该路由将调用users控制器的index方法，同时生成`welcome_url``welcome_path`两个辅助方法（`:as`选项指定的）。

#### 11.4.1.4 嵌套路由
可以声明一个资源包含另一个资源。例如在新闻管理体系中允许别人对文章发表评论。这时每个评论就是一个资源。评论的集合关联到“文章”资源。例如：

    ActionController::Application.routes.draw do
      resources :articles do
        resources :comments
      end
    end

更为简洁和常见的写法是：

    resource :articles, :has_many => :comments

两个语句都指定了顶级的与“文章”资源相关的路由。此外还为“评论”资源建立了一组子路由；由于后者位于前者的代码块内部，因此“评论”资源必须有“文章”资源作为标识。例如获取id为100的评论，该评论针对id为50的文章，所使用的路径应该是“/article/50/comments/100”

#### 11.4.1.5 正则路由
和资源路由有点相似，同样可以将URL映射到控制器的方法上。用户请求时，只有提供匹配的URL，才能映射到定义好的规则路由中。
例如在用户管理应用程序中，经常需要查看符合一定条件的用户名或用户编号。此时就需要指定URL规则。例如下面的路由规则实现了查看名称以“sys”开头的用户记录【kinder:note: 就是对/users/show进行路由限定】：

    match `users/search/:id/:name/:dept' , :action => 'search', :controller => 'users'
      :id => /\w{3}/,
      :name => /sys\w{3}/,
      :dept => /\w{5}/

还可以使用:requirements选项来实现，该选项接受一个Hash对象作为参数，代码如下：

    match 'users/search/:id/:name/:dept',
      :action => 'search', :controller => 'users',
        :requirements => {
        :id => /\w{3}/,
        :name => /sys\w{3}/,
        :dept => /\w{5}/
        }

修改完routes.rb后在users控制器中创建一个search方法，使其能够处理`:id/:name/:dept`形式的URL：

    def search
      @user = User.new(:id=>params[:id].to_i, :name=>params[:name], :department=>params[:dept], :phone="010-00000000")
      @user.id=params[:id].to_i
      render :file=>"users/show"
    end

最后提交一个视图文件，即users/show.html.erb，显示search的结果
【kinder:unknow: 一头雾水！】
### 11.4.2 实例描述 379

    # 实现查看指定日期的文章。 【kinder:note:正则路由】
    match 'blog/articles/:date' , :action => 'search', :controller=>'blog', :date=>/\d{4}-\d{2}-\d{2}/
    # 实现查看某一年的所有图片。【kinder:note:正则路由】
    match 'photos/:year/all' , :action=>'search', :controller=>'photos', :year=>/\w{4}/
    # 实现某个关键字的所有文章。 【kinder:unknow:正则路由吗？ 这个via选项什么意思？】
    match 'articles/show/:key' => 'articles#searchkey' , :via => :POST
    # 实现按编号查看某个分类下的所有文章。【kinder:unknow:正则路由吗？ :contraints选项？】
    match 'blog/index/:category' => 'blog#index' , :constraints => {:category => /\d/}
    # 实现先用户对某篇文章的管理操作。【kinder:note:正则路由吗？ as选项将重新生成路径，see上面11.4.1.2】
    match 'users/:id/admin' => 'user#admin', :as => :admin
    # 实现用户登录后进入的页面。 【kinder:note: 命名路由】【kinder:unknow:':default'选项？？】
    match 'users/homepage/' :action=>'login', :controller=>'users', :default=>{:homepage=>'usercenter'}
    # 实现查看用户创建的分类信息。 【kinder:note:嵌套路由】
    resources :users do
      resources :categories
    end
    # 将welcome.html作为默认首页。 【kinder:note:命名路由】
    root :to => "welcome.html"
    # 创建对文章的资源路由 【资源路由】
    resource :articles

### 11.4.3 实例应用 379
### 11.4.4 实例分析 380
## 11.5 查看默认Rails应用程序的控制器代码 381
视频教学：11分钟 381
### 11.5.1 基础知识——ActionController::Base类 381
ActionController是一个web请求的核心。由一个或多个可执行的请求动作组成，然后重定向到一个模板或者另一个动作。

Controller中动作默认被声明为public方法，可以通过rials的路由在web服务器中访问该方法。例如：

    class UsersController < ApplicationController
      def index
        @users = User.all
      end
      def create
        @users = User.create params[:user]
      end
    end

动作的默认模板放在app/views/controllername目录下，对应的是action-name.html.erb文件。
例子中的index方法和create方法代表了两种最基本的动作原型在ActionController中的使用，即：获取并显示、执行操作并跳转。其他动作是它们的变形。

默认情况下，只有rails程序Application类继承自ActionController::Base类，其他的Controller类都继承自Application类。这提供了一个统一接口来设置配置信息。
ActionController::Base类内置提供6个对象，分别如下：
#### 11.5.1.1 Sessions
Sessions存储特定用户会话所需的信息。当用户中程序的web页面之间跳转时，存储在Sessions对象的变量不会丢失。语法：

    session[:username] = "somebody"  
    #设置username的值为somebody
    你选择的商品是： #{session[:username]}  
    #读取session属性的值
    session[:username]=nil
    #清除会话状态

当然，也可以直接调用`reset_session`方法来复位整个Session。

#### 11.5.1.2 Parameters
Parameters表示访问用户提供的参数。这些参数包括GET POST方法以及URL地址中的参数。Parameters是一个Hash对象。
Parameters对象存储参数的格式为：`params[:参数名]`，并且参数的深度不限。例如`params[:user][:name]`，表示访问User类的name属性值，并且所有的参数都以字符串的形式返回。
【kinder:unknow: 怎么发挥作用的？？？】
#### 11.5.1.3 Requests
request属性用于访问Request对象（用户请求）。Request对象由ActionController从一个用户请求的参数的Action部分的值中提取处理的对象。
用户的每一次请求将会对应一个Request对象，Request对象中应该包含`commit=>`将要执行的Action名。一旦rails找到应用程序中的同名Action，这个Request对象可以通过request属性在所有控制器的方法中直接使用。
【kinder:unknow: 也是语焉不详】
#### 11.5.1.4 Responses
response属性用于存取Response对象（服务器对用户的响应）。
Response对象存储有headers和视图文件内容（将发送给浏览器）。
控制器中的每个Action都会使用render或者redirect将结果提交给视图，Response对象正是通过render或者redirect自动产生的。
#### 11.5.1.5 Renders
ActionController提供了5种方式来将内容发送给用户，它们都需要调用render方法。render方法表示rails中的render对象。
render对象最常见通用的用法是渲染模板。
在ActionPack中的ActionView默认使用ERB来作渲染模板，而且配置是自动的。控制器通过指定`@实例变量`来传递到视图对象中。
当然也不是必须使用默认的自动渲染。当动作的结果需要不同模板来渲染时，手动使用render方法最合适不过了。
render方法详见下面11.6
#### 11.5.1.6 Redirects
Redirects用来从一个动作重定向到另一个动作。举例：

    def create
      @entry = Entry.new(params[:entry])
      if @entry.save
        redirect_to :action => 'show' , :id => @entry.id
      else
        ...
      end
    end

### 11.5.2 实例描述 384
### 11.5.3 实例应用 384
### 11.5.4 运行结果 385
### 11.5.5 实例分析 385
## 11.6 设计书店网站的响应模板 386
视频教学：10分钟 386
### 11.6.1 基础知识——提交数据到模板 386
render方法是rails应用程序提交数据的核心，确定提交对待数据内容和提交方式。并且该数据一般作为Response对象的body返回给浏览器。
#### 11.6.1.1 默认模板
rails应用中，虽然没有明文调用render方法，但是控制器会自动调用render方法，从而让与控制器方法名相同的视图文件显示控制器的处理结果。
并且rails框架会自动应用一个Layout模板：app/views/layouts/application.htm.erb，这个模板定义了页面的页眉和页尾，并且为整个页面进行布局。代码中的`<%= yield %>`语句表示内嵌页面显示的内容。文件详见上面8.4.1
#### 11.6.1.2 自定义视图模板
举例：

    def index
      @users = User.all
      render :action=>"list"
    end

这就需要在app/views/users文件夹下创建一个list.html.erb文件。
#### 11.6.1.3 自定义layout模板
通过使用render方法的:layout选项，可以指定Layout模板。`:layout=>false`则不使用Layout文件夹的模板
#### 11.6.1.4 局部模板
使用render方法的`:partial`选项，可以将数据提交到局部模板。
局部模板通常用于结合Ajax调用来实现页面中的局部刷新。
#### 11.6.1.5 内嵌模板
render方法的`:inline`选项可以指定一个内嵌模板，从而显示控制器处理的数据。该选项设置的值为字符串，且内容为XML代码或者ruby代码。举例：

    def inline
      @users = User.all
      render :inline=>"<h3>查看所有用户</h3><ol><% @users.each do |use| %><li><%=h '用户名：' + user.name %> &nbsq;&nbsq;&nbsq;[<%= user.department %></li><%= user.phone %><% end %></ol>"
    end

可能还需要在routes.rb中增加一条路由规则：`matech ':controller(/:action(/:id(.:format)))'`
【kinder:unknow:嘿嘿，还没动手，也不知道行不行。】
### 11.6.2 实例描述 392
### 11.6.3 实例应用 392
### 11.6.4 运行结果 395
### 11.6.5 实例分析 396
## 11.7 设计书店的购物车 396
视频教学：4分钟 397
### 11.7.1 基础知识——提交到文件 397
render方法的:file选项可以将控制器的处理结果提交到指定文件。语法:
render :file=>"/path/name"
在使用:file选项时，rails程序不会加载Layout模板，需要手动指定才可以应用模板：`:layout=>true`
如有必要，需创建app/view/path/name.html.erb文件作为模型。
### 11.7.2 实例描述 397
### 11.7.3 实例应用 397
### 11.7.4 运行结果 398
### 11.7.5 实例分析 399
## 11.8 设计书店网站的错误提示 399
视频教学：3分钟 399
### 11.8.1 基础知识——提交文本 399
`render:text=>"text-content"`可以提交文本，不调用任何模板，以及Layout模板。
这个功能在测试和错误处理时非常有效。

    def error
      render :text=>'
    <h2>很抱歉，您要访问的页面不存在。</h2>
    <p>
    <img src="/imgs/404.gif">您的访问出错了。时间： ‘Time.now.strftime(%Y-%m-%d %H:%M:%S)+'
    <br /><br />单击这里<a href="/">返回首页</a>。
    </p>
    ' , :layout=>true
    end

### 11.8.2 实例描述 400
### 11.8.3 实例应用 400
### 11.8.4 运行结果 400
### 11.8.5 实例分析 401
## 11.9 查看购物车的第一条信息 401
视频教学：5分钟 401
### 11.9.1 基础知识——重定向到指定的Action 401
`redirect_to`方法最常见的功能是重定向到指定的Action。
此时可以使用一个Hash对象作为`redirect_to`方法的参数，并且在Hash中包含一个`:action`的Key，Key指定了重定向的Action。
【kinder:unknow:不知怎么回事】
这种方式，通常在控制器中使用。例如，下面摘自上面8.7.3的`/app/controller/Articles_Controller.rb`的片段

      # 新增数据的create方法
      # POST /articles
      # POST /articles.json
      def create
        @article = Article.new(params[:article])
    
        respond_to do |format|
          if @article.save
            format.html { redirect_to @article, notice: 'Article was successfully created.' }
            format.json { render json: @article, status: :created, location: @article }
          else
            format.html { render action: "new" }
            format.json { render json: @article.errors, status: :unprocessable_entity }
          end
        end
      end

上述代码是默认生成的，这种用法无须传递额外的参数，是`redirect_to`最典型的用法。
`:notice`选项是rails3新增的，可以传递一个临时的字符串到重定向的页面。

还可以使用另一种方式重定向来指定Action，即传递一个相对路径到`redirect_to`方法中。例如：

    def create
      @user = User.new(params[:user])
        if @user.save
          redirect_to "/users/index/list"
        else
          render :action => "new"
        end
    end

技术文档：`render`和`redirect_to`的不同
在rails程序中，使用render和`redirect_to`都可以实现页面跳转，但跳转方式并不相同。具体如下：

    render :action=>"login", :layout=>"application"       # 通过提交方式跳转
    redirect_to :controller=>"user"; :action=>"login"     # 通过重定向方式跳转

`redirect_to`可以指定控制器而render不可以。render可以指定模板，而`redirect_to`不可以。

### 11.9.2 实例描述 402
### 11.9.3 实例应用 402
### 11.9.4 运行结果 403
### 11.9.5 实例分析 403
## 11.10 为“关于书店”添加外部网站链接 404
视频教学：5分钟 404
### 11.10.1 基础知识——通过URL重定向 404
示例：

    def tourl
      redirect_to "http://www.baidu.com"
    end

在html.erb页面增加以下代码`<%= link_to 'baidu', :action=>'tourl' %>`
当然也可以直接在html页面上直接使用超链接的形式转到外部URL，但这样并没有使用`link_to`方法重定向好：让用户请求在重定向之前先得到rails框架的处理，还可以增加额外的权限检查等控制。

`redirect_to`方法还有一个:back选项，可以退回发送请求的页面。一旦请求后，不管用户在页面上是否输入，系统都会自动退回到原来的页面，并且提示用户输入校验失败。
### 11.10.2 实例描述 404
### 11.10.3 实例应用 405

1. 在视图页面植入超链接代码

    <li> <%= link_to '关于书店', {:controller=>'books', :action=>'aboutus', :id=>'itzcn'}, title=>'去窗内网看看' %></li>

2. 设置相应控制器的相应方法

    def aboutus
      redirect_to "http://www.itzcn.com"
    end

3. 添加config/routes.rb路由

    match 'books/aboutus/:id' => 'books#aboutus'

### 11.10.4 运行结果 405
### 11.10.5 实例分析 406
## 11.11 对书店网站添加访问控制权限 406
视频教学：9分钟 406
### 11.11.1 基础知识——过滤器 406
Filter，过滤器，是开发者自定义的一个方法或者一个代码块，这个方法会自动在调用被请求的Action方法的之前、之后或者之前之后都调用。
**过滤器的写入位置**
过滤器既可以卸载普通的Controller文件（例如`app/controller/books_controller.rb`）里，也可以写在ApplicationController文件（`app/controller/application_controller）里。区别如下：
写在普通的Controller文件中，则过滤器指定的方法仅对该文件中的Action执行过滤；写在ApplicationController文件里，则过滤器指定的方法会对整个应用程序中的任何Action执行过滤。

#### 11.11.1.1 过滤器类型
Before过滤器 -- 如果成功通过它，请求的Action方法才会被调用
After过滤器 --- 在请求的Action方法执行完成之后，进行一些后续处理
Around过滤器--- 包含上述两种情况

在一个控制器中可以定义多个Filter，对于前缀相同的多个Filter，rails会按照定义的顺序依次调用。如果想让某个Filter在这些Filter之前被调用，需要在该Filter名称前面前缀``prepend_`，如`prepend_before_filter`。

#### 11.11.1.2 定义方式

1. 方式引用
这时最常用的，语法：

    before_filter :charsetFilter
    def charsetFilter
      ...
    end

2.  内部类
这个方式首先定义一个Filter类，类里通过一个静态的Filter方法来定义Filter需要处理的操作。
在需要调用这个Filter类的Controller中使用Filter声明。
例如，一个自定义类：

    class FilterClass
      def self.filter(controller)
        ...
      end
    end

在控制器文件声明Filter等

    class ActionController < ApplicationController
      before_filter: FilterClass
    end

3. 过程对象
把一个过程对象传递给Filter声明。即，Filter方法是一个代码块的形式，示例如下：

    before_filter{ |controller|
      ...
    end

这种方式定义的过滤器可以使代码简洁，适用于Filter定义中代码不多的情况。
#### 11.11.1.3 过滤选项
通过在过滤器中添加一些选项来限定过滤的条件。选项的参数要求是Hash形式，若有多个可以使用方括号包含、逗号分隔的形式。如`[:action1, :action2, ...]`
此外rails还提供了两个特殊的选项用于修饰过滤器：
`:only` ---- 表示只针对指定的Action调用该过滤器
`:except` -- 表示只针对指定的Action不调用该过滤器
【kinder:unknow:还会有哪些选项？？】
#### 11.11.1.4 继承过滤器
在控制器的继承体系中，父类控制器的Filter将会自动作用于子类控制器，父类控制器不受子类控制器Filter的影响。例如：

    class BankController < ActionController::Base
      before_filter :checkout
      private
      def checkout
        ...
      end
    end
    class BocBankController < BankController   # 这里的过滤器继承了上一个过滤器
      before_filter :verifyAccount
      private
      def verifyAccount
        ...
      end
    end

因此，对于BocBankController控制器的Action方法，将首先执行checkCount过滤，然后才执行verifyAccount过滤，最后请求才会被目标Action处理。

如果想让一个子类跳过父类的Filter，可以调用`skip_before_filter`来跳过Before过滤器，调用`skip_after_filter`来跳过After过滤器，或者调用`skip_all_filter`跳过所有过滤器。

### 11.11.2 实例描述 409
1. 修改控制器

    before_filter :safecheck, :except=>[ :prologin, :login]
      def safecheck
        if !session[:username].nil? then
          @currentUserName=session[:username]
          return true
          end
        else
          redirect_to "/books/login", :notice=>'对不起，您还没登录！'
          return false
      end

2. 添加login方法

      def login
        render :layout=>true
      end

3. 添加login.html.erb文件，制作form表单

    <div class="crumb_nav"> <a href="/">首页</a> &gt;&gt;用户登录 </div>
    <h2><img src="/imgs/bullet1.gif" />用户登录</h2>
    <p id="notice"><%= notice %></p>
    <%form_tag :action=>:prologin  do %>
    <div class="feat_prod_box_details">
      <p class="details"> 欢迎光临itZcn书店，只需一步即可成为我们的会员。在线阅读、使用书签、发表评论、加入读书会等等特权，赶快加入我们吧！ </p>
      <div class="contact_form">
        <div class="form_subtitle">使用一个已存在帐户登录</div>
        <form name="register" action="#">
          <div class="form_row">
            <label class="contact"><strong>我的帐户:</strong></label>
            <%= text_field :user,:name ,:class=>:contact_input%> </div>
          <div class="form_row">
            <label class="contact"><strong>我的密码:</strong></label>
            <%= password_field :user,:pass , :class=>:contact_input%> </div>
          <div class="form_row">
            <div class="terms">
              <input type="checkbox" name="terms" />
              下次自动登录 </div>
          </div>
          <div class="form_row"> <%= submit_tag '确定',:class=>:register%> </div>
        </form>
      </div>
    </div>
    <%end%>

4. 创建proloin动作 

      def prologin
        uname=params[:user][:name]
        upass=params[:user][:pass]
        
        if (uname=="admin")&&(upass=="admin")    then
          session[:user_name]=uname
          session[:user_pass]=upass
          redirect_to "/books/list", :notice => '欢迎回来，当前用户:'+session[:user_name]+'，现在时间是：'+Time.now.strftime("%Y-%m-%d %H:%M:%S")+'。'
          else
            redirect_to "/books/login", :notice => '您的输入有误，登录失败。'
        end
      end

5. 增加路由规则

    match 'books/list' => 'books#list'
    match 'books/prologin' => 'books#prologin'
    match 'books/login' => 'books#login'

### 11.11.3 实例应用 409
### 11.11.4 运行结果 411
### 11.11.5 实例分析 411
## 11.12 利用过滤器设置中文响应 412
视频教学：7分钟 412
为了让应用可以显示中文字父，通常可以通过设置响应头，在响应头里设置响应的MIME类型是"text/html"类型，并设置使用的中文字符集。
由于需要让整个rails程序都能生成中文响应，应该在`app/controller/Application_Controller`中设置一个全局的过滤器。

    class ApplicationController < ActionController::Base
      protect_from_forgery
      before_filter :changeCharset
      def changeCharset
        response.headers["Content-Type"]="text/html; charset=gb2312"   #调用respose对象的headers属性来设置响应类型和字符集。
      end
    end

## 11.13 Rails输入校验器 412
视频教学：7分钟 412
输入校验器是一种比Before校验器还提前执行的方法，它只有在Action满足特定条件的情况下才会放行，允许请求继续执行，否则可以进行阻断或者转发。
例如在blog系统发表评论之前，session中应该有一个合法的用户信息：

    class BlogController < ApplicationController
      verify :only => :post_comment，
             :session => :user_id，
             :add_flash => { :notice => "对不起，您还没登录。"}，
             :redirect_to => :login
    end

这个输入校验器只会对`:post_comment`这个Action进行校验。如果session中没有`:user_id`这个信息，就会在flash中加上一条错误信息，并且重定向到login页面。
具体来说，rails的输入校验有三方面的设置：

1. 有效范围 -- 针对哪些Action
如果有多个Action，可以使用逗号分隔并包含在一个方括号内。例如`[:action1, :action2, ...]`
`:only`选项 ---- 只针对指定的Action
`:except`选项 -- 只不针对指定的Action

2. 检查条件 -- 对Action的哪些内容
如果同时指定多个条件，则只有所有条件为true时才能通过。
`:flash=>key`  ------ 校验flash中是否包含指定的键
`:method=>:symbol` -- 校验请求方法（:get :post :head :delete）是否与指定的符号匹配
`:params=>:key` ----- 校验请求参数中是否包含指定的键
`:session=>:key` ---- 校验session中是否包含指定的键 
`:xhr=>true|false` -- 校验请求是否必须来自Ajax调用

3. 动作 -- 校验失败时的操作
如果没有指定任何Action，校验失败时会给浏览器返回一个空的响应信息。
`:add_flash=>hash` ------ 将指定hash中的“键-值”对放入flash中，通常用于显示提示信息。
`:add_header=>hash` ----- 将指定hash中的“键-值”对放入响应头中。
`:redirect_to=>params` -- 将指定hash参数重定向请求。
`:render=>params` ------- 将指定hash参数渲染视图模板。

## 11.14 常见问题解答 414
### 11.14.1 在routes.rb中配置符合规则问题 414
### 11.14.2 实现整个网站index的问题 414
### 11.14.3 关于rails的乱码问题 415
### 11.14.4 如何根据参数的具体值做判断问题 416
### 11.14.5 /account/edit 与/account/edit.current的区别问题 416
【kinder:unknow:越解释越糊涂】
### 11.14.6 rails中实现返回上一页面的功能问题 417
### 11.14.7 `redirect_to` 的问题 417
## 11.15 习题 418

---
# 第12章 保持视图页面的简单性 421
## 12.1 什么是模板 422
视频教学：7分钟 422

在Controller中使用render时，它会到`template_root`全局配置项所指定的目录中寻找模板文件；默认位于app/views目录下面。
按照约定，这个目录包含多个子目录，每个子目录对应一个控制器，其中包含该控制器需要的视图模板。
模板文件名称与Controller内各个Action名称一一对应。当然，也可以不对应。此时需要在控制器中调用render方法指定模板文件。例如：

    render :aciont => 'reg'    # 使用reg动作的模板
    render :template => 'users/reg'  #使用users控制器reg动作的模板
    render :file => 'public/usersreg'  #使用public/usersreg.htm.erb作为模板。使用这种方法可以把模板保存在任何位置。适用在多个程序共享模板文件。

模板中包含一组文本和代码。这些代码可以向模板中动态地添加内容，而且在模板内的这些代码能够访问控制器所提供的信息。包括：

- 通过`bash_path`属性访问当前模板所在的根目录
- 访问控制器的所有实例变量
- 通过控制器属性访问，调用控制器所有public方法
- 访问控制器的flash header params request response session对象

在视图代码中不应该直接使用这些对象，而是将“如何处理这些信息”的逻辑放在控制器中。
但我们可以将这些信息用于调试错误。例如在html.erb模板中调用debug方法显示请求的内容、参数明细和当前响应等。代码如下：

    <hr/>
    <h3>Session</h3>
    <%= debug session %>
    <hr/>
    <h3>Params</h3>
    <%= debug params %>
    <hr/>
    <h3>Response</h3>
    <%= debug params %>

rails默认支持三种模板：

- XML模板 -- 使用Builder模块构造的XML格式响应
- ERB模板 -- 可以嵌入ruby的、用于生成HTML的文件
- RJS模板 -- 用于生成JavaScript并在浏览器上执行的文件，通常用于Ajax

如果按作为范围来分，可以分为三种：

- 全局模板 -- 影响整个应用程序的布局。通常成为Layout模板，位于app/views/layouts目录下
- 局部模板 -- 可以在项目中多次重复使用，名称必须以下划线`_`开头，通常和普通模板位于相同目录下
- 普通模板 -- 作用域最小，通常位于app/views/controllerClass/下面

## 12.2 选择不同格式的显示结果 423
视频教学：9分钟 423
### 12.2.1 基础知识——ERB模板 423
可以嵌入ruby脚本程序，以控制动态数据的显示。所有静态内容可以直接使用HTML页面输出。
主要有三种方式嵌入程序。
1. 使用脚本程序
常规的ruby脚本程序。例如：

    <% form_tar({:action=> :upload}， :multipart => true) do %>
      <% submit_tag 'submit' %>
    <% end %>

【kinder:unknow: 这段代码什么意思？】

2. 使用ruby表达式
通常用于在页面上输入表达式的值。格式：`<%= ... %>`
虽然任何ruby代码都可以放在表达式内，但不要在模板中使用太多ruby脚本，对于控制模板显示数据的业务逻辑应该放在控制器中。
注意在ERB模板输出信息时，不能使用puts和print等输出函数，否则引发错误。

3. 使用ruby程序
这种方式用于去除ruby表达式执行之后控制内容之间的空白。
如果要取消嵌入ruby表达式的前空白，语法：`<%- ... %>`
如果要取消嵌入ruby表达式的前后空白，语法：`<%- ... -%>`

### 12.2.2 基础知识——XML模板 425
xml模板使用rails内置的Builder模块来生成和响应，因此扩展名为`.builder`。
当用户发送一个XML格式的请求时，rails就会自动调用Builder模块生成XML响应，而不是普通的HTML响应。
在XML模板中，Builder模块提供了一个XmlMarkup类来构造XML的内容。XmlMarkup类的使用非常简单，可以如下语法格式生成一个XML节点：

    xml.nodeName("文本内容", :属性1=>"值", :属性2=>"值", ...)

使用XmlMarkup类的方法生成XML元素时，不可以同时指定元素和其子元素，只能指定一个元素之后，再指定子元素。
例子：在users的视图文件夹下创建一个名为`addbook.xml.builder`打模板文件：

    xml = Builder::XmlMarkup.new(:indent=>2, :margin=>4)
    xml.instruct! :xml, :version=>"1.0", :encoding=>"utf-8"
    xml.books do
      xml.book(:id=>'1') do
        xml.name('Ruby On Rails程序开发实战详解')
        xml.author('祝红涛')
        xml.price ('68')
      end
      xml.book(:id=>'2') do
        xml.name('Ruby On Rails完全学习手册')
        xml.author('侯艳书')
        xml.price ('98')
      end
    end

启动服务器，在浏览器输入地址`http://localhost:3000/books/addbook.xml`请求XML响应，就会生成一个xml文档。

xml模板和ERB模板一样，都可以接收从控制器中传递的数据。【kinder:note: 无须`<% ... %>`形式，直接嵌入代码即可】

### 12.2.3 基础知识——RJS模板 426
RJS模板是以`.rjs`为扩展名的文件，它可以渲染一个模板执行多个JavaScript代码块。
RJS模板基于Prototype的Ajax类，渲染一个RJS模板的同时，会将response的content-type设置为“text/javascript”
RJS模板不同于ERB模板的结果渲染，而是生成一个现有被渲染页面的指令，其模板内动作在Ajax后台被调用，对发出请求的页面作出更新。
more see下面14章。

### 12.2.4 实例描述 426
### 12.2.5 实例应用 427
### 12.2.6 运行结果 429
### 12.2.7 实例分析 429
## 12.3 设计图书网站首页的图片显示 430
视频教学：9分钟 430
### 12.3.1 基础知识——显示图片 430
`image_tag`方法可以在页面上显示一张图片，它会生成HTML中的img元素。语法：

    image_tag "imagname"[, :alt=>"text"][, :size=>"widthxheigh"][, :mouseover=>"imag2"]

其中：
"imagname"可以是：图片的全路径，如`/images/name`。也可以是：图片名称，如`logo.jpg`，或者是无扩展名的图片名称，如`logo`。
默认在public/images文件下查找。如果位于其他位置，需要指定完整路径。
:alt是为图片添加替代性文字。默认将使用大写、不带扩展名的图片名称作为替代文字。
:size是设置图片的宽和高
:mouseover是设置一张交换图片，鼠标移动到该图片时显示，离开后恢复。主要利用`nomouseover``onmouseout`事件来实现。

`image_tag`方法不仅可以在ERB模板中使用，在Layout模板中同样可以。
### 12.3.2 基础知识——获取图片路径 431
使用`image_path`方法可获取图片路径，使用方法和`image_tag`相同
### 12.3.3 实例描述 432
### 12.3.4 实例应用 432
### 12.3.5 运行结果 433
### 12.3.6 实例分析 434
## 12.4 实现可修改字体颜色的内容查看页 434
视频教学：7分钟 434
### 12.4.1 基础知识——加载JavaScript函数库 434
在模板文件中使用`javascript_include_tag`方法可以加载扩展名为`.js`的文件，也可使用该方法同时导入多个JavaScript函数库。语法：

    javascript_include_tag(*sources)

其中sources参数是一个或多个脚本名称，默认的脚本加载目录为public/javascripts。最常用的几种方式是：

- 仅指定文件名。如`javascript_include_tag "prototype`
- 指定扩展名。如`javascript_include_tag "prototype.js"`
- 指定包含多个js文件。如`javascript_include_tag "common.javascript", "/elsewhere/cools"`
- 指定包含网络外部的js文件。如`javascript_include_tag "http://www.railsapplication.com/xmlhr.js"`
- 指定包含默认js文件。如`javascript_include_tag :defaults`，这段代码可能会指定多个js文件。

### 12.4.2 基础知识——获取JavaScript文件路径 435
使用`javascript_path`方法可以在模板中获取js文件的路径。语法：

     javascript_path "source"

### 12.4.3 实例描述 435
使用jQuery实现可修改字体颜色的内容查看页。
【kinder:unknow:又要补课了，我连js都没见过呢】

1. 下载jquery.js文件，放入/public/javascripts
2. 在视图模板erb文件中添加声明`<% javascript_include_tag "jquery-1.4.2.js"`
3. 在jquery.js库所在位置添加js文件，比如book.js。
4. 在erb模板中引入js文件。如`<% javascript_include_tag "book.js" %>`
### 12.4.4 实例应用 436
### 12.4.5 运行结果 437
### 12.4.6 实例分析 438
## 12.5 制作图文围绕的“关于我们” 438
视频教学：5分钟 438
### 12.5.1 基础知识——加载CSS样式文件 438
`stylesheet_link_tag`方法可以为ERB模板、RJS模板和局部模板加载CSS样式文件。
该方法同样接受文件全路径、文件名称、无扩展名的CSS文件名称三种方式，包括网络文件（如:http://www.itzcn.com/theme/style.css）
该方法的默认路径是“public/stylesheets/"
指定多个CSS文件时，要用逗号隔开
选项有：`:media => all|screen`等。

`stylesheet_path`可以获取CSS样式文件的路径，方法同`image_path`。

### 12.5.2 实例描述 439
### 12.5.3 实例应用 439
### 12.5.4 运行结果 440
### 12.5.5 实例分析 441
## 12.6 设计查看所有图书列表的页面 442
视频教学：15分钟 442
### 12.6.1 基础知识——定义输出格式 442
rails提供了许多用于格式化输出的方法。这里针对ActionView::Helpers模块重点对日期和时间、货币、日期以及字符串，等等。
#### 12.6.1.1 日期和时间格式
ActionView::Helpers::DateHelper模块提供了3个用于格式化输出日期和时间的方法。
**`distance_of_time_in_words`**
返回两个时间对象的时间差。格式：`distance_of_time_in_words(time1, time2 [, include_seconds = false][, option = {}])`
**`distance_of_time_in_words_to_now`**
返回指定时间和当前时间的时间差。格式： `distance_of_time_in_words_to_now(time [, include_seconds = false])`
**`time_ago_in_words`**
和`distance_of_time_in_words_to_now`一行。

这三种方法返回的字符串都是英文。

#### 12.6.1.2 数字格式
这些方法封装在ActionView::Helpers::NumberHelper模块内。最常用的有：
**`number_to_currency`**
用于将指定数字转换成本地货币形式的输出。语法：

    number_to_currency(number, :options)

number是指定的数字。options是可选选项，一般有：
:precision ---- 设定精确度
:unit --------- 设置货币单位，默认值是“$”
:separator ---- 设置整数和小数的分隔符，缺省值为“.”
:delimiter ---- 设置定界符，缺省为“,”
:format ------- 设置格式 【kinder:unknow:不详细】
 
**`number_to_human_size`**
用于将指定数字转换成一个文件大小的格式。选项有:precision、:separator、:delimiter。输出单位为Bytes、KB、MB、GB等。

**`number_to_percentage`**
用于将数字转换成百分比形式。选项有：precision、:delimiter和:separator。

**`number_to_phone`**
用于将数字转换成电话号码形式。选项有:
`:area_code` ----- 设为true，则为地区区号添加括号。比如208-806-2500改为(208) 8062500
`:country_code` -- 用于设置国家代码。如设为86,则形式为+86-208-806-2500
:delimiter ------- 设置定界符，缺省为“,”
:extension ------- 为电话号码添加扩展。如设为501，则形式为后缀` X 501`。

**`number_with_delimiter`**
用于将数字转换成带千分位的数字。选项有:delimiter和:separator。

**`number_with_precision`**
用于将指定数字转换成包含指定小数位的形式。选项有:precision、:separator、:delimiter。

#### 12.6.1.3 字符串格式
ActionView::Helpers::TextHelper模块提供了许多格式化输出字符串的方法。最常用的有：

**`auto_link`**
可以将字符串中的URL地址和Email地址自动转换为超链接。语法格式：

    auto_link(text, *args, &block)

【kinder:unknow: 文中没有解释。无语了。只提到下面两个选项】
`:link => :email_addresses`和`:link => :urls`

**`cycle`**
用于循环输出传给方法的多个参数。语法：

    cycle(value1, ...)

举例，下面的代码将使a和c的字体颜色设置为红色，而b和d没有颜色：

    <% @items= ['a','b','c','d']
    <% @items.each do |item| %>
      <div sytle='color:<%= cycle("red","") %>'>
        <%= item %>
      </div>
    <% end %>

### 12.6.2 实例描述 447
### 12.6.3 实例应用 447
### 12.6.4 运行结果 448
### 12.6.5 实例分析 448
## 12.7 生成超链接 448
视频教学：13分钟 448
模块：ActionView::Helpers::UrlHelper
### 12.7.1 基础知识——标准超链接 448
#### 12.7.1.1 `link_to`方法
可以在ERB模板中创建一个超链接。语法：

    link_to(*args, &block)
    形式一：
    link_to(body, url, html_options={})
    形式二：
    link_to(body, url_options={}, html_options={})
    形式三：
    link_to(options={}, html_options={}) do
      code
    end
    形式四：
    link_to(url, html_options={}) do
      code
    end

其中选项含义如下：
body是在超链接中显示的文字。
url指定超链接的地址，一个字符串，可以使用路由生成的辅助方法
`url_options`指定链接时跳转行为，有:controller、:action、:id
`url_options`指定链接时附加行为，有:confirm、:method和:remote。【kinder:unknow:这里出现错。应更正为`options`】
`html_ptions`指定链接的HTML选项

#### 12.7.1.2 `link_to_if`方法和`link_to_unless`方法
创建在两种状态下的超链接地址。举例：

    <%= link_to_if(true, "不错，顶一下") { link_to("您已经顶过了")} %><br />
    <%= link_to_unless(false, "不错，顶一下") {link_to("您以及顶过了")} %><br />
    <%= link_to_if(true,"我要登录"，{ :controlller => "sessions", :action => "new" }) %><br />
    <%= link_to_if(false,"我要注册"，{ :controlller => "sessions", :action => "new" }) %><br />
    <%= link_to_unless(true, "回复这篇文章", { :action => "reply"}) %><br />
    <%= link_to_unless(false, "回复这篇文章", { :action => "reply"}) %><br />

运行后，页面生成的URL地址如下：

    <a href="/books/numberformat">不错，顶一下</a><br />
    <a href="/books/numberformat">不错，顶一下</a><br />
    <a href="/sessions/new">我要登录</a><br />
    我要注册<br />
    回复这篇文章<br />
    <a href="/books/reply">回复这篇文章</a><br />

【kinder:unknow:这个例子让人困惑。六行代码中只有第一行和第二行有新意。后面四行用`link_to`应该也可以实现，显得复杂。】
下面是从`http://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html#method-i-link_to_if`找到的资料。包括语法。：

> **`link_to_if(condition, name, options = {}, html_options = {}, &block)`** 
> Creates a link tag of the given name using a URL created by the set of options if condition is true, otherwise only the name is returned. To specialize the default behavior, you can pass a block that accepts the name or the full argument list for `link_to_unless` (see the examples in `link_to_unless`).
>Examples
>
>     <%= link_to_if(@current_user.nil?, "Login", { :controller => "sessions", :action => "new" }) %>
>     # If the user isn't logged in...
>     # => <a href="/sessions/new/">Login</a>
>    
>     <%=
>        link_to_if(@current_user.nil?, "Login", { :controller => "sessions", :action => "new" }) do
>          link_to(@current_user.login, { :controller => "accounts", :action => "show", :id => @current_user })
>        end
>     %>
>     # If the user isn't logged in...
>     # => <a href="/sessions/new/">Login</a>
>     # If they are logged in...
>     # => <a href="/accounts/show/3">my_username</a>

> **`link_to_unless(condition, name, options = {}, html_options = {}, &block)`** 
> Creates a link tag of the given name using a URL created by the set of options unless condition is true, in which case only the name is returned. To specialize the default behavior (i.e., show a login link rather than just the plaintext link text), you can pass a block that accepts the name or the full argument list for `link_to_unless`.
Examples
>
>     <%= link_to_unless(@current_user.nil?, "Reply", { :action => "reply" }) %>
>     # If the user is logged in...
>     # => <a href="/controller/reply/">Reply</a>
>    
>     <%=
>        link_to_unless(@current_user.nil?, "Reply", { :action => "reply" }) do |name|
>          link_to(name, { :controller => "accounts", :action => "signup" })
>        end
>     %>
>     # If the user is logged in...
>     # => <a href="/controller/reply/">Reply</a>
>     # If not...
>     # => <a href="/accounts/signup">Reply</a>
 
#### 12.7.1.3 `link_to_unless_current`方法
这个方法经常用于网页导航栏。举例：

    <ul id="menu">
      <li><%= link_to_unless_current("窗内首页", { :action => "index" }) %></li>
      <li><%= link_to_unless_current("视频学院", { :action => "school" }) %></li>
    </ul>

将生成：

    <ul id="menu">
      <li><a href="/">窗内首页</a></li>   # 就是说当前页不会显示链接
      <li><a href="/books/schol">视频学院</a></li>
    </ul>

### 12.7.2 基础知识——自定义链接 451
可以使用`url_for`方法获取一个链接地址。它可以用在ERB模板和控制器中。选项有：

- `host` ------------ 指定生成URL地址的站点主机名称，默认为当前站点。
- `controller` ------ 指定生成URL地址的控制器名称，默认为当前控制器。
- `action` ---------- 指定生成URL地址的动作方法。
- `anchor` ---------- 指定生成URL地址的锚点名。
- `only_path` ------- 为一个布尔值，指定是否显示URL主机名和端口号。默认true
- `trailing_slash` -- 指定返回的URL是否以斜线作为后缀，默认true
- `protocol` -------- 用于指定URL地址的协议前缀，默认使用当前的协议前缀。

【kinder:note:发现这一章几乎抄袭自ror文档。嘻嘻。文档内容如下：】

>**`url_for(options = {})`**
> 
> Returns the URL for the set of options provided. This takes the same options as `url_for` in Action Controller (see the documentation for `ActionController::Base#url_for`). Note that by default `:only_path` is true so you’ll get the relative “/controller/action” instead of the fully qualified URL like “example.com/controller/action”.
>
> **Options**
> 
> - `:anchor` - Specifies the anchor name to be appended to the path.
> - `:only_path` - If true, returns the relative URL (omitting the protocol, host name, and port) (true by default unless :host is specified).
> - `:trailing_slash` - If true, adds a trailing slash, as in "/archive/2005/". Note that this is currently not recommended since it breaks caching.
> - `:host` - Overrides the default (current) host if provided.
> - `:protocol` - Overrides the default (current) protocol if provided.
> - `:user` - Inline HTTP authentication (only plucked out if :password is also present).
> - `:password` - Inline HTTP authentication (only plucked out if :user is also present).
> 
> **Relying on named routes**
> 
> Passing a record (like an Active Record or Active Resource) instead of a Hash as the options parameter will trigger the named route for that record. The lookup will happen on the name of the class. So passing a Workshop object will attempt to use the `workshop_path` route. If you have a nested route, such as `admin_workshop_path` you’ll have to call that explicitly (it’s impossible for `url_for` to guess that route).
>
> **Examples**
> 
>     <%= url_for(:action => 'index') %>
>     # => /blog/
>     
>     <%= url_for(:action => 'find', :controller => 'books') %>
>     # => /books/find
>     
>     <%= url_for(:action => 'login', :controller => 'members', :only_path => false, :protocol => 'https') %>
>     # => https://www.example.com/members/login/
>     
>     <%= url_for(:action => 'play', :anchor => 'player') %>
>     # => /messages/play/#player
>     
>     <%= url_for(:action => 'jump', :anchor => 'tax&ship') %>
>     # => /testing/jump/#tax&ship
>     
>     <%= url_for(Workshop.new) %>
>     # relies on Workshop answering a persisted? call (and in this case returning false)
>     # => /workshops
>     
>     <%= url_for(@workshop) %>
>     # calls @workshop.to_param which by default returns the id
>     # => /workshops/5
>     
>     # to_param can be re-defined in a model to provide different URL names:
>     # => /workshops/1-workshop-name
>     
>     <%= url_for("http://www.example.com") %>
>     # => http://www.example.com
>     
>     <%= url_for(:back) %>
>     # if request.env["HTTP_REFERER"] is set to "http://www.example.com"
>     # => http://www.example.com
>     
>     <%= url_for(:back) %>
>     # if request.env["HTTP_REFERER"] is not set or is blank
>     # => javascript:history.back()

## 12.8 制作网站用户调查表单 452
视频教学：19分钟 452
在需要交互的页面中，最核心的对象就是form。应用必须使用它向服务器提交数据、上传文件。
一般的HTML表单由<form>标记开始，到</form>标记结束，中间可穿插任意多的HTML元素。所有需要向服务器提交的页面表单元素必须放在这两个标记中间。
rails中，用于创建表单和表单输入组件的方法大部分都由Action::View::Helpers::FormTagHelper模块提供。

### 12.8.1 基础知识——生成Form表单 452
#### 12.8.1.1 创建表单`form_tag`
     form_tag(url_for_options = {}, options = {}, *parameters_for_url, &block)
`url_for_options` ----- 提供URL格式的hash对象，即提供表单提交到的URL。【kinder:unknow: 不是提交到数据库吗？】
`options` ------------- 包括`:multipart`选项和`:method`选项。如果需要实现文件上传，`:multipart`设置为true，缺省为false。`:method`选项用于控制表单提交的方式，缺省为post，还可设置为get。
`parameters_for_url` -- 随表单传递到URL中的参数。
`block` --------------- 当使用块来生成表单时使用这个参数。
【kinder:unknow: 要命，表述不清，还是看ror文档。如下：】

> **`form_tag(url_for_options = {}, options = {}, &block)`**
> 
> Starts a form tag that points the action to an url configured with `url_for_options` just like `ActionController::Base#url_for`. The method for the form defaults to POST.【kinder:unknow: 找不到这个`ActionController::Base#url_for`啊！】
> 
> **Options**
> 
> -    `:multipart` - If set to true, the enctype is set to "multipart/form-data".
> -    `:method` - The method to use when submitting the form, usually either "get" or "post". If "put", "delete", or another verb is used, a hidden input with `name _method` is added to simulate the verb over post.
> -    `:authenticity_token` - Authenticity token to use in the form. Use only if you need to pass custom authenticity token string, or to not add `authenticity_token` field at all (by passing false). Remote forms may omit the embedded authenticity token by setting `config.action_view.embed_authenticity_token_in_remote_forms = false`. This is helpful when you're fragment-caching the form. Remote forms get the authenticity from the meta tag, so embedding is unnecessary unless you support browsers without JavaScript.
> -    A list of parameters to feed to the URL the form will be posted to.
> -    :remote - If set to true, will allow the Unobtrusive JavaScript drivers to control the submit behavior. By default this behavior is an ajax submit.
> 
> **Examples**
> 
>     form_tag('/posts')
>     # => <form action="/posts" method="post">
>     
>     form_tag('/posts/1', :method => :put)
>     # => <form action="/posts/1" method="put">
>     
>     form_tag('/upload', :multipart => true)
>     # => <form action="/upload" method="post" enctype="multipart/form-data">
>     
>     <%= form_tag('/posts') do -%>
>       <div><%= submit_tag 'Save' %></div>
>     <% end -%>
>     # => <form action="/posts" method="post"><div><input type="submit" name="submit" value="Save" /></div></form>
>     
>     <%= form_tag('/posts', :remote => true) %>
>     # => <form action="/posts" method="post" data-remote="true">
>     
>     form_tag('http://far.away.com/form', :authenticity_token => false)
>     # form without authenticity token
>     
>     form_tag('http://far.away.com/form', :authenticity_token => "cf50faa3fe97702ca1ae")
>     # form with custom authenticity token

#### 12.8.1.2 显示文本`label_tag`
    label_tag(name = nil, content_or_options = nil, options = nil, &block)
举例【kinder:note: 来自ror文档；如果不熟悉html的label标签，应该先补补功课：<http://www.w3school.com.cn/tags/tag_label.asp>】

    label_tag 'name'
    # => <label for="name">Name</label>
    
    label_tag 'name', 'Your name'
    # => <label for="name">Your Name</label>
    
    label_tag 'name', nil, :class => 'small_label'
    # => <label for="name" class="small_label">Name</label>

#### 12.8.1.3 生成密码文本框`password_field_tag`
    password_field_tag(name = 'password', value =nil, options = {})
【kinder:note: `name`会被转为id和name属性。同样的，下面的内容来自ror文档】

> **`password_field_tag(name = "password", value = nil, options = {})`**
> 
> Creates a password field, a masked text field that will hide the users input behind a mask character.
> 
> **Options**
> 
>     :disabled - If set to true, the user will not be able to use this input.
>     如果设置为true，用户将不能使用这个输入框。
>     :size - The number of visible characters that will fit in the input.
>     填充输入框的可见字符的数目。（输入字段的宽度）
>     :maxlength - The maximum number of characters that the browser will allow the user to enter.
>     浏览器允许用户输入的字符的最大长度
>     Any other key creates standard HTML attributes for the tag.
> 
> **Examples**
> 
>     password_field_tag 'pass'
>     # => <input id="pass" name="pass" type="password" />
>     
>     password_field_tag 'secret', 'Your secret here'
>     # => <input id="secret" name="secret" type="password" value="Your secret here" />
>     
>     password_field_tag 'masked', nil, :class => 'masked_input_field'
>     # => <input class="masked_input_field" id="masked" name="masked" type="password" />
>     
>     password_field_tag 'token', '', :size => 15
>     # => <input id="token" name="token" size="15" type="password" value="" />
>     
>     password_field_tag 'key', nil, :maxlength => 16
>     # => <input id="key" maxlength="16" name="key" type="password" />
>     
>     password_field_tag 'confirm_pass', nil, :disabled => true
>     # => <input disabled="disabled" id="confirm_pass" name="confirm_pass" type="password" />
>     
>     password_field_tag 'pin', '1234', :maxlength => 4, :size => 6, :class => "pin_input"
>     # => <input class="pin_input" id="pin" maxlength="4" name="pin" size="6" type="password" value="1234" />

#### 12.8.1.4 生成文本框`text_field_tag`和`text_area_tag`
`text_field_tag` -- 生成单行文本框

> **`text_field_tag(name, value = nil, options = {})`**
> 
> Creates a standard text field; use these text fields to input smaller chunks of text like a username or a search query.
> 
> **Options**
> 
>  `:disabled` - If set to true, the user will not be able to use this input.
> 
>  `:size` - The number of visible characters that will fit in the input.
> 
>  `:maxlength` - The maximum number of characters that the browser will allow the user to enter.
> 
>  `:placeholder` - The text contained in the field by default which is removed when the field receives focus.
>  该字段获得输入焦点时，将会删除该字段中缺省的内容
>  Any other key creates standard HTML attributes for the tag.
> 
> **Examples**
> 
>     text_field_tag 'name'
>     # => <input id="name" name="name" type="text" />
>     
>     text_field_tag 'query', 'Enter your search query here'
>     # => <input id="query" name="query" type="text" value="Enter your search query here" />
>     
>     text_field_tag 'search', nil, :placeholder => 'Enter search term...'
>     # => <input id="search" name="search" placeholder="Enter search term..." type="text" />
>     
>     text_field_tag 'request', nil, :class => 'special_input'
>     # => <input class="special_input" id="request" name="request" type="text" />
>     
>     text_field_tag 'address', '', :size => 75
>     # => <input id="address" name="address" size="75" type="text" value="" />
>     
>     text_field_tag 'zip', nil, :maxlength => 5
>     # => <input id="zip" maxlength="5" name="zip" type="text" />
>     
>     text_field_tag 'payment_amount', '$0.00', :disabled => true
>     # => <input disabled="disabled" id="payment_amount" name="payment_amount" type="text" value="$0.00" />
>     
>     text_field_tag 'ip', '0.0.0.0', :maxlength => 15, :size => 20, :class => "ip-input"
>     # => <input class="ip-input" id="ip" maxlength="15" name="ip" size="20" type="text" value="0.0.0.0" />

`text_area_tag` --- 生成多行文本框

> **`text_area_tag(name, content = nil, options = {})`**
> 
> Creates a text input area; use a textarea for longer text inputs such as blog posts or descriptions.
> 
> **Options**
> 
>  `:size` - A string specifying the dimensions (columns by rows) of the textarea (e.g., "25x10").
> 
>  `:row` - Specify the number of rows in the textarea
>  指定多行文本框中出现行号
>  `:cols` - Specify the number of columns in the textarea
>  指定多行文本框中出现列号
>  `:disabled` - If set to true, the user will not be able to use this input.
> 
>  `:escape` - By default, the contents of the text input are HTML escaped. If you need unescaped contents, set this to false.
>  缺省时输入文本的内容会被HTML转义`。如果你不需要转义输入的内容，请设置为false。
>  Any other key creates standard HTML attributes for the tag.
> 
> **Examples**
> 
>     text_area_tag 'post'
>     # => <textarea id="post" name="post"></textarea>
>     
>     text_area_tag 'bio', @user.bio
>     # => <textarea id="bio" name="bio">This is my biography.</textarea>
>     
>     text_area_tag 'body', nil, :rows => 10, :cols => 25
>     # => <textarea cols="25" id="body" name="body" rows="10"></textarea>
>     
>     text_area_tag 'body', nil, :size => "25x10"
>     # => <textarea name="body" id="body" cols="25" rows="10"></textarea>
>     
>     text_area_tag 'description', "Description goes here.", :disabled => true
>     # => <textarea disabled="disabled" id="description" name="description">Description goes here.</textarea>
>     
>     text_area_tag 'comment', nil, :class => 'comment_input'
>     # => <textarea class="comment_input" id="comment" name="comment"></textarea>

#### 12.8.1.5 生成提交按钮`submit_tag`和`image_submit_tag`

**`submit_tag(value = "Save changes", options = {})`**
 
> Creates a submit button with the text value as the caption.
> 
> **Options**
> 
>  `:confirm => 'question?'` - If present the unobtrusive JavaScript drivers will provide a prompt with the question specified. If the user accepts, the form is processed normally, otherwise no action is taken.
>
>  `:disabled` - If true, the user will not be able to use this input.
>
>  `:disable_with` - Value of this parameter will be used as the value for a disabled version of the submit button when the form is submitted. This feature is provided by the unobtrusive JavaScript driver.
>
>  Any other key creates standard HTML options for the tag.
> 
> **Examples**
> 
>     submit_tag
>     # => <input name="commit" type="submit" value="Save changes" />
>     
>     submit_tag "Edit this article"
>     # => <input name="commit" type="submit" value="Edit this article" />
>     
>     submit_tag "Save edits", :disabled => true
>     # => <input disabled="disabled" name="commit" type="submit" value="Save edits" />
>     
>     submit_tag "Complete sale", :disable_with => "Please wait..."
>     # => <input name="commit" data-disable-with="Please wait..." type="submit" value="Complete sale" />
>     
>     submit_tag nil, :class => "form_submit"
>     # => <input class="form_submit" name="commit" type="submit" />
>     
>     submit_tag "Edit", :disable_with => "Editing...", :class => "edit_button"
>     # => <input class="edit_button" data-disable_with="Editing..." name="commit" type="submit" value="Edit" />
>     
>     submit_tag "Save", :confirm => "Are you sure?"
>     # => <input name='commit' type='submit' value='Save' data-confirm="Are you sure?" />

**`image_submit_tag(source, options = {})`**
> 
> Displays an image which when clicked will submit the form.
> 显示一个图片，单击它时将提交表单。
> source is passed to `ActionView::Helpers::AssetTagHelper#path_to_image`
> 
> **Options**
> 
>   :confirm => 'question?' - This will add a JavaScript confirm prompt with the question specified. If the user accepts, the form is processed normally, otherwise no action is taken.
> 
>   :disabled - If set to true, the user will not be able to use this input.
> 
>   Any other key creates standard HTML options for the tag.
> 
> **Examples**
> 
>     image_submit_tag("login.png")
>     # => <input src="/images/login.png" type="image" />
>     
>     image_submit_tag("purchase.png", :disabled => true)
>     # => <input disabled="disabled" src="/images/purchase.png" type="image" />
>     
>     image_submit_tag("search.png", :class => 'search_button')
>     # => <input class="search_button" src="/images/search.png" type="image" />
>     
>     image_submit_tag("agree.png", :disabled => true, :class => "agree_disagree_button")
>     # => <input class="agree_disagree_button" disabled="disabled" src="/images/agree.png" type="image" />

#### 12.8.1.6 生成隐藏标签`hidden_field_tag`
该方法用于在表单中生成一个隐藏的HTML标记。【kinder:note:这个标记的相关知识需要补课】

**`hidden_field_tag(name, value = nil, options = {})`**
> 
> Creates a hidden form input field used to transmit data that would be lost due to HTTP’s statelessness or data that should be hidden from the user.
> 
> **Options**
> 
>  Creates standard HTML attributes for the tag.
> 
> **Examples**
> 
>     hidden_field_tag 'tags_list'
>     # => <input id="tags_list" name="tags_list" type="hidden" />
>     
>     hidden_field_tag 'token', 'VUBJKB23UIVI1UU1VOBVI@'
>     # => <input id="token" name="token" type="hidden" value="VUBJKB23UIVI1UU1VOBVI@" />
>     
>     hidden_field_tag 'collected_input', '', :onchange => "alert('Input collected!')"
>     # => <input id="collected_input" name="collected_input" onchange="alert('Input collected!')"
>     #    type="hidden" value="" />   【kinder:unknow: 这个onchange事件值得深入】
    
#### 12.8.1.7 生成单选框和多选框`radio_botton_tag`和`check_box_tag`

 **`radio_button_tag(name, value, checked = false, options = {})`**
> 
> Creates a radio button; use groups of radio buttons named the same to allow users to select from a group of options.
> 
> **Options**
> 
>   :disabled - If set to true, the user will not be able to use this input.
> 
>   Any other key creates standard HTML options for the tag.
> 
> **Examples**
> 
>     radio_button_tag 'gender', 'male'
>     # => <input id="gender_male" name="gender" type="radio" value="male" />
>     
>     radio_button_tag 'receive_updates', 'no', true
>     # => <input checked="checked" id="receive_updates_no" name="receive_updates" type="radio" value="no" />
>     
>     radio_button_tag 'time_slot', "3:00 p.m.", false, :disabled => true
>     # => <input disabled="disabled" id="time_slot_300_pm" name="time_slot" type="radio" value="3:00 p.m." />
>     
>     radio_button_tag 'color', "green", true, :class => "color_input"
>     # => <input checked="checked" class="color_input" id="color_green" name="color" type="radio" value="green" />

**`check_box_tag(name, value = "1", checked = false, options = {})`**

> Creates a check box form input tag.
> 
> **Options**
> 
>   :disabled - If set to true, the user will not be able to use this input.
> 
>   Any other key creates standard HTML options for the tag.
> 
> **Examples**
> 
>     check_box_tag 'accept'
>     # => <input id="accept" name="accept" type="checkbox" value="1" />
>     
>     check_box_tag 'rock', 'rock music'
>     # => <input id="rock" name="rock" type="checkbox" value="rock music" />
>     
>     check_box_tag 'receive_email', 'yes', true
>     # => <input checked="checked" id="receive_email" name="receive_email" type="checkbox" value="yes" />
>     
>     check_box_tag 'tos', 'yes', false, :class => 'accept_tos'
>     # => <input class="accept_tos" id="tos" name="tos" type="checkbox" value="yes" />
>     
>     check_box_tag 'eula', 'accepted', false, :disabled => true
>     # => <input disabled="disabled" id="eula" name="eula" type="checkbox" value="accepted" />

#### 12.8.1.8 生成下拉列表框`select_tag`
**`select_tag(name, option_tags = nil, options = {})`**

> Creates a dropdown selection box, or if the :multiple option is set to true, a multiple choice selection box.
> 
> `Helpers::FormOptions` can be used to create common select boxes such as countries, time zones, or associated records. `option_tags` is a string containing the option tags for the select box.
> 
> **Options**
> 
>   `:multiple` - If set to true the selection will allow multiple choices.
> 
>   `:disabled` - If set to true, the user will not be able to use this input.
> 
>   `:include_blank` - If set to true, an empty option will be create
> 
>   `:prompt` - Create a prompt option with blank value and the text asking user to select something
> 
>   Any other key creates standard HTML attributes for the tag.
> 
> **Examples**
> 
>     select_tag "people", options_from_collection_for_select(@people, "id", "name")
>     # <select id="people" name="people"><option value="1">David</option></select>
>     
>     select_tag "people", "<option>David</option>".html_safe
>     # => <select id="people" name="people"><option>David</option></select>
>     
>     select_tag "count", "<option>1</option><option>2</option><option>3</option><option>4</option>".html_safe
>     # => <select id="count" name="count"><option>1</option><option>2</option>
>     #    <option>3</option><option>4</option></select>
>     
>     select_tag "colors", "<option>Red</option><option>Green</option><option>Blue</option>".html_safe, :multiple => true
>     # => <select id="colors" multiple="multiple" name="colors[]"><option>Red</option>
>     #    <option>Green</option><option>Blue</option></select>
>     
>     select_tag "locations", "<option>Home</option><option selected="selected">Work</option><option>Out</option>".html_safe
>     # => <select id="locations" name="locations"><option>Home</option><option selected='selected'>Work</option>
>     #    <option>Out</option></select>
>     
>     select_tag "access", "<option>Read</option><option>Write</option>".html_safe, :multiple => true, :class => 'form_input'
>     # => <select class="form_input" id="access" multiple="multiple" name="access[]"><option>Read</option>
>     #    <option>Write</option></select>
>     
>     select_tag "people", options_from_collection_for_select(@people, "id", "name"), :include_blank => true
>     # => <select id="people" name="people"><option value=""></option><option value="1">David</option></select>
>     
>     select_tag "people", options_from_collection_for_select(@people, "id", "name"), :prompt => "Select something"
>     # => <select id="people" name="people"><option value="">Select something</option><option value="1">David</option></select>
>     
>     select_tag "destination", "<option>NYC</option><option>Paris</option><option>Rome</option>".html_safe, :disabled => true
>     # => <select disabled="disabled" id="destination" name="destination"><option>NYC</option>
>     #    <option>Paris</option><option>Rome</option></select>

### 12.8.2 实例描述 457
### 12.8.3 实例应用 457
### 12.8.4 运行结果 458
### 12.8.5 实例分析 458
这些方法可以脱离表单单独使用，但是，此时对它们进行的修改将不会随表单进行提交。因此不推荐这种用法。

## 12.9 实现添加员工表单 459
视频教学：9分钟 459
使用ActionView::Helpers:FormHelper模块和ActionView::Helpers::FormOptionsHelper模块中的方法也可以生成表单和表单元素，而且这些方法提供了更快捷的绑定方式。
### 12.9.1 基础知识——与模型交互的表单 459
注意这些方法和上面的以“tag”结尾的方法不同，应该写在`<% %>`里面，而不是`<%= %>`
#### 12.9.1.1 生成表单
在ActionView::Helper::FormHelper模块定义了一个`form_for`方法，可以与一个模型类实体进行绑定，并在页面上生成一个表单。它还可以接受一个代码块，在代码块中可以使用实例方法创建表单工具。语法：

     form_for(record_or_name_or_array, *args, &proc)
`record_name_or_array` -- 担当双重职责，首先告诉rails当前正在操作的模型类，然后通知rails使用哪个实例变量来获取该类的实例。如果，模型对象的变量名和模型类的名称不匹配，可以传递给`form_for`方法第二个参数。
`args` ------------------ 最常用的选项是`:url`和`:html`。
`:url` ------------------- 接收的输入和`url_for`和`link_to`方法一样，用于指定将表单提交给哪个URL。也可以给该方法传入命名路由。如果不指定这个选项，就会将表单数据发回原来的action。
`:html` ------------------ 允许用户为`form_for`方法生成的表单添加HTML属性。包括":class :method :multipart"等。其中如果":multi => part"表单就会提交数据，从而实现上传文件。
【kinder:unknow: 这些解释也是摸不着头脑。大概因为这个方法太复杂了。请看下面ror文档。】

>  **`form_for(record, options = {}, &proc)`**
> 
> Creates a form and a scope around a specific model object that is used as a base for questioning about values for the fields.
> 围绕某个特定的模型对象创建一个表单或者作用域，作于询问字段的值的基础。
> Rails provides succinct resource-oriented form generation with `form_for` like this:
> 这样使用这个方法，rails会提供简洁的面向资源的表单生成器：
> 
>     <%= form_for @offer do |f| %>
>       <%= f.label :version, 'Version' %>:
>       <%= f.text_field :version %><br />
>       <%= f.label :author, 'Author' %>:
>       <%= f.text_field :author %><br />
>       <%= f.submit %>
>     <% end %>
> 
> 
> There, `form_for` is able to generate the rest of RESTful form parameters based on introspection on the record, but to understand what it does we need to dig first into the alternative generic usage it is based upon.
> 在那里，这个方法能够生成基于记录内省的RESTful表单参数的支架，但要理解它做了什么，我们需要首先深入上面基于的可选一般用法
> **Generic #form_for**
> 
> The generic way to call `form_for` yields a form builder around a model:
> 
>     <%= form_for :person do |f| %>
>       First name: <%= f.text_field :first_name %><br />
>       Last name : <%= f.text_field :last_name %><br />
>       Biography : <%= f.text_area :biography %><br />
>       Admin?    : <%= f.check_box :admin %><br />
>       <%= f.submit %>
>     <% end %>
> 
> There, the argument is a symbol or string with the name of the object the form is about.
> 
> The form builder acts as a regular form helper that somehow carries the model. Thus, the idea is that
> 
>     <%= f.text_field :first_name %>
>     
>     gets expanded to
>     
>     <%= text_field :person, :first_name %>
> 
> The rightmost argument to `form_for` is an optional hash of options:
> 
>     `:url` - The URL the form is submitted to. It takes the same fields you pass to url_for or link_to. In particular you may pass here a named route directly as well. Defaults to the current action.
> 
>     `:namespace` - A namespace for your form to ensure uniqueness of id attributes on form elements. The namespace attribute will be prefixed with underscore on the generated HTML id.
> 
>     `:html` - Optional HTML attributes for the form tag.
> 
> Also note that `form_for` doesn’t create an exclusive scope. It’s still possible to use both the stand-alone FormHelper methods and methods from FormTagHelper. For example:
> 
>     <%= form_for @person do |f| %>
>       First name: <%= f.text_field :first_name %>
>       Last name : <%= f.text_field :last_name %>
>       Biography : <%= text_area :person, :biography %>
>       Admin?    : <%= check_box_tag "person[admin]", @person.company.admin? %>
>       <%= f.submit %>
>     <% end %>
> 
> This also works for the methods in FormOptionHelper and DateHelper that are designed to work with an object as base, like `FormOptionHelper#collection_select` and `ActionView::Helpers::DateHelper#datetime_select`.
> 
> **Resource-oriented style**
> 
> As we said above, in addition to manually configuring the `form_for` call, you can rely on automated resource identification, which will use the conventions and named routes of that approach. This is the preferred way to use `form_for` nowadays.
> 
> For example, if @post is an existing record you want to edit
> 
>     <%= form_for @post do |f| %>
>       ...
>     <% end %>
> 
> is equivalent to something like:
> 
>     <%= form_for @post, :as => :post, :url => post_path(@post), :method => :put, :html => { :class => "edit_post", :id => "edit_post_45" } do |f| %>
>       ...
>     <% end %>
> 
> And for new records
> 
>     <%= form_for(Post.new) do |f| %>
>       ...
>     <% end %>
> 
> is equivalent to something like:
> 
>     <%= form_for @post, :as => :post, :url => posts_path, :html => { :class => "new_post", :id => "new_post" } do |f| %>
>       ...
>     <% end %>
> 
> You can also overwrite the individual conventions, like this:
> 
>     <%= form_for(@post, :url => super_posts_path) do |f| %>
>       ...
>     <% end %>
> 
> You can also set the answer format, like this:
> 
>     <%= form_for(@post, :format => :json) do |f| %>
>       ...
>     <% end %>
> 
> If you have an object that needs to be represented as a different parameter, like a Person that acts as a Client:
> 
>     <%= form_for(@person, :as => :client) do |f| %>
>       ...
>     <% end %>
> 
> For namespaced routes, like `admin_post_url`:
> 
>     <%= form_for([:admin, @post]) do |f| %>
>      ...
>     <% end %>
> 
> If your resource has associations defined, for example, you want to add comments to the document given that the routes are set correctly:
> 
>     <%= form_for([@document, @comment]) do |f| %>
>      ...
>     <% end %>
> 
> Where @document = Document.find(params[:id]) and @comment = Comment.new.
> 
> **Setting the method**
> 
> You can force the form to use the full array of HTTP verbs by setting
> 
>     :method => (:get|:post|:put|:delete)
> 
> in the options hash. If the verb is not GET or POST, which are natively supported by HTML forms, the form will be set to POST and a hidden input `called _method` will carry the intended verb for the server to interpret.
> 
> **Unobtrusive JavaScript**
> 
> Specifying:
> 
>     :remote => true
> 
> in the options hash creates a form that will allow the unobtrusive JavaScript drivers to modify its behavior. The expected default behavior is an XMLHttpRequest in the background instead of the regular POST arrangement, but ultimately the behavior is the choice of the JavaScript driver implementor. Even though it’s using JavaScript to serialize the form elements, the form submission will work just like a regular submission as viewed by the receiving side (all elements available in params).
> 
> Example:
> 
>     <%= form_for(@post, :remote => true) do |f| %>
>       ...
>     <% end %>
> 
> The HTML generated for this would be:
> 
>     <form action='http://www.example.com' method='post' data-remote='true'>
>       <div style='margin:0;padding:0;display:inline'>
>         <input name='_method' type='hidden' value='put' />
>       </div>
>       ...
>     </form>
> 
> **Removing hidden model id’s**
> 
> The `#form_for` method automatically includes the model id as a hidden field in the form. This is used to maintain the correlation between the form data and its associated model. Some ORM systems do not use IDs on nested models so in this case you want to be able to disable the hidden id.
> 
> In the following example the Post model has many Comments stored within it in a NoSQL database, thus there is no primary key for comments.
> 
> Example:
> 
>     <%= form_for(@post) do |f| %>
>       <% f.fields_for(:comments, :include_id => false) do |cf| %>
>         ...
>       <% end %>
>     <% end %>
> 
> **Customized form builders**
> 
> You can also build forms using a customized FormBuilder class. Subclass FormBuilder and override or define some more helpers, then use your custom builder. For example, let’s say you made a helper to automatically add labels to form inputs.
> 
>     <%= form_for @person, :url => { :action => "create" }, :builder => LabellingFormBuilder do |f| %>
>       <%= f.text_field :first_name %>
>       <%= f.text_field :last_name %>
>       <%= f.text_area :biography %>
>       <%= f.check_box :admin %>
>       <%= f.submit %>
>     <% end %>
> 
> In this case, if you use this:
> 
>     <%= render f %>
> 
> The rendered template is `people/_labelling_form` and the local variable referencing the form builder is called `labelling_form`.
> 
> The custom FormBuilder class is automatically merged with the options of a nested `#fields_for` call, unless it’s explicitly set.
> 
> In many cases you will want to wrap the above in another helper, so you could do something like the following:
> 
> 
>     def labelled_form_for(record_or_name_or_array, *args, &proc)
>       options = args.extract_options!
>       form_for(record_or_name_or_array, *(args << options.merge(:builder => LabellingFormBuilder)), &proc)
>     end
> 
> 
> If you don’t need to attach a form to a model instance, then check out `ActionView::Helpers::FormTagHelper#form_tag`.
> 
> **Form to external resources**
> 
> When you build forms to external resources sometimes you need to set an authenticity token or just render a form without it, for example when you submit data to a payment gateway number and types of fields could be limited.
> 
> To set an authenticity token you need to pass an `:authenticity_token` parameter
> 
> 
>     <%= form_for @invoice, :url => external_url, :authenticity_token => 'external_token' do |f|
>       ...
>     <% end %>
> 
> 
> If you don’t want to an authenticity token field be rendered at all just pass false:
> 
> 
>     <%= form_for @invoice, :url => external_url, :authenticity_token => false do |f|
>       ...
>     <% end %>

#### 12.9.1.2 生成表单元素
`form_for`方法位于ActionView::Helpers:FormHelper模块中，因此在它的代码块中，可以调用该模块的其他方法从而生成各种于模型有关的表单元素。
##### `label`方法，生成一个HTML的label标记，用于显示文本
`label(object_name, method, content_or_options = nil, options = nil, &block)`

> Returns a label tag tailored for labelling an input field for a specified attribute (identified by method) on an object assigned to the template (identified by object). The text of label will default to the attribute name unless a translation is found in the current I18n locale (through helpers.label.<modelname>.<attribute>) or you specify it explicitly. Additional options on the label tag can be passed as a hash with options. These options will be tagged onto the HTML as an HTML element attribute as in the example shown, except for the :value option, which is designed to target labels for `#radio_button tags` (where the value is used in the ID of the input tag).
> 
> **Examples**
> 
>     label(:post, :title)
>     # => <label for="post_title">Title</label>
>     
>     You can localize your labels based on model and attribute names.
>     For example you can define the following in your locale (e.g. en.yml)
>     
>     helpers:
>       label:
>         post:
>           body: "Write your entire text here"
>     
>     Which then will result in
>     
>     label(:post, :body)
>     # => <label for="post_body">Write your entire text here</label>
> 
> Localization can also be based purely on the translation of the attribute-name (if you are using `ActiveRecord`):
> 
>     activerecord:
>       attributes:
>         post:
>           cost: "Total cost"
>     
>     label(:post, :cost)
>     # => <label for="post_cost">Total cost</label>
>     
>     label(:post, :title, "A short title")
>     # => <label for="post_title">A short title</label>
>     
>     label(:post, :title, "A short title", :class => "title_label")
>     # => <label for="post_title" class="title_label">A short title</label>
>     
>     label(:post, :privacy, "Public Post", :value => "public")
>     # => <label for="post_privacy_public">Public Post</label>
>     
>     label(:post, :terms) do
>       'Accept <a href="/terms">Terms</a>.'.html_safe
>     end

##### `password_field`方法，生成一个密码输入文本框
`password_field(object_name, method, options = {})`

> Returns an input tag of the “password” type tailored for accessing a specified attribute (identified by method) on an object assigned to the template (identified by object). Additional options on the input tag can be passed as a hash with options. These options will be tagged onto the HTML as an HTML element attribute as in the example shown.
> **Examples**
>     
>     password_field(:login, :pass, :size => 20)
>     # => <input type="password" id="login_pass" name="login[pass]" size="20" />
>     
>     password_field(:account, :secret, :class => "form_input", :value => @account.secret)
>     # => <input type="password" id="account_secret" name="account[secret]" value="#{@account.secret}" class="form_input" />
>     
>     password_field(:user, :password, :onchange => "if $('user[password]').length > 30 { alert('Your password needs to be shorter!'); }")
>     # => <input type="password" id="user_password" name="user[password]" onchange = "if $('user[password]').length > 30 { alert('Your password needs to be shorter!'); }"/>
>     
>     password_field(:account, :pin, :size => 20, :class => 'form_input')
>     # => <input type="password" id="account_pin" name="account[pin]" size="20" class="form_input" />

##### `text_field`方法，生成一个单行文本框
`text_field(object_name, method, options = {})`
 
> Returns an input tag of the “text” type tailored for accessing a specified attribute (identified by method) on an object assigned to the template (identified by object). Additional options on the input tag can be passed as a hash with options. These options will be tagged onto the HTML as an HTML element attribute as in the example shown.
> 
> **Examples**
> 
>     text_field(:post, :title, :size => 20)
>     # => <input type="text" id="post_title" name="post[title]" size="20" value="#{@post.title}" />
>     
>     text_field(:post, :title, :class => "create_input")
>     # => <input type="text" id="post_title" name="post[title]" value="#{@post.title}" class="create_input" />
>     
>     text_field(:session, :user, :onchange => "if $('session[user]').value == 'admin' { alert('Your login can not be admin!'); }")
>     # => <input type="text" id="session_user" name="session[user]" value="#{@session.user}" onchange = "if $('session[user]').value == 'admin' { alert('Your login can not be admin!'); }"/>
>     
>     text_field(:snippet, :code, :size => 20, :class => 'code_input')
>     # => <input type="text" id="snippet_code" name="snippet[code]" size="20" value="#{@snippet.code}" class="code_input" />
##### `text_area`方法，生成一个多行文本框
`text_area(object_name, method, options = {})`

> Returns a textarea opening and closing tag set tailored for accessing a specified attribute (identified by method) on an object assigned to the template (identified by object). Additional options on the input tag can be passed as a hash with options.
> 
> **Examples**
> 
>     text_area(:post, :body, :cols => 20, :rows => 40)
>     # => <textarea cols="20" rows="40" id="post_body" name="post[body]">
>     #      #{@post.body}
>     #    </textarea>
>     
>     text_area(:comment, :text, :size => "20x30")
>     # => <textarea cols="20" rows="30" id="comment_text" name="comment[text]">
>     #      #{@comment.text}
>     #    </textarea>
>     
>     text_area(:application, :notes, :cols => 40, :rows => 15, :class => 'app_input')
>     # => <textarea cols="40" rows="15" id="application_notes" name="application[notes]" class="app_input">
>     #      #{@application.notes}
>     #    </textarea>
>     
>     text_area(:entry, :body, :size => "20x20", :disabled => 'disabled')
>     # => <textarea cols="20" rows="20" id="entry_body" name="entry[body]" disabled="disabled">
>     #      #{@entry.body}
>     #    </textarea>

##### `hidden_field`方法，生成一个隐藏域
 `hidden_field(object_name, method, options = {})`

> Returns a hidden input tag tailored for accessing a specified attribute (identified by method) on an object assigned to the template (identified by object). Additional options on the input tag can be passed as a hash with options. These options will be tagged onto the HTML as an HTML element attribute as in the example shown.
> 
> **Examples**
> 
>     hidden_field(:signup, :pass_confirm)
>     # => <input type="hidden" id="signup_pass_confirm" name="signup[pass_confirm]" value="#{@signup.pass_confirm}" />
>     
>     hidden_field(:post, :tag_list)
>     # => <input type="hidden" id="post_tag_list" name="post[tag_list]" value="#{@post.tag_list}" />
>     
>     hidden_field(:user, :token)
>     # => <input type="hidden" id="user_token" name="user[token]" value="#{@user.token}" />

##### `radio_button`方法，生成一个单选按钮
`radio_button(object_name, method, tag_value, options = {})`

> Returns a radio button tag for accessing a specified attribute (identified by method) on an object assigned to the template (identified by object). If the current value of method is `tag_value` the radio button will be checked.
> 
> To force the radio button to be checked pass `:checked => true` in the options hash. You may pass HTML options there as well.
> 
> **Examples**
> 
>     # Let's say that @post.category returns "rails":
>     radio_button("post", "category", "rails")
>     radio_button("post", "category", "java")
>     # => <input type="radio" id="post_category_rails" name="post[category]" value="rails" checked="checked" />
>     #    <input type="radio" id="post_category_java" name="post[category]" value="java" />
>     
>     radio_button("user", "receive_newsletter", "yes")
>     radio_button("user", "receive_newsletter", "no")
>     # => <input type="radio" id="user_receive_newsletter_yes" name="user[receive_newsletter]" value="yes" />
>     #    <input type="radio" id="user_receive_newsletter_no" name="user[receive_newsletter]" value="no" checked="checked" />

##### `check_box`方法，生成一个复选框和隐藏域
`check_box(object_name, method, options = {}, checked_value = "1", unchecked_value = "0")`
`object_name`表示复选框绑定的对象，method表示复选框绑定的属性。
如果这方法在`field_for`方法或者`form_for`方法的代码块中使用，将无须指定复选框所绑定的对象（即`object_name`），只需要提供绑定的属性即可。

> Returns a checkbox tag tailored for accessing a specified attribute (identified by method) on an object assigned to the template (identified by object). This object must be an instance object (@object) and not a local object. It’s intended that method returns an integer and if that integer is above zero, then the checkbox is checked. Additional options on the input tag can be passed as a hash with options. The `checked_value` defaults to 1 while the default `unchecked_value` is set to 0 which is convenient for boolean values.
> 
> **Gotcha**
> 
> The HTML specification says unchecked check boxes are not successful, and thus web browsers do not send them. Unfortunately this introduces a gotcha: if an Invoice model has a paid flag, and in the form that edits a paid invoice the user unchecks its check box, no paid parameter is sent. So, any mass-assignment idiom like
> 
>     @invoice.update_attributes(params[:invoice])
> 
> wouldn’t update the flag.
> 
> To prevent this the helper generates an auxiliary hidden field before the very check box. The hidden field has the same name and its attributes mimic an unchecked check box.
> 
> This way, the client either sends only the hidden field (representing the check box is unchecked), or both fields. Since the HTML specification says key/value pairs have to be sent in the same order they appear in the form, and parameters extraction gets the last occurrence of any repeated key in the query string, that works for ordinary forms.
> 
> Unfortunately that workaround does not work when the check box goes within an array-like parameter, as in
> 
>     <%= fields_for "project[invoice_attributes][]", invoice, :index => nil do |form| %>
>       <%= form.check_box :paid %>
>       ...
>     <% end %>
> 
> because parameter name repetition is precisely what Rails seeks to distinguish the elements of the array. For each item with a checked check box you get an extra ghost item with only that attribute, assigned to “0”.
> 
> In that case it is preferable to either use `check_box_tag` or to use hashes instead of arrays.
> 
> **Examples**
> 
>     # Let's say that @post.validated? is 1:
>     check_box("post", "validated")
>     # => <input name="post[validated]" type="hidden" value="0" />
>     #    <input type="checkbox" id="post_validated" name="post[validated]" value="1" />
>     
>     # Let's say that @puppy.gooddog is "no":
>     check_box("puppy", "gooddog", {}, "yes", "no")
>     # => <input name="puppy[gooddog]" type="hidden" value="no" />
>     #    <input type="checkbox" id="puppy_gooddog" name="puppy[gooddog]" value="yes" />
>     
>     check_box("eula", "accepted", { :class => 'eula_check' }, "yes", "no")
>     # => <input name="eula[accepted]" type="hidden" value="no" />
>     #    <input type="checkbox" class="eula_check" id="eula_accepted" name="eula[accepted]" value="yes" />
 
##### `fields_for`方法，将多个表单工具绑定到一个对象
 `fields_for(record_name, record_object = nil, options = {}, &block)`

> Creates a scope around a specific model object like `#form_for`, but doesn’t create the form tags themselves. This makes `#fields_for` suitable for specifying additional model objects in the same form.
> 
> **Generic Examples**
> 
>     <%= form_for @person do |person_form| %>
>       First name: <%= person_form.text_field :first_name %>
>       Last name : <%= person_form.text_field :last_name %>
>     
>       <%= fields_for @person.permission do |permission_fields| %>
>         Admin?  : <%= permission_fields.check_box :admin %>
>       <% end %>
>     
>       <%= f.submit %>
>     <% end %>
>     
>     …or if you have an object that needs to be represented as a different parameter, like a Client that acts as a Person:
>     
>     <%= fields_for :person, @client do |permission_fields| %>
>       Admin?: <%= permission_fields.check_box :admin %>
>     <% end %>
>     
>     …or if you don’t have an object, just a name of the parameter:
>     
>     <%= fields_for :person do |permission_fields| %>
>       Admin?: <%= permission_fields.check_box :admin %>
>     <% end %>
> 
> Note: This also works for the methods in FormOptionHelper and DateHelper that are designed to work with an object as base, like `FormOptionHelper#collection_select` and `ActionView::Helpers::DateHelper#datetime_select`.
> 
> **Nested Attributes Examples**
> 
> When the object belonging to the current scope has a nested attribute writer for a certain attribute, `#fields_for` will yield a new scope for that attribute. This allows you to create forms that set or change the attributes of a parent object and its associations in one go.
> 
> Nested attribute writers are normal setter methods named after an association. The most common way of defining these writers is either with `accepts_nested_attributes_for` in a model definition or by defining a method with the proper name. For example: the attribute writer for the `association :address` is called `address_attributes=`.
> 
> Whether a one-to-one or one-to-many style form builder will be yielded depends on whether the normal reader method returns a single object or an array of objects.
> 
> **One-to-one**
> 
> Consider a Person class which returns a single Address from the address reader method and responds to the `address_attributes= writer` method:
> 
>     class Person
>       def address
>         @address
>       end
>     
>       def address_attributes=(attributes)
>         # Process the attributes hash
>       end
>     end
> 
> This model can now be used with a nested `#fields_for`, like so:
> 
>     <%= form_for @person do |person_form| %>
>       ...
>       <%= person_form.fields_for :address do |address_fields| %>
>         Street  : <%= address_fields.text_field :street %>
>         Zip code: <%= address_fields.text_field :zip_code %>
>       <% end %>
>       ...
>     <% end %>
> 
> When address is already an association on a Person you can use `accepts_nested_attributes_for` to define the writer method for you:
> 
>     class Person < ActiveRecord::Base
>       has_one :address
>       accepts_nested_attributes_for :address
>     end
> 
> If you want to destroy the associated model through the form, you have to enable it first using the `:allow_destroy` option for `accepts_nested_attributes_for`:
> 
> 
>     class Person < ActiveRecord::Base
>       has_one :address
>       accepts_nested_attributes_for :address, :allow_destroy => true
>     end
> 
> 
> Now, when you use a form element with `the _destroy` parameter, with a value that evaluates to true, you will destroy the associated model (eg. 1, ‘1’, true, or ‘true’):
> 
>     <%= form_for @person do |person_form| %>
>       ...
>       <%= person_form.fields_for :address do |address_fields| %>
>         ...
>         Delete: <%= address_fields.check_box :_destroy %>
>       <% end %>
>       ...
>     <% end %>
> 
> **One-to-many**
> 
> Consider a Person class which returns an array of Project instances from the projects reader method and responds to the `projects_attributes= writer` method:
> 
> 
>     class Person
>       def projects
>         [@project1, @project2]
>       end
>     
>       def projects_attributes=(attributes)
>         # Process the attributes hash
>       end
>     end
> 
> 
> Note that the `projects_attributes= writer` method is in fact required for `#fields_for` to correctly identify :projects as a collection, and the correct indices to be set in the form markup.
> 
> When projects is already an association on Person you can use `accepts_nested_attributes_for` to define the writer method for you:
> 
>     class Person < ActiveRecord::Base
>       has_many :projects
>       accepts_nested_attributes_for :projects
>     end
> 
> This model can now be used with a nested `fields_for`. The block given to the nested `#fields_for` call will be repeated for each instance in the collection:
> 
>     <%= form_for @person do |person_form| %>
>       ...
>       <%= person_form.fields_for :projects do |project_fields| %>
>         <% if project_fields.object.active? %>
>           Name: <%= project_fields.text_field :name %>
>         <% end %>
>       <% end %>
>       ...
>     <% end %>
> 
> It’s also possible to specify the instance to be used:
> 
>     <%= form_for @person do |person_form| %>
>       ...
>       <% @person.projects.each do |project| %>
>         <% if project.active? %>
>           <%= person_form.fields_for :projects, project do |project_fields| %>
>             Name: <%= project_fields.text_field :name %>
>           <% end %>
>         <% end %>
>       <% end %>
>       ...
>     <% end %>
> 
> Or a collection to be used:
> 
>     <%= form_for @person do |person_form| %>
>       ...
>       <%= person_form.fields_for :projects, @active_projects do |project_fields| %>
>         Name: <%= project_fields.text_field :name %>
>       <% end %>
>       ...
>     <% end %>
> 
> When projects is already an association on Person you can use `accepts_nested_attributes_for` to define the writer method for you:
> 
> 
>     class Person < ActiveRecord::Base
>       has_many :projects
>       accepts_nested_attributes_for :projects
>     end
> 
> 
> If you want to destroy any of the associated models through the form, you have to enable it first using the `:allow_destroy` option for `accepts_nested_attributes_for`:
> 
> 
>     class Person < ActiveRecord::Base
>       has_many :projects
>       accepts_nested_attributes_for :projects, :allow_destroy => true
>     end
> 
> 
> This will allow you to specify which models to destroy in the attributes hash by adding a form element for `the _destroy` parameter with a value that evaluates to true (eg. 1, ‘1’, true, or ‘true’):
> 
> 
>     <%= form_for @person do |person_form| %>
>       ...
>       <%= person_form.fields_for :projects do |project_fields| %>
>         Delete: <%= project_fields.check_box :_destroy %>
>       <% end %>
>       ...
>     <% end %>

##### `file_field`方法，生成一个上传文件组件
 `file_field(object_name, method, options = {})`

> Returns a file upload input tag tailored for accessing a specified attribute (identified by method) on an object assigned to the template (identified by object). Additional options on the input tag can be passed as a hash with options. These options will be tagged onto the HTML as an HTML element attribute as in the example shown.
> 
> Using this method inside a `form_for` block will set the enclosing form’s encoding to multipart/form-data.
> 
> **Examples**
> 
>     file_field(:user, :avatar)
>     # => <input type="file" id="user_avatar" name="user[avatar]" />
>     
>     file_field(:post, :attached, :accept => 'text/html')
>     # => <input accept="text/html" type="file" id="post_attached" name="post[attached]" />
>     
>     file_field(:attachment, :file, :class => 'file_input')
>     # => <input type="file" id="attachment_file" name="attachment[file]" class="file_input" />

##### 其他方法，see ror文档
> **`convert_to_model(object)`**
> Converts the given object to an ActiveModel compliant one.
> 
> **`email_field(object_name, method, options = {})`**
> 
> Returns a `#text_field` of type “email”.
> 
>     email_field("user", "address")
>     # => <input id="user_address" size="30" name="user[address]" type="email" />
> 
>  **`number_field(object_name, method, options = {})`**
> Returns an input tag of type “number”.
> Options
> 
>     Accepts same options as number_field_tag
> 
> **`phone_field(object_name, method, options = {})`**
> 参看下面的`telephone_field`方法。
> **`range_field(object_name, method, options = {})`**
> 
> Returns an input tag of type “range”.
> 
> Options
> 
>   Accepts same options as `range_field_tag`
> 
> **`search_field(object_name, method, options = {})`**
> 
> Returns an input of type “search” for accessing a specified attribute (identified by method) on an object assigned to the template (identified by `object_name`). Inputs of type “search” may be styled differently by some browsers.
> 
> **Examples**
> 
>     search_field(:user, :name)
>     # => <input id="user_name" name="user[name]" size="30" type="search" />
>     search_field(:user, :name, :autosave => false)
>     # => <input autosave="false" id="user_name" name="user[name]" size="30" type="search" />
>     search_field(:user, :name, :results => 3)
>     # => <input id="user_name" name="user[name]" results="3" size="30" type="search" />
>     #  Assume request.host returns "www.example.com"
>     search_field(:user, :name, :autosave => true)
>     # => <input autosave="com.example.www" id="user_name" name="user[name]" results="10" size="30" type="search" />
>     search_field(:user, :name, :onsearch => true)
>     # => <input id="user_name" incremental="true" name="user[name]" onsearch="true" size="30" type="search" />
>     search_field(:user, :name, :autosave => false, :onsearch => true)
>     # => <input autosave="false" id="user_name" incremental="true" name="user[name]" onsearch="true" size="30" type="search" />
>     search_field(:user, :name, :autosave => true, :onsearch => true)
>     # => <input autosave="com.example.www" id="user_name" incremental="true" name="user[name]" onsearch="true" results="10" size="30" type="search" />
> 
> **`telephone_field(object_name, method, options = {})`**
> Returns a `#text_field` of type “tel”.
> 
>     telephone_field("user", "phone")
>     # => <input id="user_phone" name="user[phone]" size="30" type="tel" />
> 
> Also aliased as: `phone_field`
> **`url_field(object_name, method, options = {})`**
> 
> Returns a `#text_field` of type “url”.
> 
>     url_field("user", "homepage")
>     # => <input id="user_homepage" size="30" name="user[homepage]" type="url" />

#### 12.9.1.3 生成下拉菜单
要使用ActionView::Helpers::FormOptionsHelper模块。
**Options**

The `collection_select`, `select` and `time_zone_selec`t methods take an options parameter, a hash:

- `:include_blank` - set to true or a prompt string if the first option element of the select element is a blank. Useful if there is not a default value required for the select element.

For example,

    select("post", "category", Post::CATEGORIES, {:include_blank => true})

could become:

    <select name="post[category]">
      <option></option>
      <option>joke</option>
      <option>poem</option>
    </select>

Another common case is a select tag for an `belongs_to-associated` object.

Example with `@post.person_id => 2`:

    select("post", "person_id", Person.all.collect {|p| [ p.name, p.id ] }, {:include_blank => 'None'})

could become:

    <select name="post[person_id]">
      <option value="">None</option>
      <option value="1">David</option>
      <option value="2" selected="selected">Sam</option>
      <option value="3">Tobias</option>
    </select>

- `:prompt` - set to true or a prompt string. When the select element doesn't have a value yet, this prepends an option with a generic prompt -- "Please select" -- or the given prompt string.

Example:

    select("post", "person_id", Person.all.collect {|p| [ p.name, p.id ] }, {:prompt => 'Select Person'})

could become:

    <select name="post[person_id]">
      <option value="">Select Person</option>
      <option value="1">David</option>
      <option value="2">Sam</option>
      <option value="3">Tobias</option>
    </select>

Like the other form helpers, select can accept an :index option to manually set the ID used in the resulting output. Unlike other helpers, select expects this option to be in the `html_options` parameter.

Example:

    select("album[]", "genre", %w[rap rock country], {}, { :index => nil })

becomes:

    <select name="album[][genre]" id="album__genre">
      <option value="rap">rap</option>
      <option value="rock">rock</option>
      <option value="country">country</option>
    </select>

- `:disabled` - can be a single value or an array of values that will be disabled options in the final output.

Example:

    select("post", "category", Post::CATEGORIES, {:disabled => 'restricted'})

could become:

    <select name="post[category]">
      <option></option>
      <option>joke</option>
      <option>poem</option>
      <option disabled="disabled">restricted</option>
    </select>

When used with the `collection_select` helper, `:disabled` can also be a Proc that identifies those options that should be disabled.

Example:

    collection_select(:post, :category_id, Category.all, :id, :name, {:disabled => lambda{|category| category.archived? }})

If the categories “2008 stuff” and “Christmas” return true when the method archived? is called, this would return:

    <select name="post[category_id]">
      <option value="1" disabled="disabled">2008 stuff</option>
      <option value="2" disabled="disabled">Christmas</option>
      <option value="3">Jokes</option>
      <option value="4">Poems</option>
    </select>
`grouped_collection_select(object, method, collection, group_method, group_label_method, option_key_method, option_value_method, options = {}, html_options = {})`

Returns <select>, <optgroup> and <option> tags for the collection of existing return values of method for object‘s class. The value returned from calling method on the instance object will be selected. If calling method returns nil, no selection is made without including `:prompt` or `:include_blank` in the options hash.

**Parameters:**

-  `object` - The instance of the class to be used for the select tag

-  `method` - The attribute of object corresponding to the select tag

-  `collection` - An array of objects representing the <optgroup> tags.

-  `group_method` - The name of a method which, when called on a member of collection, returns an array of child objects representing the <option> tags.

-  `group_label_method` - The name of a method which, when called on a member of collection, returns a string to be used as the label attribute for its <optgroup> tag.

-  `option_key_method` - The name of a method which, when called on a child object of a member of collection, returns a value to be used as the value attribute for its <option> tag.

-  `option_value_method` - The name of a method which, when called on a child object of a member of collection, returns a value to be used as the contents of its <option> tag.

**Example object structure for use with this method:**

    class Continent < ActiveRecord::Base
      has_many :countries
      # attribs: id, name
    end
    class Country < ActiveRecord::Base
      belongs_to :continent
      # attribs: id, name, continent_id
    end
    class City < ActiveRecord::Base
      belongs_to :country
      # attribs: id, name, country_id
    end

**Sample usage:**

    grouped_collection_select(:city, :country_id, @continents, :countries, :name, :id, :name)

Possible output:

    <select name="city[country_id]">
      <optgroup label="Africa">
        <option value="1">South Africa</option>
        <option value="3">Somalia</option>
      </optgroup>
      <optgroup label="Europe">
        <option value="7" selected="selected">Denmark</option>
        <option value="2">Ireland</option>
      </optgroup>
    </select>

`time_zone_options_for_select(selected = nil, priority_zones = nil, model = ::ActiveSupport::TimeZone)`

Returns a string of option tags for pretty much any time zone in the world. Supply a ActiveSupport::TimeZone name as selected to have it marked as the selected option tag. You can also supply an array of ActiveSupport::TimeZone objects as `priority_zones`, so that they will be listed above the rest of the (long) list. (You can use `ActiveSupport::TimeZone.us_zones` as a convenience for obtaining a list of the US time zones, or a Regexp to select the zones of your choice)

The selected parameter must be either nil, or a string that names a ActiveSupport::TimeZone.

By default, model is the ActiveSupport::TimeZone constant (which can be obtained in Active Record as a value object). The only requirement is that the model parameter be an object that responds to all, and returns an array of objects that represent time zones.

NOTE: Only the option tags are returned, you have to wrap this call in a regular HTML select tag.

`time_zone_select(object, method, priority_zones = nil, options = {}, html_options = {})`

Return select and option tags for the given object and method, using `time_zone_options_for_select` to generate the list of option tags.

In addition to the `:include_blank` option documented above, this method also supports a :model option, which defaults to ActiveSupport::TimeZone. This may be used by users to specify a different time zone model object. (See `time_zone_options_for_select` for more information.)

You can also supply an array of ActiveSupport::TimeZone objects as `priority_zones`, so that they will be listed above the rest of the (long) list. (You can use `ActiveSupport::TimeZone.us_zones` as a convenience for obtaining a list of the US time zones, or a Regexp to select the zones of your choice)

Finally, this method supports a :default option, which selects a default ActiveSupport::TimeZone if the object’s time zone is nil.

Examples:

    time_zone_select( "user", "time_zone", nil, :include_blank => true)
    
    time_zone_select( "user", "time_zone", nil, :default => "Pacific Time (US & Canada)" )
    
    time_zone_select( "user", 'time_zone', ActiveSupport::TimeZone.us_zones, :default => "Pacific Time (US & Canada)")
    
    time_zone_select( "user", 'time_zone', [ ActiveSupport::TimeZone['Alaska'], ActiveSupport::TimeZone['Hawaii'] ])
    
    time_zone_select( "user", 'time_zone', %rAustralia/)
    
    time_zone_select( "user", "time_zone", ActiveSupport::TimeZone.all.sort, :model => ActiveSupport::TimeZone)

##### select方法
`select(object, method, choices, options = {}, html_options = {})`

> Create a select tag and a series of contained option tags for the provided object and method. The option currently held by the object will be selected, provided that the object is available.
> 
> There are two possible formats for the choices parameter, corresponding to other helpers’ output:
> 
> 
>      * A flat collection: see options_for_select
>      * A nested collection: see grouped_options_for_select
> 
> 
> Example with `@post.person_id => 1`:
> 
>     select("post", "person_id", Person.all.collect {|p| [ p.name, p.id ] }, { :include_blank => true })
> 
> could become:
> 
>     <select name="post[person_id]">
>       <option value=""></option>
>       <option value="1" selected="selected">David</option>
>       <option value="2">Sam</option>
>       <option value="3">Tobias</option>
>     </select>
> 
> This can be used to provide a default set of options in the standard way: before rendering the create form, a new model instance is assigned the default options and bound to `@model_name`. Usually this model is not saved to the database. Instead, a second model object is created when the create request is received. This allows the user to submit a form page more than once with the expected results of creating multiple records. In addition, this allows a single partial to be used to generate form inputs for both edit and create forms.
> 
> By default, `post.person_id` is the selected option. Specify :selected => value to use a different selection or :selected => nil to leave all options unselected. Similarly, you can specify values to be disabled in the option tags by specifying the :disabled option. This can either be a single value or an array of values to be disabled.
> Gotcha
> 
> The HTML specification says when multiple parameter passed to select and all options got deselected web browsers do not send any value to server. Unfortunately this introduces a gotcha: if an User model has many roles and have `role_ids` accessor, and in the form that edits roles of the user the user deselects all roles from `role_ids` multiple select box, no `role_ids` parameter is sent. So, any mass-assignment idiom like
> 
>     @user.update_attributes(params[:user])
> 
> wouldn’t update roles.
> 
> To prevent this the helper generates an auxiliary hidden field before every multiple select. The hidden field has the same name as multiple select and blank value.
> 
> This way, the client either sends only the hidden field (representing the deselected multiple select box), or both fields. Since the HTML specification says key/value pairs have to be sent in the same order they appear in the form, and parameters extraction gets the last occurrence of any repeated key in the query string, that works for ordinary forms.

##### `collection_select`方法
`collection_select(object, method, collection, value_method, text_method, options = {}, html_options = {})`

> Returns <select> and <option> tags for the collection of existing return values of method for object‘s class. The value returned from calling method on the instance object will be selected. If calling method returns nil, no selection is made without including `:prompt` or `:include_blank` in the options hash.
>返回<select>和<optin>标签为选有的collection，为对象类返回方法的值 ？？通过在实例对象调用方法返回的值将被选取。如果调用方法返回nil，没有作出选择，无须在选项hash中包含`:prompt`和`:include_blank`。
> The `:value_method` and `:text_method` parameters are methods to be called on each member of collection. The return values are used as the value attribute and contents of each <option> tag, respectively.
> `:value_method`和`:text_method`参数是每个collection的成员被调用的方法。返回的值将用作相应的<options>标签的属性和内容的值。

> Example object structure for use with this method:
> 举例使用这种方法的对象结构
>
>     class Post < ActiveRecord::Base
>       belongs_to :author
>     end
>     class Author < ActiveRecord::Base
>       has_many :posts
>       def name_with_initial
>         "#{first_name.first}. #{last_name}"
>       end
>     end
> 
> Sample usage (selecting the associated Author for an instance of Post, @post):
> 示例（为POST实例变量@post选择相关的Author：
>
>     collection_select(:post, :author_id, Author.all, :id, :name_with_initial, :prompt => true)
> 
> If `@post.author_id` is already 1, this would return:
> 如果`@post.author_id`的值已经是1,这将返回下面的html代码：
>
>     <select name="post[author_id]">
>       <option value="">Please select</option>
>       <option value="1" selected="selected">D. Heinemeier Hansson</option>
>       <option value="2">D. Thomas</option>
>       <option value="3">M. Clark</option>
>     </select>

##### `grouped_options_for_select`方法和`options_for_select`方法
`grouped_options_for_select(grouped_options, selected_key = nil, prompt = nil)`

> Returns a string of <option> tags, like `options_for_select`, but wraps them with <optgroup> tags.
> 
> **Parameters:**
> 
> -  `grouped_options` - Accepts a nested array or hash of strings. The first value serves as the <optgroup> label while the second value must be an array of options. The second value can be a nested array of text-value pairs. See `options_for_select` for more info.
> 
>     Ex. ["North America",[["United States","US"],["Canada","CA"]]]
> 
> -  `selected_key` - A value equal to the value attribute for one of the <option> tags, which will have the selected attribute set. Note: It is possible for this value to match multiple options as you might have the same option in multiple groups. Each will then get selected="selected".
> 
> -  `prompt` - set to true or a prompt string. When the select element doesn't have a value yet, this prepends an option with a generic prompt - "Please select" - or the given prompt string.
> 
> **Sample usage (Array):**
> 
>     grouped_options = [
>      ['North America',
>        [['United States','US'],'Canada']],
>      ['Europe',
>        ['Denmark','Germany','France']]
>     ]
>     grouped_options_for_select(grouped_options)
> 
> Sample usage (Hash):
> 
>     grouped_options = {
>      'North America' => [['United States','US'], 'Canada'],
>      'Europe' => ['Denmark','Germany','France']
>     }
>     grouped_options_for_select(grouped_options)
> 
> Possible output:
> 
>     <optgroup label="Europe">
>       <option value="Denmark">Denmark</option>
>       <option value="Germany">Germany</option>
>       <option value="France">France</option>
>     </optgroup>
>     <optgroup label="North America">
>       <option value="US">United States</option>
>       <option value="Canada">Canada</option>
>     </optgroup>
> 
> Note: Only the <optgroup> and <option> tags are returned, so you still have to wrap the output in an appropriate <select> tag.

`options_for_select(container, selected = nil)`

> Accepts a container (hash, array, enumerable, your type) and returns a string of option tags. Given a container where the elements respond to first and last (such as a two-element array), the “lasts” serve as option values and the “firsts” as option text. Hashes are turned into this form automatically, so the keys become “firsts” and values become lasts. If selected is specified, the matching “last” or element will get the selected option-tag. selected may also be an array of values to be selected when using a multiple select.
> 
> Examples (call, result):
> 
>     options_for_select([["Dollar", "$"], ["Kroner", "DKK"]])
>       <option value="$">Dollar<%roption>\n<option value="DKK">Kroner</ption>
>     
>     options_for_select([ "VISA", "MasterCard" ], "MasterCard")
>       <option>VISA<%roption>\n<option selected="selected">MasterCard</ption>
>     
>     options_for_select({ "Basic" => "$20", "Plus" => "$40" }, "$40")
>       <option value="$20">Basic<%roption>\n<option value="$40" selected="selected">Plus</ption>
>     
>     options_for_select([ "VISA", "MasterCard", "Discover" ], ["VISA", "Discover"])
>       <option selected="selected">VISA<%roption>\n<option>MasterCard</ption>\n<option selected="selected">Discover<%roption>
> 
> You can optionally provide html attributes as the last element of the array.
> 
> Examples:
> 
>     options_for_select([ "Denmark", ["USA", {:class => 'bold'}], "Sweden" ], ["USA", "Sweden"])
>       <option value="Denmark">Denmark<%roption>\n<option value="USA" class="bold" selected="selected">USA</ption>\n<option value="Sweden" selected="selected">Sweden<%roption>
>     
>     options_for_select([["Dollar", "$", {:class => "bold"}], ["Kroner", "DKK", {:onclick => "alert('HI');"}]])
>       <option value="$" class="bold">Dollar</ption>\n<option value="DKK" onclick="alert('HI');">Kroner<%roption>
> 
> If you wish to specify disabled option tags, set selected to be a hash, with :disabled being either a value or array of values to be disabled. In this case, you can use :selected to specify selected option tags.
> 
> Examples:
> 
>     options_for_select(["Free", "Basic", "Advanced", "Super Platinum"], :disabled => "Super Platinum")
>       <option value="Free">Free<%roption>\n<option value="Basic">Basic</ption>\n<option value="Advanced">Advanced<%roption>\n<option value="Super Platinum" disabled="disabled">Super Platinum</ption>
>     
>     options_for_select(["Free", "Basic", "Advanced", "Super Platinum"], :disabled => ["Advanced", "Super Platinum"])
>       <option value="Free">Free<%roption>\n<option value="Basic">Basic</ption>\n<option value="Advanced" disabled="disabled">Advanced<%roption>\n<option value="Super Platinum" disabled="disabled">Super Platinum</ption>
>     
>     options_for_select(["Free", "Basic", "Advanced", "Super Platinum"], :selected => "Free", :disabled => "Super Platinum")
>       <option value="Free" selected="selected">Free<%roption>\n<option value="Basic">Basic</ption>\n<option value="Advanced">Advanced<%roption>\n<option value="Super Platinum" disabled="disabled">Super Platinum</ption>
> 
> NOTE: Only the option tags are returned, you have to wrap this call in a regular HTML select tag.


##### `option_groups_from_collection_for_select`方法和`options_from_collection_for_select`方法

`option_groups_from_collection_for_select(collection, group_method, group_label_method, option_key_method, option_value_method, selected_key = nil)`

> Returns a string of <option> tags, like `options_from_collection_for_select`, but groups them by <optgroup> tags based on the object relationships of the arguments.
> 返回一个<option>标签的字符串，类似`options_from_collection_for_select`，但通过基于参数的对象关系的<optgroup>标签对它们进行分组。
>
> **Parameters参数:**【kinder:unknow:越翻译越糊涂】
> 
> -    `collection` - An array of objects representing the <optgroup> tags.
> 一组描述<optgroup>标签的对象的数组
> -    `group_method` - The name of a method which, when called on a member of collection, returns an array of child objects representing the <option> tags.
> 方法名，这些方法在调用collection成员时，返回描述<optgroup>标签的子对象的一组数组
> -    `group_label_method+` - The name of a method which, when called on a member of collection, returns a string to be used as the label attribute for its <optgroup> tag.
> 方法名，这些方法在调用collection成员时，返回一个用作<optgroup>标签的label属性的字符串
> -    `option_key_method` - The name of a method which, when called on a child object of a member of collection, returns a value to be used as the value attribute for its <option> tag. 
> 方法名，这些方法在调用collection成员的子对象时，返回一个用作<optgroup>标签的value属性的值
> -    `option_value_method` - The name of a method which, when called on a child object of a member of collection, returns a value to be used as the contents of its <option> tag.
> 方法名，这些方法在调用collection成员的子对象时，返回一个用作<optgroup>标签的内容的值。 
> -    `selected_key` - A value equal to the value attribute for one of the <option> tags, which will have the selected attribute set. Corresponds to the return value of one of the calls to `option_key_method`. If nil, no selection is made. Can also be a hash if disabled values are to be specified.
> 一个值，等于一个<option>标签的value属性。这个值将拥有已选择的属性设置。相当于一个调用`option_key_method`返回值。如果设定为nil，将不做选择。如果指定了禁用value也可以是一个hash。
 
> Example object structure for use with this method:
> 
>     class Continent < ActiveRecord::Base
>       has_many :countries
>       # attribs: id, name
>     end
>     class Country < ActiveRecord::Base
>       belongs_to :continent
>       # attribs: id, name, continent_id
>     end
> 
> Sample usage:
> 
>     option_groups_from_collection_for_select(@continents, :countries, :name, :id, :name, 3)
> 
> Possible output:
> 
>     <optgroup label="Africa">
>       <option value="1">Egypt</option>
>       <option value="4">Rwanda</option>
>       ...
>     </optgroup>
>     <optgroup label="Asia">
>       <option value="3" selected="selected">China</option>
>       <option value="12">India</option>
>       <option value="5">Japan</option>
>       ...
>     </optgroup>
> 
> Note: Only the <optgroup> and <option> tags are returned, so you still have to wrap the output in an appropriate <select> tag.

`options_from_collection_for_select(collection, value_method, text_method, selected = nil)`

> Returns a string of option tags that have been compiled by iterating over the collection and assigning the result of a call to the `value_method` as the option value and the `text_method` as the option text. Example:
> 
>     options_from_collection_for_select(@people, 'id', 'name')
> 
> This will output the same HTML as if you did this:
> 
>     <option value="#{person.id}">#{person.name}</option>
> 
> This is more often than not used inside a `select_tag` like this example:
> 
>     select_tag 'person', options_from_collection_for_select(@people, 'id', 'name')
> 
> If selected is specified as a value or array of values, the element(s) returning a match on `value_method` will be selected option tag(s).
> 
> If selected is specified as a Proc, those members of the collection that return true for the anonymous function are the selected values.
> 
> selected can also be a hash, specifying both :selected and/or :disabled values as required.
> 
> Be sure to specify the same class as the `value_method` when specifying selected or disabled options. Failure to do this will produce undesired results. Example:
> 
>     options_from_collection_for_select(@people, 'id', 'name', '1')
> 
> Will not select a person with the id of 1 because 1 (an Integer) is not the same as ‘1’ (a string)
> 
>     options_from_collection_for_select(@people, 'id', 'name', 1)
> 
> should produce the desired results.

### 12.9.2 实例描述 463
1. 创建一个表
2. 生成框架。
3. 在控制器新建一个add方法
4. 创建add对应的视图文件。在这个文件中创建表单并与模型进行绑定。

### 12.9.3 实例应用 463
### 12.9.4 运行结果 464
### 12.9.5 实例分析 464
## 12.10 选择日期和时间 465
视频教学：6分钟 465
使用ActionView::Helpers::DateHelper模块中的方法可以生成选择日期和时间的下拉菜单，而且提供了很多参数控制日期和时间的格式和样式。

**common options**
The Date Helper primarily creates select/option tags for different kinds of dates and times or date and time elements. All of the select-type methods share a number of common options that are as follows:

-  `:prefix` - overwrites the default prefix of "date" used for the select names. So specifying "birthday" would give birthday instead of date if passed to the `select_month` method.
用自定义的日期前缀替代默认日期前缀。指定"birthday"将让birthday替代date，如果传递给`select_month`方法。【kinder:unknow:肯定不是这么翻译，哈哈】
-  `:include_blank` - set to true if it should be possible to set an empty date.
如果需要设置一个空日期，则设置为true
-  `:discard_type` - set to true if you want to discard the type part of the select name. If set to true, the `select_month` method would use simply "date" (which can be overwritten using :prefix) instead of "date".
如果你要放弃选择名称的类型部分，设置为true。设置为true之后，`select_month`方法将使用date(可被:prefix重写的那个)替代date 【kinder:unknow: 什么嘛】 

 **`distance_of_time_in_words(from_time, to_time = 0, include_seconds = false, options = {})`**

Reports the approximate distance in time between two Time, Date or DateTime objects or integers as seconds. Set `include_seconds` to true if you want more detailed approximations when distance < 1 min, 29 secs. Distances are reported based on the following table:

    0 <-> 29 secs                                                             # => less than a minute
    30 secs <-> 1 min, 29 secs                                                # => 1 minute
    1 min, 30 secs <-> 44 mins, 29 secs                                       # => [2..44] minutes
    44 mins, 30 secs <-> 89 mins, 29 secs                                     # => about 1 hour
    89 mins, 30 secs <-> 23 hrs, 59 mins, 29 secs                             # => about [2..24] hours
    23 hrs, 59 mins, 30 secs <-> 41 hrs, 59 mins, 29 secs                     # => 1 day
    41 hrs, 59 mins, 30 secs  <-> 29 days, 23 hrs, 59 mins, 29 secs           # => [2..29] days
    29 days, 23 hrs, 59 mins, 30 secs <-> 59 days, 23 hrs, 59 mins, 29 secs   # => about 1 month
    59 days, 23 hrs, 59 mins, 30 secs <-> 1 yr minus 1 sec                    # => [2..12] months
    1 yr <-> 1 yr, 3 months                                                   # => about 1 year
    1 yr, 3 months <-> 1 yr, 9 months                                         # => over 1 year
    1 yr, 9 months <-> 2 yr minus 1 sec                                       # => almost 2 years
    2 yrs <-> max time or date                                                # => (same rules as 1 yr)

With `include_seconds = true` and the difference < 1 minute 29 seconds:

    0-4   secs      # => less than 5 seconds
    5-9   secs      # => less than 10 seconds
    10-19 secs      # => less than 20 seconds
    20-39 secs      # => half a minute
    40-59 secs      # => less than a minute
    60-89 secs      # => 1 minute

Examples


    from_time = Time.now
    distance_of_time_in_words(from_time, from_time + 50.minutes)        # => about 1 hour
    distance_of_time_in_words(from_time, 50.minutes.from_now)           # => about 1 hour
    distance_of_time_in_words(from_time, from_time + 15.seconds)        # => less than a minute
    distance_of_time_in_words(from_time, from_time + 15.seconds, true)  # => less than 20 seconds
    distance_of_time_in_words(from_time, 3.years.from_now)              # => about 3 years
    distance_of_time_in_words(from_time, from_time + 60.hours)          # => 3 days
    distance_of_time_in_words(from_time, from_time + 45.seconds, true)  # => less than a minute
    distance_of_time_in_words(from_time, from_time - 45.seconds, true)  # => less than a minute
    distance_of_time_in_words(from_time, 76.seconds.from_now)           # => 1 minute
    distance_of_time_in_words(from_time, from_time + 1.year + 3.days)   # => about 1 year
    distance_of_time_in_words(from_time, from_time + 3.years + 6.months) # => over 3 years
    distance_of_time_in_words(from_time, from_time + 4.years + 9.days + 30.minutes + 5.seconds) # => about 4 years

    to_time = Time.now + 6.years + 19.days
    distance_of_time_in_words(from_time, to_time, true)     # => about 6 years
    distance_of_time_in_words(to_time, from_time, true)     # => about 6 years
    distance_of_time_in_words(Time.now, Time.now)           # => less than a minute
    
**`distance_of_time_in_words_to_now(from_time, include_seconds = false)`**

**`time_ago_in_words(from_time, include_seconds = false)`**

Like `distance_of_time_in_words`, but where `to_time` is fixed to Time.now.

Examples

    time_ago_in_words(3.minutes.from_now)       # => 3 minutes
    time_ago_in_words(Time.now - 15.hours)      # => about 15 hours
    time_ago_in_words(Time.now)                 # => less than a minute
    
    from_time = Time.now - 3.days - 14.minutes - 25.seconds
    time_ago_in_words(from_time)      # => 3 days

Also aliased as: `distance_of_time_in_words_to_now`

**`time_select(object_name, method, options = {}, html_options = {})`**

Returns a set of select tags (one for hour, minute and optionally second) pre-selected for accessing a specified time-based attribute (identified by method) on an object assigned to the template (identified by object). You can include the seconds with `:include_seconds`. You can get hours in the AM/PM format with :ampm option.

This method will also generate 3 input hidden tags, for the actual year, month and day unless the option `:ignore_date` is set to true. If you set the `:ignore_date` to true, you must have a `date_select` on the same method within the form otherwise an exception will be raised.

If anything is passed in the `html_options` hash it will be applied to every select tag in the set.

**Examples**

    # Creates a time select tag that, when POSTed, will be stored in the article variable in the sunrise attribute.
    time_select("article", "sunrise")
    
    # Creates a time select tag with a seconds field that, when POSTed, will be stored in the article variables in
    # the sunrise attribute.
    time_select("article", "start_time", :include_seconds => true)
    
    # You can set the <tt>:minute_step</tt> to 15 which will give you: 00, 15, 30 and 45.
    time_select 'game', 'game_time', {:minute_step => 15}
    
    # Creates a time select tag with a custom prompt. Use <tt>:prompt => true</tt> for generic prompts.
    time_select("article", "written_on", :prompt => {:hour => 'Choose hour', :minute => 'Choose minute', :second => 'Choose seconds'})
    time_select("article", "written_on", :prompt => {:hour => true}) # generic prompt for hours
    time_select("article", "written_on", :prompt => true) # generic prompts for all
    
    # You can set :ampm option to true which will show the hours as: 12 PM, 01 AM .. 11 PM.
    time_select 'game', 'game_time', {:ampm => true}

The selects are prepared for multi-parameter assignment to an Active Record object.

Note: If the day is not included as an option but the month is, the day will be set to the 1st to ensure that all month choices are valid.

**`time_tag(date_or_time, *args)`**

Returns an html time tag for the given date or time.

**Examples**

    time_tag Date.today  # =>
      <time datetime="2010-11-04">November 04, 2010<%rtime>
    time_tag Time.now  # =>
      <time datetime="2010-11-04T17:55:45+01:00">November 04, 2010 17:55</time>
    time_tag Date.yesterday, 'Yesterday'  # =>
      <time datetime="2010-11-03">Yesterday<%rtime>
    time_tag Date.today, :pubdate => true  # =>
      <time datetime="2010-11-04" pubdate="pubdate">November 04, 2010</time>

### 12.10.1 基础知识——`date_select`方法 465

`date_select(object_name, method, options = {}, html_options = {})`

Returns a set of select tags (one for year, month, and day) pre-selected for accessing a specified date-based attribute (identified by method) on an object assigned to the template (identified by object).

**Options选项**

-  `:use_month_numbers` - Set to true if you want to use month numbers rather than month names (e.g. "2" instead of "February").
如果你想使用月份数字而不是名字，可设置为true。（比如“2”而不是“February”）
-  `:use_short_month` - Set to true if you want to use abbreviated month names instead of full month names (e.g. "Feb" instead of "February").
如果你想使用月份的缩写名字而不是全名，可设置为true。（比如“Feb”而不是“February”）
-  `:add_month_numbers` - Set to true if you want to use both month numbers and month names (e.g. "2 - February" instead of "February").
如果你想同时使用月份数字和名字，则设置为true。（比如“2 - February”而不是“February”）
-  `:use_month_names` - Set to an array with 12 month names if you want to customize month names. Note: You can also use Rails' i18n functionality for this.
设置为带有十二个月份名字的数组，如果你想定制月份名字。注意：你也可以使用rails的i18n函数在实现。
-  `:date_separator` - Specifies a string to separate the date fields. Default is "" (i.e. nothing).
指定一个字符串来分隔日期字段，默认为空
-  `:start_year` - Set the start year for the year select. Default is Time.now.year - 5.
设置默认的开始年份。默认为`Time.now.year -5`(即当前年份的前五年)
-  `:end_year` - Set the end year for the year select. Default is Time.now.year + 5.
设置默认的结束年份。默认为`Time.now.year +5`(即当前年份的后五年)
-  `:discard_day` - Set to true if you don't want to show a day select. This includes the day as a hidden field instead of showing a select field. Also note that this implicitly sets the day to be the first of the given month in order to not create invalid dates like 31 February.
如果你不想显示日期的选择，设置为true。这将让日期作为隐藏字段，而不是显示一个可选字段。也要注意这隐含了设置日期为该月的第一天，为了不创建想2月31日这样无效的日期。
-  `:discard_month` - Set to true if you don't want to show a month select. This includes the month as a hidden field instead of showing a select field. Also note that this implicitly sets `:discard_day` to true.
如果你不想显示月份的选择，设置为true。这将让月份作为隐藏字段，而不是显示一个可选字段。也要注意这隐含了`:discar_day`为true的设置。
-  `:discard_year` - Set to true if you don't want to show a year select. This includes the year as a hidden field instead of showing a select field.
如果你不想显示年份的选择，设置为true。这将让年份作为隐藏字段，而不是显示一个可选字段。
-  `:order` - Set to an array containing :day, :month and :year to customize the order in which the select fields are shown. If you leave out any of the symbols, the respective select will not be shown (like when you set `:discard_xxx => true`. Defaults to the order defined in the respective locale (e.g. [:year, :month, :day] in the en locale that ships with Rails).如果你遗漏了符号，相应的选项就不会显示。（比如当你设置了`:discard_xxx => true`。）
设置一个包含:month、:day、:year的数组，以定制可选字段的显示顺序。缺省的顺序在相应的locale中定义。（比如rails的英文locale为[:year, :month, :day]）
-  `:include_blank` - Include a blank option in every select field so it's possible to set empty dates.
在每个可选字段中包含空选项，因此可设置为空的日期。
-  `:default` - Set a default date if the affected date isn't set or is nil.
如果日期没有设置或者为nil，则设置为一个默认日期
-  `:disabled` - Set to true if you want show the select fields as disabled.
如果你禁用显示可选字段，则设置为true
-  `:prompt` - Set to true (for a generic prompt), a prompt string or a hash of prompt strings for :year, :month, :day, :hour, :minute and :second. Setting this option prepends a select option with a generic prompt (Day, Month, Year, Hour, Minute, Seconds) or the given prompt string.
设置这true（显示一般提示），提示字符，年月日分秒对应的提示字符串的hash。设置这个选项要预设可选项的一般提示（Day, Month, Year, Hour, Minute, Seconds）或者指定的提示字符串。
If anything is passed in the `html_options` hash it will be applied to every select tag in the set.
如果有任意通过了`html_options`哈希，它将适用与设置中的任何可选标签。
NOTE: Discarded selects will default to 1. So if no month select is available, January will be assumed.
注意：放弃可选项将默认为1.所以没有月份选项可用，将假定为一月。

**Examples**

    # Generates a date select that when POSTed is stored in the article variable, in the written_on attribute.
    date_select("article", "written_on")
    
    # Generates a date select that when POSTed is stored in the article variable, in the written_on attribute,
    # with the year in the year drop down box starting at 1995.
    date_select("article", "written_on", :start_year => 1995)
    
    # Generates a date select that when POSTed is stored in the article variable, in the written_on attribute,
    # with the year in the year drop down box starting at 1995, numbers used for months instead of words,
    # and without a day select box.
    date_select("article", "written_on", :start_year => 1995, :use_month_numbers => true,
                                         :discard_day => true, :include_blank => true)
    
    # Generates a date select that when POSTed is stored in the article variable, in the written_on attribute
    # with the fields ordered as day, month, year rather than month, day, year.
    date_select("article", "written_on", :order => [:day, :month, :year])
    
    # Generates a date select that when POSTed is stored in the user variable, in the birthday attribute
    # lacking a year field.
    date_select("user", "birthday", :order => [:month, :day])
    
    # Generates a date select that when POSTed is stored in the article variable, in the written_on attribute
    # which is initially set to the date 3 days from the current date
    date_select("article", "written_on", :default => 3.days.from_now)
    
    # Generates a date select that when POSTed is stored in the credit_card variable, in the bill_due attribute
    # that will have a default day of 20.
    date_select("credit_card", "bill_due", :default => { :day => 20 })
    
    # Generates a date select with custom prompts.
    date_select("article", "written_on", :prompt => { :day => 'Select day', :month => 'Select month', :year => 'Select year' })

The selects are prepared for multi-parameter assignment to an Active Record object.

Note: If the day is not included as an option but the month is, the day will be set to the 1st to ensure that all month choices are valid.

### 12.10.2 基础知识——`datetime_select`方法 466
可以创建一个包含日期和时间的下拉菜单，和`date_select`方法的适用方式相同，选项也相同。

**`datetime_select(object_name, method, options = {}, html_options = {})`**

Returns a set of select tags (one for year, month, day, hour, and minute) pre-selected for accessing a specified datetime-based attribute (identified by method) on an object assigned to the template (identified by object).

If anything is passed in the `html_options` hash it will be applied to every select tag in the set.

**Examples**

    # Generates a datetime select that, when POSTed, will be stored in the article variable in the written_on
    # attribute.
    datetime_select("article", "written_on")
    
    # Generates a datetime select with a year select that starts at 1995 that, when POSTed, will be stored in the
    # article variable in the written_on attribute.
    datetime_select("article", "written_on", :start_year => 1995)
    
    # Generates a datetime select with a default value of 3 days from the current time that, when POSTed, will
    # be stored in the trip variable in the departing attribute.
    datetime_select("trip", "departing", :default => 3.days.from_now)
    
    # Generate a datetime select with hours in the AM/PM format
    datetime_select("article", "written_on", :ampm => true)
    
    # Generates a datetime select that discards the type that, when POSTed, will be stored in the article variable
    # as the written_on attribute.
    datetime_select("article", "written_on", :discard_type => true)
    
    # Generates a datetime select with a custom prompt. Use <tt>:prompt => true</tt> for generic prompts.
    datetime_select("article", "written_on", :prompt => {:day => 'Choose day', :month => 'Choose month', :year => 'Choose year'})
    datetime_select("article", "written_on", :prompt => {:hour => true}) # generic prompt for hours
    datetime_select("article", "written_on", :prompt => true) # generic prompts for all
    
The selects are prepared for multi-parameter assignment to an Active Record object.
    
### 12.10.3 基础知识——`select_*`系列方法 467
**`select_date(date = Date.current, options = {}, html_options = {})`**

Returns a set of html select-tags (one for year, month, and day) pre-selected with the date. It’s possible to explicitly set the order of the tags using the :order option with an array of symbols :year, :month and :day in the desired order. If the array passed to the :order option does not contain all the three symbols, all tags will be hidden.

If anything is passed in the `html_options` hash it will be applied to every select tag in the set.

**Examples**

    my_date = Time.now + 6.days
    
    # Generates a date select that defaults to the date in my_date (six days after today).
    select_date(my_date)
    
    # Generates a date select that defaults to today (no specified date).
    select_date()
    
    # Generates a date select that defaults to the date in my_date (six days after today)
    # with the fields ordered year, month, day rather than month, day, year.
    select_date(my_date, :order => [:year, :month, :day])
    
    # Generates a date select that discards the type of the field and defaults to the date in
    # my_date (six days after today).
    select_date(my_date, :discard_type => true)
    
    # Generates a date select that defaults to the date in my_date,
    # which has fields separated by '/'.
    select_date(my_date, :date_separator => '/')
    
    # Generates a date select that defaults to the datetime in my_date (six days after today)
    # prefixed with 'payday' rather than 'date'.
    select_date(my_date, :prefix => 'payday')
    
    # Generates a date select with a custom prompt. Use <tt>:prompt => true</tt> for generic prompts.
    select_date(my_date, :prompt => {:day => 'Choose day', :month => 'Choose month', :year => 'Choose year'})
    select_date(my_date, :prompt => {:hour => true}) # generic prompt for hours
    select_date(my_date, :prompt => true) # generic prompts for all
    
**`select_datetime(datetime = Time.current, options = {}, html_options = {})`**

Returns a set of html select-tags (one for year, month, day, hour, minute, and second) pre-selected with the datetime. It’s also possible to explicitly set the order of the tags using the :order option with an array of symbols :year, :month and :day in the desired order. If you do not supply a Symbol, it will be appended onto the :order passed in. You can also add `:date_separator`, `:datetime_separator` and `:time_separator` keys to the options to control visual display of the elements.

If anything is passed in the `html_options` hash it will be applied to every select tag in the set.

**Examples**

    my_date_time = Time.now + 4.days`date_select(object_name, method, options = {}, html_options = {})`

    # Generates a datetime select that defaults to the datetime in my_date_time (four days after today).
    select_datetime(my_date_time)
    
    # Generates a datetime select that defaults to today (no specified datetime)
    select_datetime()
    
    # Generates a datetime select that defaults to the datetime in my_date_time (four days after today)
    # with the fields ordered year, month, day rather than month, day, year.
    select_datetime(my_date_time, :order => [:year, :month, :day])
    
    # Generates a datetime select that defaults to the datetime in my_date_time (four days after today)
    # with a '/' between each date field.
    select_datetime(my_date_time, :date_separator => '/')
    
    # Generates a datetime select that defaults to the datetime in my_date_time (four days after today)
    # with a date fields separated by '/', time fields separated by '' and the date and time fields
    # separated by a comma (',').
    select_datetime(my_date_time, :date_separator => '/', :time_separator => '', :datetime_separator => ',')
    
    # Generates a datetime select that discards the type of the field and defaults to the datetime in
    # my_date_time (four days after today)
    select_datetime(my_date_time, :discard_type => true)
    
    # Generate a datetime field with hours in the AM/PM format
    select_datetime(my_date_time, :ampm => true)
    
    # Generates a datetime select that defaults to the datetime in my_date_time (four days after today)
    # prefixed with 'payday' rather than 'date'
    select_datetime(my_date_time, :prefix => 'payday')
    
    # Generates a datetime select with a custom prompt. Use <tt>:prompt => true</tt> for generic prompts.
    select_datetime(my_date_time, :prompt => {:day => 'Choose day', :month => 'Choose month', :year => 'Choose year'})
    select_datetime(my_date_time, :prompt => {:hour => true}) # generic prompt for hours
    select_datetime(my_date_time, :prompt => true) # generic prompts for all

**`select_day(date, options = {}, html_options = {})`**

Returns a select tag with options for each of the days 1 through 31 with the current day selected. The date can also be substituted for a day number. Override the field name using the `:field_name` option, ‘day’ by default.


**Examples**

    my_date = Time.now + 2.days
    
    # Generates a select field for days that defaults to the day for the date in my_date.
    select_day(my_time)
    
    # Generates a select field for days that defaults to the number given.
    select_day(5)
    
    # Generates a select field for days that defaults to the day for the date in my_date
    # that is named 'due' rather than 'day'.
    select_day(my_time, :field_name => 'due')
    
    # Generates a select field for days with a custom prompt. Use <tt>:prompt => true</tt> for a
    # generic prompt.
    select_day(5, :prompt => 'Choose day')

**`select_hour(datetime, options = {}, html_options = {})`**

Returns a select tag with options for each of the hours 0 through 23 with the current hour selected. The datetime can be either a Time or DateTime object or an integer. Override the field name using the `:field_name` option, ‘hour’ by default.
**Examples**

    my_time = Time.now + 6.hours
    
    # Generates a select field for hours that defaults to the hour for the time in my_time.
    select_hour(my_time)
    
    # Generates a select field for hours that defaults to the number given.
    select_hour(13)
    
    # Generates a select field for hours that defaults to the hour for the time in my_time
    # that is named 'stride' rather than 'hour'.
    select_hour(my_time, :field_name => 'stride')
    
    # Generates a select field for hours with a custom prompt. Use <tt>:prompt => true</tt> for a
    # generic prompt.
    select_hour(13, :prompt => 'Choose hour')
    
    # Generate a select field for hours in the AM/PM format
    select_hour(my_time, :ampm => true)

**`select_minute(datetime, options = {}, html_options = {})`**

Returns a select tag with options for each of the minutes 0 through 59 with the current minute selected. Also can return a select tag with options by `minute_step` from 0 through 59 with the 00 minute selected. The datetime can be either a Time or DateTime object or an integer. Override the field name using the `:field_name` option, ‘minute’ by default.

**Examples**

    my_time = Time.now + 6.hours
    
    # Generates a select field for minutes that defaults to the minutes for the time in my_time.
    select_minute(my_time)
    
    # Generates a select field for minutes that defaults to the number given.
    select_minute(14)
    
    # Generates a select field for minutes that defaults to the minutes for the time in my_time
    # that is named 'moment' rather than 'minute'.
    select_minute(my_time, :field_name => 'moment')
    
    # Generates a select field for minutes with a custom prompt. Use <tt>:prompt => true</tt> for a
    # generic prompt.
    select_minute(14, :prompt => 'Choose minutes')

**`select_month(date, options = {}, html_options = {})`**

Returns a select tag with options for each of the months January through December with the current month selected. The month names are presented as keys (what’s shown to the user) and the month numbers (1-12) are used as values (what’s submitted to the server). It’s also possible to use month numbers for the presentation instead of names – set the `:use_month_numbers` key in options to true for this to happen. If you want both numbers and names, set the `:add_month_numbers` key in options to true. If you would prefer to show month names as abbreviations, set the `:use_short_month` key in options to true. If you want to use your own month names, set the `:use_month_names` key in options to an array of 12 month names. Override the field name using the `:field_name` option, ‘month’ by default.

**Examples**

    # Generates a select field for months that defaults to the current month that
    # will use keys like "January", "March".
    select_month(Date.today)
    
    # Generates a select field for months that defaults to the current month that
    # is named "start" rather than "month".
    select_month(Date.today, :field_name => 'start')
    
    # Generates a select field for months that defaults to the current month that
    # will use keys like "1", "3".
    select_month(Date.today, :use_month_numbers => true)
    
    # Generates a select field for months that defaults to the current month that
    # will use keys like "1 - January", "3 - March".
    select_month(Date.today, :add_month_numbers => true)
    
    # Generates a select field for months that defaults to the current month that
    # will use keys like "Jan", "Mar".
    select_month(Date.today, :use_short_month => true)
    
    # Generates a select field for months that defaults to the current month that
    # will use keys like "Januar", "Marts."
    select_month(Date.today, :use_month_names => %w(Januar Februar Marts ...))
    
    # Generates a select field for months with a custom prompt. Use <tt>:prompt => true</tt> for a
    # generic prompt.
    select_month(14, :prompt => 'Choose month')

**`select_second(datetime, options = {}, html_options = {})`**

Returns a select tag with options for each of the seconds 0 through 59 with the current second selected. The datetime can be either a Time or DateTime object or an integer. Override the field name using the `:field_name` option, ‘second’ by default.

**Examples**

    my_time = Time.now + 16.minutes
    
    # Generates a select field for seconds that defaults to the seconds for the time in my_time.
    select_second(my_time)
    
    # Generates a select field for seconds that defaults to the number given.
    select_second(33)
    
    # Generates a select field for seconds that defaults to the seconds for the time in my_time
    # that is named 'interval' rather than 'second'.
    select_second(my_time, :field_name => 'interval')
    
    # Generates a select field for seconds with a custom prompt. Use <tt>:prompt => true</tt> for a
    # generic prompt.
    select_second(14, :prompt => 'Choose seconds')

**`select_time(datetime = Time.current, options = {}, html_options = {})`**

Returns a set of html select-tags (one for hour and minute). You can set `:time_separator` key to format the output, and the `:include_seconds` option to include an input for seconds.

If anything is passed in the `html_options` hash it will be applied to every select tag in the set.

**Examples**

    my_time = Time.now + 5.days + 7.hours + 3.minutes + 14.seconds
    
    # Generates a time select that defaults to the time in my_time.
    select_time(my_time)
    
    # Generates a time select that defaults to the current time (no specified time).
    select_time()
    
    # Generates a time select that defaults to the time in my_time,
    # which has fields separated by ':'.
    select_time(my_time, :time_separator => ':')
    
    # Generates a time select that defaults to the time in my_time,
    # that also includes an input for seconds.
    select_time(my_time, :include_seconds => true)
    
    # Generates a time select that defaults to the time in my_time, that has fields
    # separated by ':' and includes an input for seconds.
    select_time(my_time, :time_separator => ':', :include_seconds => true)
    
    # Generate a time select field with hours in the AM/PM format
    select_time(my_time, :ampm => true)
    
    # Generates a time select with a custom prompt. Use <tt>:prompt</tt> to true for generic prompts.
    select_time(my_time, :prompt => {:day => 'Choose day', :month => 'Choose month', :year => 'Choose year'})
    select_time(my_time, :prompt => {:hour => true}) # generic prompt for hours
    select_time(my_time, :prompt => true) # generic prompts for all

**`select_year(date, options = {}, html_options = {})`**

Returns a select tag with options for each of the five years on each side of the current, which is selected. The five year radius can be changed using the `:start_year` and `:end_year` keys in the options. Both ascending and descending year lists are supported by making `:start_year` less than or greater than `:end_year`. The date can also be substituted for a year given as a number. Override the field name using the `:field_name` option, ‘year’ by default.
Examples

    # Generates a select field for years that defaults to the current year that
    # has ascending year values.
    select_year(Date.today, :start_year => 1992, :end_year => 2007)
    
    # Generates a select field for years that defaults to the current year that
    # is named 'birth' rather than 'year'.
    select_year(Date.today, :field_name => 'birth')
    
    # Generates a select field for years that defaults to the current year that
    # has descending year values.
    select_year(Date.today, :start_year => 2005, :end_year => 1900)
    
    # Generates a select field for years that defaults to the year 2006 that
    # has ascending year values.
    select_year(2006, :start_year => 2000, :end_year => 2010)
    
    # Generates a select field for years with a custom prompt. Use <tt>:prompt => true</tt> for a
    # generic prompt.
    select_year(14, :prompt => 'Choose year')

## 12.11 自定义模板Helper类 468
视频教学：6分钟 468

rails允许将视图层的表现代码放在模板的Helper类中。
rails默认为每个控制器指定一个Helper类，而且在ERB模板中可以直接访问Helper类中的方法。
因此，我们可以将复杂的视图逻辑抽取到Helper类中定义，从而让ERB模板以简单的形式显示数据（使用raw语句）。

这些Helper类都放在app/helper目录下。命名方式是“`controller-name_helper.rb`”，例如`application_helper.rb`。当然也可以在app/helpers目录下创建自定义的Helper模块。

另外，虽然通过Helper类中的方法，可以把控制器中的方法变为Helper，但这样做会破坏封装。

步骤：

1. 创建books控制器时，会在app/helpers文件夹下创建一个`books_helper.rb`文件。
2. 在该文件增加一个方法，如`def index_helper books`
3. 在ERB模板中直接输出`index_helper`方法的返回值：

    <% raw index_helper @books %>   # raw是安全输出方法，see ror文档

## 12.12 常见问题解答 470
### 12.12.1 Rails与XML的简单问题 470
### 12.12.2 XML模板生成XML问题 470
### 12.12.3 图片的`link_to`用法问题 471
### 12.12.4 去掉css/js/img后面的时间戳问题 471
### 12.12.5 格式化数字问题 472
### 12.12.6 将`link_to` 的超链接字体变大问题 472
### 12.12.7 关于form和url附加参数的问题 473
### 12.12.8 多选和级联下拉列表问题 473
## 12.13 习题 474

---
# 第13章 页面之间的信息交流 477
## 13.1 浅谈Session 478
视频教学：5分钟 478
Session会话。是指一个终端用户与交互系统进行通信的时间间隔。通常指从注册进入系统到注销退出系统之间所经过的时间。
HTTP协议是一种无状态的协议。当用户发送请求，服务器作出响应，之间的关系是离散的。
Session可以为客户端分配一个编号SessionID。SessionID是随机生成的Session文件的文件名。不同的用户会话欣喜会有不同的Session对象来保存。
一般情况下，Session对象是有声明周期的。如果规定时间内没有对变量进行刷新，系统会中止这些变量。

rails提供的Session对象是一个类似hash结构的，被序列化的，保存的信息同样可以跨越多次请求持续存在。
rails提供的Session对象将数据保存到了客户端。这个过程分两步：

1. 根据来自不同用户的会话，创建由32个十六进制数组成的键，即总共有1632种可能的组合。即SessionID。
2. rails对SessionID进行保存，当程序获得请求时，rails将找出与之对应的SessionID。 

SessionID对象里面应该存入什么呢？你想存放的一切。不过注意下面：

- 必须是可序列化的。如I/O就不能存放进里面。
- 尽量不要将拥有大量数据的对象存入。否则这些信息可能不会被更新。
- 尽量不要将关键信息存入session对象。关键信息要保存到数据库，再从Session中引用这些数据。否则一旦关闭会话，该信息就会丢失。

## 13.2 为登录用户创建会话 479
视频教学：5分钟 479
### 13.2.1 基础知识——创建Session 479
设置Session会话：`session[:session-name]=value`
例如存储一个userid的值：`session[:userid]=123`

获取会话的值：`session[:session-name]`
清除会话：`session[:session-name]=nil`
### 13.2.2 实例描述 480
### 13.2.3 实例应用 480

1. 创建数据表 id name pass 
2. 创建支架
3. 在users控制器文件中添加一个登录用户的控制器login1。
4. 在app/view/users/文件夹下创建login1.html.erb：

        <% form_fag :action=>:login do %>
        <TR>
          <TD align=right height=30>用户名：</TD>
          <TD align=middle colSpan=2 height=30><%= text_field :user,:name,:class=>"txt" %></TD>
        </TR>
        <TR>
          <TD align=right height=30>密　码：</TD>
          <TD align=middle colSpan=2 height=30><%= text_field :user,:pass ,:class=>"txt"%></TD>
        </TR>
        <TR>
          <TD colspan="2">&nbsp;&nbsp;
             <%= submit_tag '登录',:class=>"btn",:value=>" 提 交 " %></TD>
          <TD class=style2 >&nbsp;&nbsp;
          <INPUT  type=reset value=" 取&nbsp;消 " class="btn" name=reset></TD>
        </TR>
        <% end %>

5. 在users控制器文件中添加一个login控制器。

          def login
             uname=params[:user][:name]
             upass=params[:user][:pass]
             user=User.find_by_name_and_pass(uname,upass)
             session[:user_id]=nil     
             if user
               sessions[:user_id]=user.id
               redirect_to "/users/index",:notice => '您已经成功登录！'
             else
               redirect_to "/users/dealfail",:notice => '失败'
             end    
          end

6. 在users控制器文件中，在index方法下添加代码：`@user=User.find(sesion[:user_id]`
7. 修改app/views/users/index.html.erb的代码：`<p> 您好！<%=@user.name %>，欢迎您！</p>`
8. 在users控制器文件中，添加dealfail方法：`def dealfail ~ end`。
9. 在app/views/users文件夹中，创建一个名称为dealfail.html.erb文件。并添加代码`<p>您的用户名或者密码错误，请重新登录。</p>`
10. 修改config/routes.rb文件，创建路由：

        match "users/deal" => "users#deal"
        match "users/dealfail" => "users#dealfail"
        match "users/login" => "users#login"
        match "users/login1" => "users#login1"
        match "users/index" => "users#index"
        root :to => "users#login1"
        resource :users

### 13.2.4 运行结果 482
### 13.2.5 实例分析 483
## 13.3 网站中购物车的实现 483
视频教学：7分钟 483
### 13.3.1 实例描述 483

1. 创建cart数据表，包含id、name、details、img、price
2. 使用scaffold生成框架
3. 修改database.yml文件
4. 修改app/views/carts/index.html.erb
5. 在app/controller/CartsController.rb添加:1)`add_to_cart`方法；2）查看购物车的checkout方法；3）清空购物车的`empty_cart`方法
6. 在app/views/carts/添加checkout.html.erb文件、`empty_cart.html.erb`文件
7. 修改route文件，添加路由。 

### 13.3.2 实例应用 483
### 13.3.3 运行结果 486
### 13.3.4 实例分析 487
## 13.4 和我一起学Cookie 487
视频教学：13分钟 487
### 13.4.1 Cookie的工作原理 487
cookie是通过HTTP Headers从服务器返回到浏览器上的。
首先，服务器在响应的过程中，利用Set-Cookie header创建一个cookie。然后浏览器在请求中通过cookie header包含已经创建的cookie，并将其返回到服务器，从而完成浏览器的认证。
cookie是与web站点相关联，而不是与web站点中的具体页面相关。无论用户请求浏览站点的哪个页面，浏览器和服务器都将交换网站的cookie。
### 13.4.2 Cookie的生命周期 488
浏览器会根据电脑中的cookie设置选择是否保存这些数据。如果不允许，则浏览器关闭后，这些数据就会消失。

cookie以两种方式存在：

- 临时的，只在浏览器上保存一段规定的时间。一旦超过这个规定，该cookie就会被系统清除。
- 持续的，保存在用户的cookie文件中，等到下一次用户返回时，依然可以调用。

cookie提供了一个Expires属性。如果不设置这个属性，cookie只在浏览网页期间有效，关闭时，这个cookie自动消失。
至于应该设置为多长主要取决于cookie的用途。如果你要统计网站的访问量，可以设置为1年或者更长时间。

### 13.4.3 Cookie的一些属性 488

    set-Cookie: NAME=VALUE;                # 必有。cookie名称。不含分号逗号空格等字符。
    EXPIRES=week, DD-MM-YY HH:MM:SS GMT;   # 可选，确定有效中止日期。
    Path=PATH;                             # 可选，确定web服务器哪些路径下的页面可获取cookie。
    Domin=DOMAIN_NAEM                      # 可选，确定哪些internet域的web服务器可以读取浏览器的cookie。
    SECURE                                 # 可选，只有当HTTPS时，浏览器才向服务器提交响应的cookie。

### 13.4.4 Cookie的用途 489
帮助web站点保存有关访问者的信息。
在浏览网站时，网站存储在你机器上的一个小文本文件，记录了你的用户ID、密码、浏览过的网页、停留的时间等。再次来到该网站时，网站通过读取cookie，得知你的相关信息，就可以作出相应的动作。例如，个性化的页面、免密码登录等等。
具体来说：

- 网站能精确知道有多少人浏览过；
- 网站能保存用户的设置；
- 电子商务站点能够实现像购物车、快速结帐之类的东西。

## 13.5 Cookie的使用 490
视频教学：8分钟 490
### 13.5.1 基础知识——创建Cookie 490
设置cookie：`cookies[:cookieName]={:value=>"value", :expires=>time, :path=>"/", :domain=>"domain", :secure}`
获取cookie的值：`myname=cookies[:cookieName]`
删除cookie的值：`cookies.delete :cookieName`
### 13.5.2 实例描述 491
### 13.5.3 实例应用 491
在controller文件的index方法设置cookie；
在controller文件的show等方法读取cookie。
### 13.5.4 运行结果 492
### 13.5.5 实例分析 492
## 13.6 显示购物车中商品的详细信息 492
视频教学：7分钟 493
### 13.6.1 实例描述 493
个人认为这里没有必要用cookie。
### 13.6.2 实例应用 493
### 13.6.3 运行结果 493
### 13.6.4 实例分析 494
## 13.7 统计网站的浏览次数 494
视频教学：4分钟 495
### 13.7.1 实例描述 495
### 13.7.2 实例应用 495

1. 在config/environment.rb文件中，声明一个全局变量：`$application=0`
2. 在控制器index方法中添加代码：`$application +=1`
3. 在index.html.erb文件中添加代码：`<p><h2>此网页第<% $application %>次被浏览</h2></p>`

不过，如果服务器被关闭，$application变量就会被清空。
【kinder:note: 其实可以将次数读入一个文件，让erb模板从该文件读入次数即可。】

### 13.7.3 运行结果 495
### 13.7.4 实例分析 496
## 13.8 “我”的传值 496
视频教学： 8分钟 496

使用scaffold命令生成框架时，产生的flash[:notice]可以进行页面传值。
使用flash[:notice]和使用`render :text`传值显示的效果是不同的。使用flash[:notice]可以进行跨页面传值，并且原先显示的效果可以正常显示。而使用`render :text`传值的话，不会显示原先的效果。
### 13.8.1 实例描述 496
### 13.8.2 实例应用 496

1. 在相应控制器添加代码：`flash[:notice]="text"`
2. 在对应的模板文件添加代码：`<%= notice %>`

### 13.8.3 运行结果 497
### 13.8.4 实例分析 497
## 13.9 常见问题解答 498
### 13.9.1 会话中的Session问题 498
### 13.9.2 Ruby中的Cookie问题 498
## 13.10 习题 499

---
# 第14章 在页面上实现异步交互数据 501
## 14.1 初识Ajax 502
视频教学：11分钟 502
### 14.1.1 基础知识——Ajax简介 502
Ajax即“Asynchronous JavaScript and XML”（异步JavaScript和XML)，Ajax并非缩写词，而是由Jesse James Gaiiett创造的名词，是指一种创建交互式网页应用的网页开发技术。
#### 14.1.1.1 认识Ajax

其精彩之处在于它是一种异步交互技术，可以使用户不必等待页面加载，就可以实现浏览器和服务器的请求响应操作。

Ajax技术总体主要包含一下几点：

- 基于web标准（XHTML+CSS）的展示；
- 使用DOM进行动态显示和交互；
- 使用XMLHttpRequest对象与服务器通信；
- 使用XML和XSLT进行数据交换；
- 使用JavaScript整合所有相关技术。

Ajax需要使用支持Ajax技术的web浏览器作为运行平台。
#### 14.1.1.2 Ajax的浏览器兼容问题
由于各大浏览器不同的设计，Ajax的使用方法也不大一样。
以XMLHttpRequest对象为例。不同浏览器使用不同方式创建该对象。IE浏览器将其作为AtiveX控件集成到浏览器中，其他几个主流浏览器直接作为一般的JavaScript对象来创建。因此，使用该对象的时候要根据不同的浏览器进行不同的判断，然后使用不同方法创建相应的XMLHttpRequest对象。
【kinder:note: 下面的代码来自维基：

    // Provide the XMLHttpRequest class for IE 5.x-6.x:
    // Other browsers (including IE 7.x-8.x) ignore this
    //   when XMLHttpRequest is predefined
    var xmlHttp;
    if (typeof XMLHttpRequest != "undefined") {
        xmlHttp = new XMLHttpRequest();
    } else if (window.ActiveXObject) {
        var aVersions = ["Msxml2.XMLHttp.5.0", "Msxml2.XMLHttp.4.0", "Msxml2.XMLHttp.3.0", "Msxml2.XMLHttp", "Microsoft.XMLHttp"];
        for (var i = 0; i < aVersions.length; i++) {
            try {
                xmlHttp = new ActiveXObject(aVersions[i]);
                break;
            } catch (e) {}
        }
    }

#### 14.1.1.3 Ajax的原理
在Ajax应用程序中，浏览器接收到用户在页面的操作请求以后，就可以使用XMLHttpRequest像浏览器一样向服务器发送请求并接收响应信息。整个过程，页面没有任何变化，直至页面更新。图解如下：

    +---------------------+    +------+
    | +-----+   +-----+ ------>|      |
    | |     |<--| XHR |   |    |      |
    | |     |   +-----+ <------|      |    
    | |     |      ^      |    | web  |
    | | DOM |      |      |    |服务器|
    | |     |   +-----+   |    |      |
    | |     |-->| 事件|   |    |      |
    | +-----+   +-----+   |    |      |
    +---------------------+    +------+

#### 14.1.1.4 XMLHttpRequest对象

XMLHttpRequest对象的**创建方法**see上面14.1.1.2示例。

**属性**如下：
名称 ------------------ 说明
`readyState` ---------- 通信的状态。取值范围为0到4：当XMLHttpRequest对象把一个HTTP请求发送到服务器，到接收到服务器响应信息，整个过程将经历5种状态。
`onreadystatechange` -- 设置回调事件处理程序。当readyState属性的值改变时，会激发这个事件。
`responseText` -------- 服务器返回text/html格式的文档。
`responseXML` --------- 服务器返回XML格式的文档。
`status` -------------- 描述了HTTP响应short类型的状态代码。
`statusText` ---------- HTTP响应状态代码的文本。

其中**readyState**属性最为常用。属性具体代码含义：
取值 	描述
0	描述一种"未初始化"状态；此时，已经创建一个XMLHttpRequest对象，但是还没有初始化。
1	描述一种"发送"状态；此时，代码已经调用了XMLHttpRequest open()方法并且XMLHttpRequest已经准备好把一个请求发送到服务器。
2	描述一种"发送"状态；此时，已经通过send()方法把一个请求发送到服务器端，但是还没有收到一个响应。
3	描述一种"正在接收"状态；此时，已经接收到HTTP响应头部信息，但是消息体部分还没有完全接收结束。
4	描述一种"已加载"状态；此时，响应已经被完全接收。

XMLHttpRequest对象的**标准方法**，其中第2、3种方法只有在XMLHttpRequest对象的readyState值为3、4的时候才可用。

1. abort() ------------------- 取消当前请求
2. getAllResourceHeaders() --- 获取相应的全部http头信息(键/值对)
3. getResourceHeader(key) ---- 检索响应的头部只（从响应信息中获取指定的http头信息）
4. open(method,url) ---------- 使用请求方式（GET或者POST）和请求地址（URL）初始化一个XMLHttpRequest对象。这是该方法最常用的重载形式。（创建一个新的http请求，并指定此请求的方法、URL、以及验证信息（用户名/密码））。
5. send(args) ---------------- 发送请求，参数是提交的字符串信息（发送请求到http服务器并接收回应）
6. setRequestHeader(key,value) -- 设置请求的http头部值。

### 14.1.2 实例描述 505
### 14.1.3 实例应用 505

1. 在控制器创建一个返回当前时间的动作now

    def now
      respond_to do |format|
        format.html { render :layout => false }  # 不使用当前的页面框架
        format.xml { render :xml => @ajaxes }

2. 创建对应的视图文件now.html.erb并添加代码：`<% Time.now %>`
3. 在要显示时间的的页面上如time.htm.erb上添加代码：

    <%= javascript_include_tag "time.js" %>
    <div id="time">
        <div id="now"></div>
    </div>

4. 在public/javascripts目录中创建一个JS文件，名为time.js：

    var xmlRequest;
    function CreateRequest(){
        if(window.ActiveXObject)
        {
            /* 如果浏览器支持 ActiveX 对象，就使用ActiveX对象创建一个 XMLHttpRequest 对象
                支持 IE 浏览器*/
            return new ActiveXObject("Microsoft.XMLHTTP");
        }
        else if(window.XMLHttpRequest)
        {
            /* 如果浏览器支持 XMLHttpRequest 对象，就直接创建一个 XMLHttpRequest 对象
                支持其它主流浏览器（FF,Chome,Safari等）*/
            return new XMLHttpRequest();
        }
    }
    
    function ResponseHandler(){
        if(xmlRequest.readyState == 4 && xmlRequest.status == 200){
            /* 如果通信成功，并且响应正常，执行以下操作 */
    
            var reqContent = xmlRequest.responseText;
            document.getElementById("now").innerHTML = reqContent;
        }
    }
    
    function AjaxAccess(){
        xmlRequest = CreateRequest();  //创建XMLHttpRequest对象
        xmlRequest.onreadystatechange = ResponseHandler;  //设置回调函数
        xmlRequest.open("GET","http://localhost:3000/ajaxes/now");  //初始化请求对象
        xmlRequest.send(null);	  //发送请求信息
    }
    
    window.onload = function(){
        AjaxAccess();
    }

5. 添加路由配置：

    match "ajaxes/now" => "ajaxes#now"
    match "ajaxes/time" => "ajaxes#time"

### 14.1.4 运行结果 507
### 14.1.5 实例分析 507
## 14.2 使用Ajax查看当前页面源代码 507
视频教学：5分钟 508
### 14.2.1 基础知识——jQuery中的Ajax实现 508
jQuery对JavaScript中的Ajax操作进行封装，jQuery实现Ajax功能最大的一个优势就是大量地缩减了代码量，简化了开发人员的工作；同时消除了各个浏览器之间的差异，提高了程序的兼容性。
$.ajax()方法的语法：`var xmlReq = $.ajax(options);`
这个方法返回一个XMLHttpRequest对象。该方法只有一个object类型的参数，该参数属性都是以“键/值”对的形式设置的。用于设置Ajax请求的参数，如请求方式、URL、回调函数等等。所有属性都是可选值，常用属性如下。
【kinder:note: 下面来自：` http://www.w3school.com.cn/jquery/ajax_ajax.asp`】

> #### 实例  
>   
> 通过 AJAX 加载一段文本：  
>   
> jQuery 代码：  
>   
>     $(document).ready(function(){  
>       $("#b01").click(function(){  
>       htmlobj=$.ajax({url:"/jquery/test1.txt",async:false});  
>       $("#myDiv").html(htmlobj.responseText);  
>       });  
>     });  
>   
> HTML 代码：  
>   
>     <div id="myDiv"><h2>Let AJAX change this text</h2></div>  
>     <button id="b01" type="button">Change Content</button>  
>   
> #### 定义和用法  
>   
> ajax() 方法通过 HTTP 请求加载远程数据。  
>   
> 该方法是 jQuery 底层 AJAX 实现。简单易用的高层实现见 $.get, $.post 等。$.ajax() 返回其创建的 XMLHttpRequest 对象。大多数情况下你无需直接操作该函数，除非你需要操作不常用的选项，以获得更多的灵活性。  
>   
> 最简单的情况下，$.ajax() 可以不带任何参数直接使用。  
>   
> 注意：所有的选项都可以通过 $.ajaxSetup() 函数来全局设置。  
>   
> 语法  
>   
>      jQuery.ajax([settings])  
>   
> settings -- 可选。用于配置 Ajax 请求的键值对集合。可以通过 $.ajaxSetup() 设置任何选项的默认值。  
>   
>   
> ##### 参数  
>   
> **options**  
> 类型：Object  
> 可选。AJAX 请求设置。所有选项都是可选的。  
>   
> **async**  
>     类型：Boolean  
>     默认值: true。默认设置下，所有请求均为异步请求。如果需要发送同步请求，请将此选项设置为 false。  
>     注意，同步请求将锁住浏览器，用户其它操作必须等待请求完成才可以执行。  
>   
> **beforeSend(XHR)**  
>     类型：Function  
>     发送请求前可修改 XMLHttpRequest 对象的函数，如添加自定义 HTTP 头。  
>     XMLHttpRequest 对象是唯一的参数。  
>     这是一个 Ajax 事件。如果返回 false 可以取消本次 ajax 请求。  
>   
> **cache**  
>     类型：Boolean  
>     默认值: true，dataType 为 script 和 jsonp 时默认为 false。设置为 false 将不缓存此页面。  
>     jQuery 1.2 新功能。  
>   
> **complete(XHR, TS)**  
>     类型：Function  
>     请求完成后回调函数 (请求成功或失败之后均调用)。  
>     参数： XMLHttpRequest 对象和一个描述请求类型的字符串。  
>     这是一个 Ajax 事件。  
>   
> **contentType**  
>     类型：String  
>     默认值: "application/x-www-form-urlencoded"。发送信息至服务器时内容编码类型。  
>     默认值适合大多数情况。如果你明确地传递了一个 content-type 给 $.ajax() 那么它必定会发送给服务器（即使没有数据要发送）。  
>   
> **context**  
>     类型：Object  
>     这个对象用于设置 Ajax 相关回调函数的上下文。也就是说，让回调函数内 this 指向这个对象（如果不设定这个参数，那么 this 就指向调用本次 AJAX 请求时传递的 options 参数）。比如指定一个 DOM 元素作为 context 参数，这样就设置了 success 回调函数的上下文为这个 DOM 元素。  
>     就像这样：  
>       
>     $.ajax({ url: "test.html", context: document.body, success: function(){  
>             $(this).addClass("done");  
>           }});  
>             
> **data**  
>     类型：String  
>     发送到服务器的数据。将自动转换为请求字符串格式。GET 请求中将附加在 URL 后。查看 processData 选项说明以禁止此自动转换。必须为 Key/Value 格式。如果为数组，jQuery 将自动为不同值对应同一个名称。如 {foo:["bar1", "bar2"]} 转换为 '&foo=bar1&foo=bar2'。  
>   
> **dataFilter**  
>     类型：Function  
>     给 Ajax 返回的原始数据的进行预处理的函数。提供 data 和 type 两个参数：data 是 Ajax 返回的原始数据，type 是调用 jQuery.ajax 时提供的 dataType 参数。函数返回的值将由 jQuery 进一步处理。  
>   
> **dataType**  
>     类型：String  
>     预期服务器返回的数据类型。如果不指定，jQuery 将自动根据 HTTP 包 MIME 信息来智能判断，比如 XML MIME 类型就被识别为 XML。在 1.4 中，JSON 就会生成一个 JavaScript 对象，而 script 则会执行这个脚本。随后服务器端返回的数据会根据这个值解析后，传递给回调函数。可用值:  
>       
> -        "xml": 返回 XML 文档，可用 jQuery 处理。  
> -        "html": 返回纯文本 HTML 信息；包含的 script 标签会在插入 dom 时执行。  
> -        "script": 返回纯文本 JavaScript 代码。不会自动缓存结果。除非设置了 "cache" 参数。注意：在远程请求时(不在同一个域下)，所有 POST 请求都将转为 GET 请求。（因为将使用 DOM 的 script标签来加载）  
> -        "json": 返回 JSON 数据 。  
> -        "jsonp": JSONP 格式。使用 JSONP 形式调用函数时，如 "myurl?callback=?" jQuery 将自动替换 ? 为正确的函数名，以执行回调函数。  
> -        "text": 返回纯文本字符串  
>   
> **error**  
>     类型：Function  
>     默认值: 自动判断 (xml 或 html)。请求失败时调用此函数。  
>     有以下三个参数：XMLHttpRequest 对象、错误信息、（可选）捕获的异常对象。  
>     如果发生了错误，错误信息（第二个参数）除了得到 null 之外，还可能是 "timeout", "error", "notmodified" 和 "parsererror"。  
>     这是一个 Ajax 事件。  
>   
> **global**  
>     类型：Boolean  
>     是否触发全局 AJAX 事件。默认值: true。设置为 false 将不会触发全局 AJAX 事件，如 ajaxStart 或 ajaxStop 可用于控制不同的 Ajax 事件。  
>   
> **ifModified**  
>     类型：Boolean  
>     仅在服务器数据改变时获取新数据。默认值: false。使用 HTTP 包 Last-Modified 头信息判断。在 jQuery 1.4 中，它也会检查服务器指定的 'etag' 来确定数据没有被修改过。  
>   
> **jsonp**  
>     类型：String  
>     在一个 jsonp 请求中重写回调函数的名字。这个值用来替代在 "callback=?" 这种 GET 或 POST 请求中 URL 参数里的 "callback" 部分，比如 {jsonp:'onJsonPLoad'} 会导致将 "onJsonPLoad=?" 传给服务器。  
>   
> **jsonpCallback**  
>     类型：String  
>     为 jsonp 请求指定一个回调函数名。这个值将用来取代 jQuery 自动生成的随机函数名。这主要用来让 jQuery 生成度独特的函数名，这样管理请求更容易，也能方便地提供回调函数和错误处理。你也可以在想让浏览器缓存 GET 请求的时候，指定这个回调函数名。  
>   
> **password**  
>     类型：String  
>     用于响应 HTTP 访问认证请求的密码  
>   
> **processData**  
>     类型：Boolean  
>     默认值: true。默认情况下，通过data选项传递进来的数据，如果是一个对象(技术上讲只要不是字符串)，都会处理转化成一个查询字符串，以配合默认内容类型 "application/x-www-form-urlencoded"。如果要发送 DOM 树信息或其它不希望转换的信息，请设置为 false。  
>   
> **scriptCharset**  
>     类型：String  
>     只有当请求时 dataType 为 "jsonp" 或 "script"，并且 type 是 "GET" 才会用于强制修改 charset。通常只在本地和远程的内容编码不同时使用。  
>   
> **success**  
>     类型：Function  
>     请求成功后的回调函数。  
>     参数：由服务器返回，并根据 dataType 参数进行处理后的数据；描述状态的字符串。  
>     这是一个 Ajax 事件。  
>   
> **traditional**  
>     类型：Boolean  
>     如果你想要用传统的方式来序列化数据，那么就设置为 true。请参考工具分类下面的 jQuery.param 方法。  
>   
> **timeout**  
>     类型：Number  
>     设置请求超时时间（毫秒）。此设置将覆盖全局设置。  
>   
> **type**  
>     类型：String  
>     默认值: "GET")。请求方式 ("POST" 或 "GET")， 默认为 "GET"。注意：其它 HTTP 请求方法，如 PUT 和 DELETE 也可以使用，但仅部分浏览器支持。  
>   
> **url**  
>     类型：String  
>     默认值: 当前页地址。发送请求的地址。  
>   
> **username**  
>     类型：String  
>     用于响应 HTTP 访问认证请求的用户名。  
>   
> **xhr**  
>     类型：Function  
>     需要返回一个 XMLHttpRequest 对象。默认在 IE 下是 ActiveXObject 而其他情况下是 XMLHttpRequest 。用于重写或者提供一个增强的 XMLHttpRequest 对象。这个参数在 jQuery 1.3 以前不可用。  
>       
> ##### 回调函数  
>   
> 如果要处理 $.ajax() 得到的数据，则需要使用回调函数：beforeSend、error、dataFilter、success、complete。  
>   
> beforeSend  
> 在发送请求之前调用，并且传入一个 XMLHttpRequest 作为参数。  
> error  
> 在请求出错时调用。传入 XMLHttpRequest 对象，描述错误类型的字符串以及一个异常对象（如果有的话）  
> dataFilter  
> 在请求成功之后调用。传入返回的数据以及 "dataType" 参数的值。并且必须返回新的数据（可能是处理过的）传递给 success 回调函数。  
> success  
> 当请求之后调用。传入返回后的数据，以及包含成功代码的字符串。  
> complete  
> 当请求完成之后调用这个函数，无论成功或失败。传入 XMLHttpRequest 对象，以及一个包含成功或错误代码的字符串。  
>   
> ##### 数据类型  
>   
> $.ajax() 函数依赖服务器提供的信息来处理返回的数据。如果服务器报告说返回的数据是 XML，那么返回的结果就可以用普通的 XML 方法或者 jQuery 的选择器来遍历。如果见得到其他类型，比如 HTML，则数据就以文本形式来对待。  
> 通过 dataType 选项还可以指定其他不同数据处理方式。除了单纯的 XML，还可以指定 html、json、jsonp、script 或者 text。  
> 其中，text 和 xml 类型返回的数据不会经过处理。数据仅仅简单的将 XMLHttpRequest 的 responseText 或 responseHTML 属性传递给 success 回调函数。  
> 注意：我们必须确保网页服务器报告的 MIME 类型与我们选择的 dataType 所匹配。比如说，XML的话，服务器端就必须声明 text/xml 或者 application/xml 来获得一致的结果。  
> 如果指定为 html 类型，任何内嵌的 JavaScript 都会在 HTML 作为一个字符串返回之前执行。类似地，指定 script 类型的话，也会先执行服务器端生成 JavaScript，然后再把脚本作为一个文本数据返回。  
> 如果指定为 json 类型，则会把获取到的数据作为一个 JavaScript 对象来解析，并且把构建好的对象作为结果返回。为了实现这个目的，它首先尝试使用 JSON.parse()。如果浏览器不支持，则使用一个函数来构建。  
> JSON 数据是一种能很方便通过 JavaScript 解析的结构化数据。如果获取的数据文件存放在远程服务器上（域名不同，也就是跨域获取数据），则需要使用 jsonp 类型。使用这种类型的话，会创建一个查询字符串参数 callback=? ，这个参数会加在请求的 URL 后面。服务器端应当在 JSON 数据前加上回调函数名，以便完成一个有效的 JSONP 请求。如果要指定回调函数的参数名来取代默认的 callback，可以通过设置 $.ajax() 的 jsonp 参数。  
> 注意：JSONP 是 JSON 格式的扩展。它要求一些服务器端的代码来检测并处理查询字符串参数。  
> 如果指定了 script 或者 jsonp 类型，那么当从服务器接收到数据时，实际上是用了`<script>`标签而不是 XMLHttpRequest 对象。这种情况下，$.ajax() 不再返回一个 XMLHttpRequest 对象，并且也不会传递事件处理函数，比如 beforeSend。  
>   
> ##### 发送数据到服务器  
>   
> 默认情况下，Ajax 请求使用 GET 方法。如果要使用 POST 方法，可以设定 type 参数值。这个选项也会影响 data 选项中的内容如何发送到服务器。  
> data 选项既可以包含一个查询字符串，比如 key1=value1&key2=value2 ，也可以是一个映射，比如 {key1: 'value1', key2: 'value2'} 。如果使用了后者的形式，则数据再发送器会被转换成查询字符串。这个处理过程也可以通过设置 processData 选项为 false 来回避。如果我们希望发送一个 XML 对象给服务器时，这种处理可能并不合适。并且在这种情况下，我们也应当改变 contentType 选项的值，用其他合适的 MIME 类型来取代默认的 application/x-www-form-urlencoded 。  
>   
> ##### 高级选项  
>   
> global 选项用于阻止响应注册的回调函数，比如 .ajaxSend，或者 ajaxError，以及类似的方法。这在有些时候很有用，比如发送的请求非常频繁且简短的时候，就可以在 ajaxSend 里禁用这个。  
> 如果服务器需要 HTTP 认证，可以使用用户名和密码可以通过 username 和 password 选项来设置。  
> Ajax 请求是限时的，所以错误警告被捕获并处理后，可以用来提升用户体验。请求超时这个参数通常就保留其默认值，要不就通过 jQuery.ajaxSetup 来全局设定，很少为特定的请求重新设置 timeout 选项。  
> 默认情况下，请求总会被发出去，但浏览器有可能从它的缓存中调取数据。要禁止使用缓存的结果，可以设置 cache 参数为 false。如果希望判断数据自从上次请求后没有更改过就报告出错的话，可以设置 ifModified 为 true。  
> scriptCharset 允许给 `<script>` 标签的请求设定一个特定的字符集，用于 script 或者 jsonp 类似的数据。当脚本和页面字符集不同时，这特别好用。  
> Ajax 的第一个字母是 asynchronous 的开头字母，这意味着所有的操作都是并行的，完成的顺序没有前后关系。$.ajax() 的 async 参数总是设置成true，这标志着在请求开始后，其他代码依然能够执行。强烈不建议把这个选项设置成 false，这意味着所有的请求都不再是异步的了，这也会导致浏览器被锁死。  
> $.ajax 函数返回它创建的 XMLHttpRequest 对象。通常 jQuery 只在内部处理并创建这个对象，但用户也可以通过 xhr 选项来传递一个自己创建的 xhr 对象。返回的对象通常已经被丢弃了，但依然提供一个底层接口来观察和操控请求。比如说，调用对象上的 .abort() 可以在请求完成前挂起请求。  

### 14.2.2 实例描述 509
### 14.2.3 实例应用 509

1. 在控制器添加source方法：

    def source
      respond_to do |format|
        format.html
        format.xml  { render :xml => @ajaxes }
    end

2. 在source.html.erb添加代码：

    <%= javascript_include_tag "source.js" %>
    
    <div id="bd">
      <textarea id="source">
      </textarea>
    </div>

3. 创建source.js代码：

    $(document).ready(function(){
    	$.ajax({
    		type:'GET',
    		url:'http://localhost:3000/ajaxes/source',
    		success:function(reqContent)   // 【kinder:unknow: 这个reqContent是干嘛的？】
    		{
    			$("#source").text(reqContent);   // 进行文本替换
    		},
            error:function(xhr,r,e){    // 【kinder:unknow:r,e 是什么意思？】
                   alert(e);  
            }
        });
    });

4. 引入对jQuery类库的引用。为了能在所有页面中使用，应在`app/views/layouts/application.html.erb`文件添加代码：`<%= javascript_include_tag "jquery.min.js" %>`
5. 配置路由：`match "ajaxes/source"=>"ajaxes#source"`

### 14.2.4 运行结果 510
### 14.2.5 实例分析 510
## 14.3 异步刷新聊天室信息 510
视频教学：7分钟 511
### 14.3.1 基础知识——jQuery元素的加载动作 511
【kinder:note: 下面的资料来自：`http://www.w3school.com.cn/jquery/ajax_load.asp`】

> load() 方法通过 AJAX 请求从服务器加载数据，并把返回的数据放置到指定的元素中。
> 
> 注释：还存在一个名为 load 的 jQuery 事件方法。调用哪个，取决于参数。
> 
> 语法
> 
>     load(url,data,function(response,status,xhr))
> 
> 参数 ---------------------------- 描述
> url ---------------------------- 规定要将请求发送到哪个 URL。
> data --------------------------- 可选。规定连同请求发送到服务器的数据。
> function(response,status,xhr) -- 可选。规定当请求完成时运行的函数。
> 
> 额外的参数：
> 
>     response - 包含来自请求的结果数据
>     status - 包含请求的状态（"success", "notmodified", "error", "timeout" 或 "parsererror"）
>     xhr - 包含 XMLHttpRequest 对象
> 
> 详细说明
> 
> 该方法是最简单的从服务器获取数据的方法。它几乎与 $.get(url, data, success) 等价，不同的是它不是全局函数，并且它拥有隐式的回调函数。当侦测到成功的响应时（比如，当 textStatus 为 "success" 或 "notmodified" 时），.load() 将匹配元素的 HTML 内容设置为返回的数据。这意味着该方法的大多数使用会非常简单：
> 
>      $("#result").load("ajax/test.html");
> 
> 如果提供回调函数，则会在执行 post-processing 之后执行该函数：
> 
>     $("#result").load("ajax/test.html", function() {
>       alert("Load was performed.");
>     });
> 
> 上面的两个例子中，如果当前文档不包含 "result" ID，则不会执行 .load() 方法。
> 
> 如果提供的数据是对象，则使用 POST 方法；否则使用 GET 方法。
>
> 加载页面片段
> 
> .load() 方法，与 $.get() 不同，允许我们规定要插入的远程文档的某个部分。这一点是通过 url 参数的特殊语法实现的。如果该字符串中包含一个或多个空格，紧接第一个空格的字符串则是决定所加载内容的 jQuery 选择器。
> 
> 我们可以修改上面的例子，这样就可以使用所获得文档的某部分：
> 
>     $("#result").load("ajax/test.html #container");
> 
> 如果执行该方法，则会取回 ajax/test.html 的内容，不过然后，jQuery 会解析被返回的文档，来查找带有容器 ID 的元素。该元素，连同其内容，会被插入带有结果 ID 的元素中，所取回文档的其余部分会被丢弃。
> 
> jQuery 使用浏览器的 .innerHTML 属性来解析被取回的文档，并把它插入当前文档。在此过程中，浏览器常会从文档中过滤掉元素，比如 `<html>`, `<title>` 或 `<head>` 元素。结果是，由 .load() 取回的元素可能与由浏览器直接取回的文档不完全相同。
> 
> 注释：由于浏览器安全方面的限制，大多数 "Ajax" 请求遵守同源策略；请求无法从不同的域、子域或协议成功地取回数据。

### 14.3.2 实例描述 511
### 14.3.3 实例应用 511

1. 在控制器创建message方法和chat方法

      def messages
        msgs = []
        msgs << "<div><span class=name>ITZCN</span>&nbsp;&nbsp;<span class=time>12：25：02</span></div><div class=msg>Hello !</div>"
        msgs << "<div><span class=name>访客1</span>&nbsp;&nbsp;<span class=time>12：25：32</span></div><div class=msg>Hello ,ITZCN<br>Good morning!</div>"
        msgs << "<div><span class=name>ITZCN</span>&nbsp;&nbsp;<span class=time>12：26：13</span></div><div class=msg>Good morning!</div>"
        msgs << "<div><span class=name>访客1</span>&nbsp;&nbsp;<span class=time>12：27：02</span></div><div class=msg>我想问一个问题，</div>"
    
        length = session[:num].to_i
        @messages = msgs[0, length]
        session[:num] = length + 1
    
        respond_to do |format|
          format.html { render :layout => false }
          format.xml  { render :xml => @ajaxes }
        end
      end
    
      def chat
        respond_to do |format|
          format.html
          format.xml  { render :xml => @ajaxes }
        end
      end

2. 在message.html.erb添加聊天信息输出代码

    <%
       @messages.each do |item|
    %>
    <%= raw item %>
    <%
       end
    %>

3. 在聊天界面设置一个显示聊天信息的容器：chat.html.erb，并设置好css文件。下面是chat.html.erb

    <%= javascript_include_tag "chat.js" %>
    
    <div id="chat">
    
      <!-- 显示聊天信息列表 -->
      <div id="messages">
      </div>
    
    </div>

4. 创建chat.js文件

      function LoadMessages(){
        /* 要访问的页面URL */
        var url = "http://localhost:3000/ajaxes/messages";
        $("#messages").load(url);  //加载相应内容
      }
    
      $(function(){
          setInterval("LoadMessages()",2000); //按照2秒的周期调用上面的LoadMessages函数。
      });

5. 配置路由 

    match "ajaxes/message"=>"ajaxes#message"
    match "ajaxes/chat"=>"ajaxes#chat"

6. 访问`http://localhost:3000/ajaxex/chat`

### 14.3.4 运行结果 513
### 14.3.5 实例分析 514
## 14.4 使用异步请求的方式实现分页功能 514
视频教学：8分钟 514
$.ajax()还不够敏捷；load()方法用起来很方便，但范围较为局限。
jQuery对$.ajax()方法进行进一步的封装，扩展出$.get()、$.post()方法，又进一步封装了$.getScript()、$./getJSON()方法。
这些方法能在特定环境实现一些异步请求功能。
### 14.4.1 基础知识——jQuery中Ajax的高级实现 514
#### $.get()方法
**定义用法**
get() 方法通过远程 HTTP GET 请求载入信息。
这是一个简单的 GET 请求功能以取代复杂 $.ajax 。请求成功时可调用回调函数。如果需要在出错时执行函数，请使用 $.ajax。

**语法**

    $(selector).get(url,data,success(response,status,xhr),dataType)

参数 	描述

- url 	必需。规定将请求发送的哪个 URL。
- data 	可选。规定连同请求发送到服务器的数据。以键值对的集合的形式作为QueryString附加到请求的URL中，该参数可以是一个对象，也可以成一个字符串。
- success(response,status,xhr) 	可选。规定当请求成功时运行的函数。回调函数。jQuery会自动将请求结果和状态传给该方法。
额外的参数：
    - response - 包含来自请求的结果数据
    - status - 包含请求的状态
    - xhr - 包含 XMLHttpRequest 对象

- dataType 	可选。规定预计的服务器响应的数据类型。缺省是html。
默认地，jQuery 将智能判断。
可能的类型：    "xml"    "html"    "text"    "script"    "json"    "jsonp"

**详细说明**

该函数是简写的 Ajax 函数，等价于：

    $.ajax({
      url: url,
      data: data,
      success: success,
      dataType: dataType
    });

根据响应的不同的 MIME 类型，传递给 success 回调函数的返回数据也有所不同，这些数据可以是 XML root 元素、文本字符串、JavaScript 文件或者 JSON 对象。也可向 success 回调函数传递响应的文本状态。

对于 jQuery 1.4，也可以向 success 回调函数传递 XMLHttpRequest 对象。

#### $.post()方法

**定义和用法**
post() 方法通过 HTTP POST 请求从服务器载入数据。

**语法**

    jQuery.post(url,data,success(data, textStatus, jqXHR),dataType)

参数 	描述

- `url` ------------------------------- 必需。规定把请求发送到哪个 URL。
- `data` ------------------------------ 可选。映射或字符串值。规定连同请求发送到服务器的数据。
- `success(data, textStatus, jqXHR)` -- 可选。请求成功时执行的回调函数。
- `dataType` -------------------------- 可选。规定预期的服务器响应的数据类型。默认执行智能判断（xml、json、script 或 html）。

**详细说明**

该函数是简写的 Ajax 函数，等价于：

    $.ajax({
      type: 'POST',
      url: url,
      data: data,
      success: success,
      dataType: dataType
    });

根据响应的不同的 MIME 类型，传递给 success 回调函数的返回数据也有所不同，这些数据可以是 XML 根元素、文本字符串、JavaScript 文件或者 JSON 对象。也可向 success 回调函数传递响应的文本状态。

对于 jQuery 1.5，也可以向 success 回调函数传递 jqXHR 对象（jQuery 1.4 中传递的是 XMLHttpRequest 对象）。

大部分实现会规定一个 success 函数：

    $.post("ajax/test.html", function(data) {
      $(".result").html(data);
    });

本例读取被请求的 HTML 片段，并插入页面中。

通过 POST 读取的页面不被缓存，因此 jQuery.ajaxSetup() 中的 cache 和 ifModified 选项不会影响这些请求。

注释：由于浏览器安全方面的限制，大多数 "Ajax" 请求遵守同源策略；请求无法从不同的域、子域或协议成功地取回数据。

注释：如果由 jQuery.post() 发起的请求返回错误代码，那么不会有任何提示，除非脚本已调用了全局的 .ajaxError() 方法。或者对于 jQuery 1.5，jQuery.post() 返回的 jqXHR 对象的 .error() 方法也可以用于错误处理。

**jqXHR 对象**

对于 jQuery 1.5，所有 jQuery 的 AJAX 方法返回的是 XMLHTTPRequest 对象的超集。由 $.post() 返回的 jQuery XHR 对象或 "jqXHR,"实现了约定的接口，赋予其所有的属性、方法，以及约定的行为。出于对由 $.ajax() 使用的回调函数名称便利性和一致性的考虑，它提供了 .error(), .success() 以及 .complete() 方法。这些方法使用请求终止时调用的函数参数，该函数接受与对应命名的 $.ajax() 回调函数相同的参数。

jQuery 1.5 中的约定接口同样允许 jQuery 的 Ajax 方法，包括 $.post()，来链接同一请求的多个 .success()、.complete() 以及 .error() 回调函数，甚至会在请求也许已经完成后分配这些回调函数。

    // 请求生成后立即分配处理程序，请记住该请求针对 jqxhr 对象
    var jqxhr = $.post("example.php", function() {
      alert("success");
    })
    .success(function() { alert("second success"); })
    .error(function() { alert("error"); })
    .complete(function() { alert("complete"); });

    // 在这里执行其他任务
	
    // 为上面的请求设置另一个完成函数
    jqxhr.complete(function(){ alert("second complete"); });

#### $.getScript()方法

**定义和用法**

getScript() 方法通过 HTTP GET 请求载入并执行 JavaScript 文件。

**语法**

    jQuery.getScript(url,success(response,status))

参数 	描述

- url ----------------------- 将要请求的 URL 字符串。
- success(response,status) -- 可选。规定请求成功后执行的回调函数。
额外的参数：
    response - 包含来自请求的结果数据
    status - 包含请求的状态（"success", "notmodified", "error", "timeout" 或 "parsererror"）

**详细说明**

该函数是简写的 Ajax 函数，等价于：

    $.ajax({
      url: url,
      dataType: "script",
      success: success
    });

这里的回调函数会传入返回的 JavaScript 文件。这通常不怎么有用，因为那时脚本已经运行了。

载入的脚本在全局环境中执行，因此能够引用其他变量，并使用 jQuery 函数。

比如加载一个 test.js 文件，里边包含下面这段代码：

    $(".result").html("<p>Lorem ipsum dolor sit amet.</p>");

通过引用该文件名，就可以载入并运行这段脚本：

    $.getScript("ajax/test.js", function() {
      alert("Load was performed.");
    });

注释：jQuery 1.2 版本之前，getScript 只能调用同域 JS 文件。 1.2中，您可以跨域调用 JavaScript 文件。注意：Safari 2 或更早的版本不能在全局作用域中同步执行脚本。如果通过 getScript 加入脚本，请加入延时函数。

#### $.getJSON()方法

**定义和用法**

通过 HTTP GET 请求载入 JSON 数据。

在 jQuery 1.2 中，您可以通过使用 JSONP 形式的回调函数来加载其他网域的 JSON 数据，如 "myurl?callback=?"。jQuery 将自动替换 ? 为正确的函数名，以执行回调函数。 注意：此行以后的代码将在这个回调函数执行前执行。

**语法**

     jQuery.getJSON(url,data,success(data,status,xhr))

参数 	描述

- url ----------------------- 必需。规定将请求发送的哪个 URL。
- data ---------------------- 可选。规定连同请求发送到服务器的数据。
- success(data,status,xhr) -- 可选。规定当请求成功时运行的函数。
额外的参数：
    response - 包含来自请求的结果数据
    status - 包含请求的状态
    xhr - 包含 XMLHttpRequest 对象

**详细说明**

该函数是简写的 Ajax 函数，等价于：

    $.ajax({
      url: url,
      data: data,
      success: callback,
      dataType: json
    });

发送到服务器的数据可作为查询字符串附加到 URL 之后。如果 data 参数的值是对象（映射），那么在附加到 URL 之前将转换为字符串，并进行 URL 编码。

传递给 callback 的返回数据，可以是 JavaScript 对象，或以 JSON 结构定义的数组，并使用 $.parseJSON() 方法进行解析。

**示例**

从 test.js 载入 JSON 数据并显示 JSON 数据中一个 name 字段数据：

    $.getJSON("test.js", function(json){
      alert("JSON Data: " + json.users[3].name);
    });

**关于JSON**
下面的资料来自： http://www.w3school.com.cn/json/

JSON：JavaScript 对象表示法（JavaScript Object Notation）。

JSON 是存储和交换文本信息的语法。类似 XML。

JSON 比 XML 更小、更快，更易解析。

---
每一章中用到的实例

    {
    "employees": [
    { "firstName":"Bill" , "lastName":"Gates" },
    { "firstName":"George" , "lastName":"Bush" },
    { "firstName":"Thomas" , "lastName":"Carter" }
    ]
    }

这个 employee 对象是包含 3 个员工记录（对象）的数组。

---
什么是 JSON ？

-   JSON 指的是 JavaScript 对象表示法（JavaScript Object Notation）
-   JSON 是轻量级的文本数据交换格式
-   JSON 独立于语言 
JSON 使用 JavaScript 语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。
-   JSON 具有自我描述性，更易理解

---
JSON - 转换为 JavaScript 对象

JSON 文本格式在语法上与创建 JavaScript 对象的代码相同。

由于这种相似性，无需解析器，JavaScript 程序能够使用内建的 eval() 函数，用 JSON 数据来生成原生的 JavaScript 对象。

---
类似 XML

-   JSON 是纯文本
-   JSON 具有“自我描述性”（人类可读）
-   JSON 具有层级结构（值中存在值）
-   JSON 可通过 JavaScript 进行解析
-   JSON 数据可使用 AJAX 进行传输

---
相比 XML 的不同之处

-   没有结束标签
-   更短
-   读写的速度更快
-   能够使用内建的 JavaScript eval() 方法进行解析
-   使用数组
-   不使用保留字

---
为什么使用 JSON？

对于 AJAX 应用程序来说，JSON 比 XML 更快更易使用：

- 使用 XML

    - 读取 XML 文档
    - 使用 XML DOM 来循环遍历文档
    - 读取值并存储在变量中

- 使用 JSON

    - 读取 JSON 字符串
    - 用 eval() 处理 JSON 字符串

---
JSON 语法规则

JSON 语法是 JavaScript 对象表示法语法的子集。

-   数据在名称/值对中
-   数据由逗号分隔
-   花括号保存对象
-   方括号保存数组

---
JSON 名称/值对

JSON 数据的书写格式是：名称/值对。

名称/值对包括字段名称（在双引号中），后面写一个冒号，然后是值：

    "firstName" : "John"

这很容易理解，等价于这条 JavaScript 语句：

    firstName = "John"

---
JSON 值

JSON 值可以是：

-   数字（整数或浮点数）
-   字符串（在双引号中）
-   逻辑值（true 或 false）
-   数组（在方括号中）
-   对象（在花括号中）
-   null

---
JSON 对象

JSON 对象在花括号中书写：

对象可以包含多个名称/值对：

    { "firstName":"John" , "lastName":"Doe" }

这一点也容易理解，与这条 JavaScript 语句等价：

    firstName = "John"
    lastName = "Doe"

---
JSON 数组

JSON 数组在方括号中书写：

数组可包含多个对象：

    {
    "employees": [
    { "firstName":"John" , "lastName":"Doe" },
    { "firstName":"Anna" , "lastName":"Smith" },
    { "firstName":"Peter" , "lastName":"Jones" }
    ]
    }

在上面的例子中，对象 "employees" 是包含三个对象的数组。每个对象代表一条关于某人（有姓和名）的记录。

---
JSON 使用 JavaScript 语法

因为 JSON 使用 JavaScript 语法，所以无需额外的软件就能处理 JavaScript 中的 JSON。

通过 JavaScript，您可以创建一个对象数组，并像这样进行赋值：

    var employees = [
    { "firstName":"Bill" , "lastName":"Gates" },
    { "firstName":"George" , "lastName":"Bush" },
    { "firstName":"Thomas" , "lastName": "Carter" }
    ];

可以像这样访问 JavaScript 对象数组中的第一项：

    employees[0].lastName;

返回的内容是：

    Gates

可以像这样修改数据：

    employees[0].lastName = "Jobs";

在下面的章节，您将学到如何把 JSON 文本转换为 JavaScript 对象。

---
JSON 文件

    JSON 文件的文件类型是 ".json"
    JSON 文本的 MIME 类型是 "application/json"

---
把 JSON 文本转换为 JavaScript 对象

JSON 最常见的用法之一，是从 web 服务器上读取 JSON 数据（作为文件或作为 HttpRequest），将 JSON 数据转换为 JavaScript 对象，然后在网页中使用该数据。

为了更简单地为您讲解，我们使用字符串作为输入进行演示（而不是文件）。

---
JSON 实例 - 来自字符串的对象

创建包含 JSON 语法的 JavaScript 字符串：

    var txt = '{ "employees" : [' +
    '{ "firstName":"Bill" , "lastName":"Gates" },' +
    '{ "firstName":"George" , "lastName":"Bush" },' +
    '{ "firstName":"Thomas" , "lastName":"Carter" } ]}';

由于 JSON 语法是 JavaScript 语法的子集，JavaScript 函数 eval() 可用于将 JSON 文本转换为 JavaScript 对象。

eval() 函数使用的是 JavaScript 编译器，可解析 JSON 文本，然后生成 JavaScript 对象。必须把文本包围在括号中，这样才能避免语法错误：

    var obj = eval ("(" + txt + ")");

在网页中使用 JavaScript 对象：

    <p>
    First Name: <span id="fname"></span><br />
    Last Name: <span id="lname"></span><br />
    </p>
    
    <script type="text/javascript">
    document.getElementById("fname").innerHTML = obj.employees[1].firstName
    document.getElementById("lname").innerHTML = obj.employees[1].lastName
    </script>

---
JSON 解析器

提示：eval() 函数可编译并执行任何 JavaScript 代码。这隐藏了一个潜在的安全问题。

使用 JSON 解析器将 JSON 转换为 JavaScript 对象是更安全的做法。JSON 解析器只能识别 JSON 文本，而不会编译脚本。

在浏览器中，这提供了原生的 JSON 支持，而且 JSON 解析器的速度更快。

较新的浏览器和最新的 ECMAScript (JavaScript) 标准中均包含了原生的对 JSON 的支持。
- Web 浏览器支持

    - Firefox (Mozilla) 3.5
    - Internet Explorer 8
    - Chrome
    - Opera 10
    - Safari 4

- Web 软件支持
    - jQuery
    - Yahoo UI
    - Prototype
    - Dojo
    - ECMAScript 1.5


对于较老的浏览器，可使用 JavaScript 库： https://github.com/douglascrockford/JSON-js

JSON 格式最初是由 Douglas Crockford 制定的。

### 14.4.2 实例描述 516
### 14.4.3 实例应用 516

1. 在控制器中新建一个返回JSON数据的动作`user_list`方法，处理翻页的请求逻辑：

      def user_list
        user = Array.new
        user << { :LoginName => "admin", :Password => "123456", :UserName => "杰克孙" }
        user << { :LoginName => "joker", :Password => "666666", :UserName => "张凤清" }
        user << { :LoginName => "lixing", :Password => "lixing", :UserName => "李星" }
        user << { :LoginName => "qz", :Password => "zqz", :UserName => "张清朕" }
        user << { :LoginName => "peter", :Password => "zhao", :UserName => "赵铎" }
        user << { :LoginName => "hua", :Password => "zhh", :UserName => "张浩华" }
        user << { :LoginName => "zhht", :Password => "hongtao", :UserName => "祝红涛" }
        user << { :LoginName => "jeck", :Password => ".369", :UserName => "刘清" }
        user << { :LoginName => "lovefeng", :Password => "123", :UserName => "马凤" }
    
        op = request[:op] #当前请求操作  【kinder:unknow:这个“request[:op]”变量的初始值是什么？什么时候赋值的？是users.js的那个op=prev或者op=next吗？如果是，不是应该用params来传递的吗？】
        page = session[:page].to_i  #当前页码
        count = user.size #统计记录总条数
    
        if op == "next" and page < ((count - 1) / 5)
          page += 1
        end
        
        if op == "prev" and page > 0
          page -= 1
        end
    
        startNum = page * 5
        endNum = startNum + 5
        @users = user[startNum, endNum]  # 【kinder:note:生成一个显示的数组】
        @sn = startNum                   # 【kinder:unknow:这个实例变量干嘛去了？下面的@en也是】
        @en = endNum
        
        session[:page] = page
        
        respond_to do |format|
          format.html  { render :layout => false }
          format.xml  { render :xml => @ajaxes }
        end
      end

1. 在控制器中显示的users方法:

      def users
        respond_to do |format|
          format.html
          format.xml  { render :xml => @ajaxes }
        end
      end

2. 创建`user_list.html.erb`，输出数据，组织成JSON代码：

    [
    <%
       gap = false       # 初始化变量
       @users.each do |item|
       if(gap)
    %>,
    <%
       else
       gap = true
       end
    %>  {
           "LoginName" : "<%= item[:LoginName] %>",   # 没想到可以这样——只写闭合标签
           "Password" : "<%= item[:Password] %>",
           "UserName" : "<%= item[:UserName] %>"
        }
    <%
       end
    %>
    ]

3. 创建显示列表信息的容器user.html.erb：

    <%= javascript_include_tag "users.js" %>
    
    <div id="users">
      <table>
        <thead>
        <tr><td>登录名</td><td>密码</td><td>用户姓名</td></tr>
        </thead>
        <tbody>
        </tbody>
      </table>
        <a href="#" id="prev">上一页 </a>
      　　<a href="#" id="next">下一页</a>
    </div>

4. 新建users.js文件：

    $(document).ready(function(){
        var url = "http://localhost:3000/ajaxes/user_list";
        $.getJSON(url, initTable);      
    
        $("#prev").click(function(){
            var url = "http://localhost:3000/ajaxes/user_list?op=prev";
            /* 异步请求，载入 JSON 数据 */
            $.getJSON(url, initTable);
        });
    
        $("#next").click(function(){
            var url = "http://localhost:3000/ajaxes/user_list?op=next";
            /* 异步请求，载入 JSON 数据 */
            $.getJSON(url, initTable);
        });
    });
    // 这个initTable用来组织html数据。 
    function initTable(data){
        $("#users>table>tbody").html("");   // 【kinder:unknow:#users>table>tbody是网页中id=users的table中的tbody部分】
        
    	/* 遍历请求结果 【kinder:unknow: 这个`$.each`是jQuery.each吗？什么意思？】*/
    	$.each(data,
            function(index, p){
                var html = "<tr><td>" + p.LoginName + "</td><td>" + p.Password +
                "</td><td>" + p.UserName + "</td></tr>"
                $("#users>table>tbody").append(html);
            });
    }

5. 配置路由：

    match "ajaxes/user_list"=>"ajaxes#user_list"
    match "ajaxes/users"=>"ajaxes#users"

6. 访问`http://localhost:3000/ajaxes/users`页面。

### 14.4.4 运行结果 518
### 14.4.5 实例分析 519
## 14.5 使用异步请求刷新页面模块 519
视频教学：6分钟 520
### 14.5.1 基础知识——Rails发送异步请求 520
#### 引入JavaScript类库
可以把/public/javascripts目录中的所有系统生成的JavaScript文件删除，只留下自己创建的js文件和jQuery的类库文件和基于jQuery框架扩展的rails.js文件即可。
为了在每一个页面中都引入这些JavaScript类库，可以在/app/views/layouts目录下的application.html.erb文件的head部分使用`javascript_include_tag`方法，分别引入需要的JavaScript脚本文件：

    <% javascript_include_tag "jquery.min.js" %>
    <% javascript_include_tag "rails.js %>

注意这里不能用`javascript_include_tag`方法的`:all`参数引入所有的JavaScript文件，因为加载顺序问题会导致rails.js文件或者其他文件初始化错误。
【kinder:unknow:事实上找不到这个rails.js文件。只有一个application.js文件。内容为空。】

#### 发送异步请求
进行Ajax交互的最简单方法就是使用`link_to`方法来实现。添加一个异步请求的标识属性`:remote`以后，用户在单击该超链接时，系统会自动向链接目标发送异步请求。如：

    <%= link_to '新建', "/ajaxes/new", :remote=>true, :id=>"new" %>

#### 分析rails.js文件

### 14.5.2 实例描述 522
### 14.5.3 实例应用 522
### 14.5.4 运行结果 523
### 14.5.5 实例分析 524
## 14.6 实现异步登录功能 524
视频教学：6分钟 524
### 14.6.1 基础知识——Rails异步提交表单 524
`form_tag`方法可以动态生成一个表单，同样，可以为该方法添加一个":remote=>true"的标记，实现异步提交表单的功能。

### 14.6.2 实例描述 525
1. 在控制器创建一个login动作

    def login
      username=request["user"]["name"]
      password=request["user"][""password"]
      
      @username = username
      @rule = "VIP 拥护"
      
      respond_to do | format|
        format.html { render :layout => false }
        format.xml { render :xml => @ajaxes }
      end
    end

2. 创建login.htm.erb视图：

    <div id="login">
      <% form_tag("/ajaxes/login", :remote => true, :id => "lf") do %>
      <div>用户名：<%= text_field("username", "name", :class=>"input") %></div>
      <div>密  码：<%= password_field("user", "password", :class=>"input") %></div>
      <div><button type="submit">登录</botton></div>
      <% end %>
    </div>

3. 修改登录页面的视图文件和控制器上的动作。

     <br>
     <div>你好<span><%= @username %></span>！</div>
     <div>你的角色是<span><%= @rule %></span></div>

4. 创建login.js代码，并在相应的视图文件上引用：`<%= javascript_include_tag “login.js" %>`

    $(function($) {
        $('#lf').bind(
            'ajax:success',
            function(data, status, xhr) {
                $("#login").html(status);
            }).bind(
            'ajax:error',
            function(xhr, status, error) {
                alert(error);
            });
       });

5. 配置路由

    match "ajaxes/itzcn"=>"ajaxes#itzcn"
    match "ajaxes/login"=>"ajaxes#login"

6. 在浏览器中访问`http://localhost:3000/ajaxes/itzn`

### 14.6.3 实例应用 525
### 14.6.4 运行结果 526
### 14.6.5 实例分析 527
## 14.7 常见问题解答 527
### 14.7.1 Rails Ajax 用Ajax实现文件的上传或者读取问题 527
Ajax不能实现文件上传。Ajax和服务器交互，用的就是XML传递数据。XML是文本，而文件是二进制。
### 14.7.2 Ruby语言跟Ajax关系问题 528
## 14.8 习题 528

---
# 第15章 Ruby On Rails还能干什么 531
## 15.1 实现上传图片 532
视频教学：7分钟 532
### 15.1.1 基础知识——文件上传 532
表单数据一般以字符串的形式进行提交。
倘若使用表单实现文件上传，可以将表单元素的enctype属性设置为multipart/form-data，将文件域指定的文件内容封装到请求参数中，然后以二进制流的方式来处理表单数据。
1. 如下面的/app/views/carts/uploadImg.html.erb文件

    <% form_tag "/cart/upload", :multipart => true do %>       # 极为重要！
    <%= file_field_tag(:img,:size=>"40"> %>
        <% submit_tag("上传文件") %>
    <% end %>

2. 在carts控制器中添加upload方法：

    def upload
      image=params[:img]                                 # 获得上传文件对象
      content_size=image.size                            # 上传文件的大小
      file_data=image.read                               # 上传文件的内容。即二进制数据，然后通过IO流写入服务器文件中。
      filetype=image.content_type                        # 上传文件的类型
      @filename=image.original_filename                  # 上传文件的文件名
      fileext=File.basename(@filename).split(".")[1]     # 分离扩展名？`
      @time=Time.now.to_s                                # 取得前缀“年月日时分秒”
      timeext=File.bashname(@time).split("+") [0]        # 【kinder:unknow: 这一行什么意思？】
      newfilename=timeext+"."+fileext                    # 合并为新的文件名：前缀+原有文件名
      File.open("#{Rales.root}/public/"+newfile,"web"){
        |f| f.write(file_data)
      }
      flash[:notice]="文件："+newfilename+"上传成功!"+"上传时间是："+(Time.now).to_s+"上传地址是:"+"#{Rails.root}/public/"
      rende :action=>"uploadImg"
    end

3. 配置路由：

    match 'carts/uploadImg' => 'carts#uploadImg'
    match 'carts/uplaod' => 'carts#upload'
    root :to => "carts#uploadImg"
    resource :carts

4. 可在浏览器上访问："http://localhost:3000/carts/uploadImg"
### 15.1.2 实例描述 533
### 15.1.3 实例应用 534
### 15.1.4 运行结果 535
### 15.1.5 实例分析 536
## 15.2 从客户端下载文件 536
视频教学：6分钟 536
### 15.2.1 基础知识——`send_file`和`send_data` 536
#### `send_file`方式
1. 在视图页面：

    <%= image_tag("/image/1.jpg") %><br>
    <%= link_to "下载文件", :action=>"DownFile", :filename=>"1.jpg" %>

2. 在控制器：

    send_file "#{Rails.root}/public/image/"+params[:filename] unless
    params[:filename].blank?

如果下载的图片都在Upload/public/images目录下，只需要传一个文件名即可；否则需要指定路径。【kinder:unknow: 是不是笔误啊？什么Upload目录？】
#### `send_data`方式
1. 在视图页面：

    <% image_tag("/image/1.jpg") %><br>
    <% link_to  "下载文件", :action=>"downSendData", :filename=>"1.jpg" %>

2. 在控制器：

    def downSendData
      io=File.open("#(Rails.root)/public/images/"+params[:filename])
      io.binmod
      send_data(io.read, :filename=>params[:filename], :tpye=>"image.jpg", :disposition=>"inline")  # inline指直接显示下载的文件，以附件形式下载则应该设为attachment。
      io.close
    end

### 15.2.2 实例描述 537
### 15.2.3 实例应用 537
### 15.2.4 运行结果 538
### 15.2.5 实例分析 539
## 15.3 功能强大的文本编辑器 539
视频教学：4分钟 539
### 15.3.1 CKeditor的安装 539
Rails3.0自带了CKeditor，只需要`$ gem install ckeditor`
### 15.3.2 CKeditor的使用 540
1. 将ckeditor.js放在/javascript/ckeditor/目录下，
2. 再在视图文件引入js文件，并加以包装：

    <%= javascript_include_tag "ckeditor/ckeditor.js" %>
    ...
    <%form_tag :action=>"reg", :controller=>"account" do %>  #  指定CKeditor文本输入之后的后续处理
      ...
      <p>
      <%= ckeditor_textarea ("object", "field", :width=>'100%', :height=>'200px', :skin=>"office2003") %>  # 这就是CKeditor。object是具体对象名，field是具体字段名。可以选择其他皮肤
      </p>
      <%= submit_tag 'submit', :class=>"btn" %>
    <% end %>

3. 在控制器文件添加reg方法：

    def reg
      @content=param["cart"]["context"]
      render :text=>@content
    end

4. 在展示输入文字的视图页面:

    <%= @content %>

5. 配置路由

## 15.4 使用邮件进行激活处理 543
视频教学：9分钟 543
### 15.4.1 基础知识——邮件通信 543
#### 发送邮件
1. 使用ActionMailer内置的生成器创建邮件发送的框架:
`$ rails generate mailer mailer_name action_name`
2. 分别编辑模型和视图模板。
3. 指定邮件的发送方式。默认stmp，另外还有sendmail（调用系统的sendmail来实现发送）和test（不会发送，邮件将保存在系统中，常用于拥护单元测试和功能测试）。在config文件中environment指定。

    ActionMailer::Base.delivery_method=:stmp
    ActionMailer::Base.delivery_method=:sendmail
    ActionMailer::Base.delivery_method=:test

4. 指定SMTP服务器和有关参数。在config文件中environment指定。

    ActionMailer:Base.smtp_settings={
        :address=>"smtp.foxmail.com",         # SMTP服务器地址
        :port=>25,                            # SMTP服务器地端口
        :domail=>"foxmail.com", 
        :user_name=>"somebody",               # SMTP服务器的用户名
        :password=>"*******",                 # SMTP服务器的密码
        :authentication=> :login              # SMTP服务器的的验证类型。除了login还有cram_md5和plain。
    }

5. 设置邮件的传输机制和其他参数。也是在config文件中environment指定。

    ActionMailer::Base.perform_deliveries = true | false

想要正常邮件发送，则无需设置邮件的传输机制！
另外，可以设置其他参数，例如：

    ActionMailer::Base.raise_delivery_error=true | false
    ActionMailer::Base.default_charset="UTF-8"

6. 发送邮件。

    subject "激活邮件，来自【购书网】"     # 邮件主题，字符串
      recipients user.email                # 接收者， 字符串数组
      from "somebody@foxmail.com"          # 发送者， 字符串数组
      sent_on sent_at                      # 发送时间， 时间
      body :user=>user                     # 邮件正文， Hash
      content_type "text/html"             # 邮件类型
    # 除此之外的其他邮件参数还有：
    # bbc                    暗送者，同接收者
    # cc                     抄送者，同接收者
    # charset                邮件编码，字符串，默认utf-8
    # headers                额外头信息，Hash

在上面的代码中，为send方法传递的Hash对象user中保存了用户注册的信息。当用户在页面上输入时，首先会传递到user对象，然后通过user对象将数据传递到ActionMailer模型对象的Systemmail上。【kinder:unknow: 不懂】

7. 修改发送邮件的模板文件sent.html.rb

    <p>注册成功，请激活后登录</p>
      <p><h3><%=@user.name %>，您好！</h3></p>
      <p>请在浏览器的地址栏中输入如下地址来激活您的账户</p>
      <p><a href="http://localhost:3000/account/proActivate?name=<%=@user.name%>&active_code=<%=@user.active_code %>">
      http://localhost:3000/account/proActivate?name=<%@user.name%>&active_code=<%=@user.active_code %>
      </a></p>

#### 激活处理
当用户单击激活邮件的链接时，相当于向系统的控制器的proActivate动作发送一个请求，并将用户名和密码作为请求参数。
Rails应用根据参数决定要激活的账户。
控制器proActivate的代码：

    user=User.find_by_name(params[:name])
      if user!=nil && user.is_actived==0 && user.active_code==params[:active_code] then
        user.update_attribute(:is_actived,1)
        flash[:notice]="恭喜您，您已经成功激活了账户！"
      elseif user!=nil && user.is_actived==1 then
        flash[:notice]="您已经激活过这个账户！"
      else
        flash[:notice]="激活失败"
      end

### 15.4.2 实例描述 546
1. 数据库users表。
包括`id name pass email active_code is_actived`等字段
2. 创建邮件项目并修改config文件夹下面的database.yml文件。

    adapter: mysql12
    encoding: utf8
    reconnect: false
    database: testblog
    pool: 5
    username: root
    password: root
    host: localhost

3. 创建一个名为“sysemail sent”的邮件发送器框架。
`$ rails generate mailer sysemail sent`
4. 修改sysemail.rb

    class Sysemail < ActionMailer::Base
      default :from => "from@example.com"
      # Subject can be set in your I18n file at config/locales/en.yml
      # with the following lookup:
      # 
      #      en.sysemail.sent.subject
      #
      def sent
        @greeting => "Hi"
        mail :to => "to@example.org"
      end
    end

5. 修改sent.text.erb             【kinder:unknow: 这个干嘛呢？】

    Sysemail#sent
    <%= @greeting %>, find me in app/views/app/views/sysemail/sent.text.erb

6. 创建一个account的控制器，并添加register视图
`$ rails generate controller account register`
7. 使用model命令创建一个user实例。【kinder:unknow: 这个模型需要这样创建吗？不是用scaffold吗？】

    class CreateUsers < ActiveRecord::Migration
      def self.up
        create_table :users do |t|
          t.int :id
          t.varchar(50) :name
          t.varchar(50) :pass
          t.varchar(150) :email
          t.varchar(255) :active_code
          t.ini :is_actived
          t.timestamps
        end
      end
      def self.down
        droop_table :users
      end
    end

8. 在register.html.erb添加代码

    <h1>注册成为会员</h1>
    <% form_for :user,@user, :url=>{:action=>"proReg"} do |f| %>
    <table height="250px;"  align="center">
      <tr>
        <td>您的昵称：</td>
        <td><%=f.text_field :name %></td>
      </tr>
      <tr>
        <td>您的密码：</td>
        <td><%=f.text_field :pass %></td>
      </tr>
      <tr>
        <td>重复密码：</td>
        <td><input type="text" size="30"></td>
      </tr>
      <tr>
        <td>您的邮箱：</td>
        <td><%=f.text_field :email %></td>
      </tr>
      <tr>
        <td colspan="2" align="center">
          <%=submit_tag '注册' %>
        </td>
      </tr>
    </table>
    <% end %>

9. 在accountController文件添加proReg方法

    def proReg
        @user=User.new(params[:user])
        @user.active_code=rand(Time.now_i).to_s
        @user.is_actived=0
        if @user.save then
          flash[:notice]="success"
          flash[:name]=@user.name     #【kinder:unknow: flash[:name]还是第一次碰到】
          Sysemail.deliver_sent(@user)
          render :action=>"Sysemail/sent"
        else
          flash[:notice]=>"fail"
          render :action=>"account/register"
        end
    end

10. 修改app/mailers文件夹下的sysemail.rb中的sent方法

    def sent(user.sent_at=Time.now)
        subject "激活邮件，来自【购书网】"     # 邮件主题，字符串
        recipients user.email                  # 接收者， 字符串数组
        from "somebody@foxmail.com"            # 发送者， 字符串数组
        sent_on sent_at                        # 发送时间， 时间
        body :user=>user                       # 邮件正文， Hash
        content_type "text/html"               # 邮件类型
    end

11. 将sent.txt.erb重命名为sent.html.erb，并修改：

    <div>
      <p>注册成功，请激活后登录</p>
      <p><h3><%=@user.name %>，您好！</h3></p>
      <p>请在浏览器的地址栏中输入如下地址来激活您的账户</p>
      <p><a href="http://localhost:3000/account/proActivate?name=<%=@user.name%>&active_code=<%=@user.active_code %>">
      http://localhost:3000/account/proActivate?name=<%@user.name%>&active_code=<%=@user.active_code %>
      </a></p>
    </div>

12. 在config文件夹下的environment的文件中添加代码

    ActionMailer::Base.delivery_method=:stmp
    ActionMailer::Base.default_charset="UTF-8"
    ActionMailer:Base.smtp_settings={
        :address=>"smtp.foxmail.com",         # SMTP服务器地址
        :port=>25,                            # SMTP服务器地端口
        :domail=>"foxmail.com", 
        :user_name=>"somebody",               # SMTP服务器的用户名
        :password=>"*******",                 # SMTP服务器的密码
        :authentication=> :login              # SMTP服务器的的验证类型。除了login还有cram_md5和plain。
    }

13. 在AccountController中添加proActivate方法来激活邮件。

    def proActivate
      user=User.find_by_name(params[:name])
      if user!=nil && user.is_actived==0 && user.active_code==params[:active_code] then
        user.update_attribute(:is_actived,1)
        flash[:notice]="恭喜您，您已经成功激活了账户！"
      elseif user!=nil && user.is_actived==1 then
        flash[:notice]="您已经激活过这个账户！"
      else
        flash[:notice]="激活失败"
      end
      redirect_to :action=>"active"
    end

14. 修改config文件下的routes文件。

    match 'account/register' => 'account#register'              # 注册页面
    match 'account/proReg' => 'account#proReg'                  # 注册后提示前往邮箱激活的页面
    match 'account/proActivate' => 'account#proActivate'        #
    match 'account/active' => 'account#active'                  # 激活后页面

### 15.4.3 实例应用 546
输入`http://localhost:3000/account/register`
### 15.4.4 运行结果 549
### 15.4.5 实例分析 550
## 15.5 如何提高应用程序的性能 550
一般情况下，用户每次请求列表信息时，都要查询数据库。即使数据库中的信息没有任何改变，这样很浪费时间。
视频教学：7分钟 550
### 15.5.1 页面缓存 551
适用于对于所有用户都相同的页面和没有用户认证的页面。这是最快的缓存应用。
1. 修改config/environments/development.rb文件
`config.action_controller.perform_caching = true`
2. 在控制器文件添加缓存
`caches_page :controllerName`
例如要对index页面保存缓存：`caches_page :index`
3. 在控制器文件适当地方清除缓存，特别是更新数据的时候
`expire_page(:action=>"controllerName")`
### 15.5.2 局部缓存 553
1. 这是在视图模板中使用的缓存代码。格式为:

    <% cache do %>
      视图中想要缓存的部分代码
    <% end %>

2. 清除局部缓存。可在控制器文件中修改update方法

    respond_to do |format|
      if @cart.update_attributes(param[:cart])
        expire_fragment :action=>"show"        # 这就是清除show.html.erb里的缓存。
        format.html { redirect_to(@cart, :notice=>'Carts was successfully updated.') }
        format.xml { head :ok }
      else
        format.html { render :action => "edit" }
        format.xml { render :xml => @cart.errors, :status => :unprocessable_entity }
      end
    end

### 15.5.3 Action缓存 556
1. 在控制器中建立缓存。例如要缓存index页面

    caches_action :index
    def index
      ...
    end

2. 清除缓存。在更新数据时：

    respond_to do |format|
      if @cart.update_attributes(param[:cart])
        expire_action :action=>"index"        # 这就是清除index缓存。
        format.html { redirect_to(@cart, :notice=>'Carts was successfully updated.') }
        format.xml { head :ok }
      else
        format.html { render :action => "edit" }
        format.xml { render :xml => @cart.errors, :status => :unprocessable_entity }
      end
    end

## 15.6 常见问题解答 557
### 15.6.1 文件下载时的乱码问题 557
### 15.6.2 Ruby中的缓存问题 558
## 15.7 习题 559

---
# 第16章 鲜花商城网站 563
## 16.1 网站概述 564
### 16.1.1 网站总体架构 564
### 16.1.2 网站操作流程 565
## 16.2 网站功能模块设计 565
### 16.2.1 会员模块 566
### 16.2.2 商品模块 566
### 16.2.3 购物车模块 567
## 16.3 数据库设计 568
### 16.3.1 数据库需求分析 568
### 16.3.2 数据库概念结构设计 568
### 16.3.3 数据库表设计 569
## 16.4 公用模块 570
### 16.4.1 配置数据库 570
### 16.4.2 界面主体框架 570
### 16.4.3 页面通用模块 572
## 16.5 会员模块 574
### 16.5.1 会员注册 575
### 16.5.2 会员登录和退出 577
## 16.6 鲜花模块 579
### 16.6.1 实例描述 579
### 16.6.2 实例应用 579
### 16.6.3 分页查看鲜花信息 580
### 16.6.4 鲜花搜索 582
### 16.6.5 添加鲜花信息 583
## 16.7 购物车模块 584
### 16.7.1 添加鲜花到购物车 584
### 16.7.2 删除购物车中的鲜花 588
### 16.7.3 清空购物车 589
### 16.7.4 收银台结账 589
## 16.8 总结 590

---
# 第17章 博客系统 591
## 17.1 系统需求分析 592
## 17.2 功能分析 592
## 17.3 数据库设计 593
## 17.4 准备工作 595
### 17.4.1 创建项目 596
### 17.4.2 全局配置 597
### 17.4.3 应用程序模板 598
### 17.4.4 辅助模块 599
### 17.4.5 配置路由 600
## 17.5 文章模块 601
### 17.5.1 文章首页 601
### 17.5.2 查看文章内容 603
### 17.5.3 发表评论 605
### 17.5.4 文章归档 605
## 17.6 查看单页 607
## 17.7 后台管理首页 608
## 17.8 文章管理模块 610
### 17.8.1 管理文章列表 610
### 17.8.2 添加文章 612
### 17.8.3 编辑文章 613
### 17.8.4 删除文章 614
## 17.9 管理单页 615
## 17.10 总结 616
附录 参考答案 617
  / vim: set ft=markdown:/
