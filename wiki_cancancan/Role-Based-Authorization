# role based authorization 基于角色的授权
CanCanCan is decoupled from how you implement roles in the User model, but how might one set up basic role-based authorization? 
CanCanCan 减少了在User模型里实现角色的工作，但怎么设置基本的基于角色的授权呢？
The pros and cons are described [here](https://github.com/kristianmandrup/cantango/wiki/CanCan-vs-CanTango).
看这里CanTango的维基吧。

The following approach allows you to simply define the role abilities in Ruby and does not need a role model.
下面的方式允许用ruby只定义角色能力，不需要一个角色模型。
Alternatively, [[Separate Role Model]] describes how to define the roles and mappings in a database.
可选的，《独立的角色模型》将描述怎么定义角色，以及映射到一个数据库中。
 
Since there is such a tight coupling between the list of roles and abilities, I recommend keeping the list of roles in Ruby.
因为角色列表和能力的关联如此紧密，我推荐使用ruby来记录角色列表。
You can do so in a constant under the User class.
也可以在User类下的一个常量来做。
 
```ruby
class User < ActiveRecord::Base
  ROLES = %i[admin moderator author banned]
end
```

But now, how do you set up the association between the user and the roles? 
You'll need to decide if the user can have many roles or just one.
但现在，怎么设置用户和角色的关联呢？
需要决定用户是只有一个角色还是可以多个角色。

## One role per user  一个用户一个角色

If a user can have only one role, it's as simple as adding a `role` string column to the `users` table.
如果一个用户只能有一个角色，只需要将`role`字符串添加到`users`数据表。

```bash
rails generate migration add_role_to_users role:string
rake db:migrate
```

Now you can provide a select-menu for choosing the roles in the view.
现在可以在视图中提供一个可选菜单来选择角色。

```rhtml
<!-- in users/_form.html.erb -->
<%= f.collection_select :role, User::ROLES, :to_s, :humanize %>
```

You may not have considered using `collection_select` when you aren't working with an association, but it will work perfectly.
没有使用联结时，可能不会考虑使用`collection_select`，但它用起来确实完美。
In this case the user will see the humanized name of the role, and the simple lower-cased version will be passed in as the value when the form is submitted.
这种情况下，用户将看到角色的易读名称，表单提交时简单的小写的版本将会被作为值传进。
 
It's then very simple to determine the role of the user in the Ability class.
接着很容易在Ability类里确定用户的角色。

```ruby
can :manage, :all if user.role == "admin"
```

## Many roles per user  一个用户多个角色

It is possible to assign multiple roles to a user and store it into a single integer column using a [[bitmask|http://en.wikipedia.org/wiki/`Mask_(computing)`]].
很可能一个用户担任多个角色，这些角色将被使用掩码存储在一个整数的栏中。
First add a `roles_mask` integer column to your `users` table.
首先增加一个`roles_mask`整数栏到`users`数据表中。

```bash
rails generate migration add_roles_mask_to_users roles_mask:integer
rake db:migrate
```

Next you'll need to add the following code to the User model for getting and setting the list of roles a user belongs to.
接下来需要增加以下代码到User模型，以便获得和设置属于用户的角色列表。
This will perform the necessary bitwise operations to translate an array of roles into the integer field.
这将会执行必要的比特码操作，将一个角色数组翻译进整数字段。

```ruby
# in models/user.rb
def roles=(roles)
  roles = [*roles].map { |r| r.to_sym }
  self.roles_mask = (roles & ROLES).map { |r| 2**ROLES.index(r) }.inject(0, :+)
end

def roles
  ROLES.reject do |r|
    ((roles_mask.to_i || 0) & 2**ROLES.index(r)).zero?
  end
end
```

If you're using devise, don't forget to add `attr_accessible :roles` to you user model.
如果使用devise，别忘了添加`attr_accessible :roles`到用户模型中。

You can use checkboxes in the view for setting these roles.
可以在视图里使用多选框来设置这些角色。

```rhtml
<% for role in User::ROLES %>
  <%= check_box_tag "user[roles][#{role}]", role, @user.roles.include?(role), {:name => "user[roles][]"}%>
  <%= label_tag "user_roles_#{role}", role.to_s.humanize %><br />
<% end %>
<%= hidden_field_tag "user[roles][]", "" %>
```

Finally, you can then add a convenient way to check the user's roles in the Ability class.
最后，可以添加一个简便的方式来检验用户在Ability类中的角色。

```ruby
# in models/user.rb
def has_role?(role)
  roles.include?(role)
end

# in models/ability.rb
can :manage, :all if user.has_role? :admin
```

See [[Custom Actions]] for a way to restrict which users can assign roles to other users.
维基里的《自定义动作》一章描述了一种方式，限制哪个用户可以分配角色给其他用户。

This functionality has also been extracted into a little gem called [[role_model|http://rubygems.org/gems/role_model]] ([[code & howto|http://github.com/martinrehfeld/role_model]]).
这个功能也被压缩到一个名为role_model的小软件包中。

If you do not like this bitmask solution, see [[Separate Role Model]] for an alternative way to handle this.
如果你不喜欢这个比特码的解决方案，可在维基里《独立的角色模型》一章中看到另一种方法。


## Role Inheritance  角色继承

Sometimes you want one role to inherit the behavior of another role.
有时想让一个角色继承另一个角色的行为。
For example, let's say there are three roles: moderator, admin, superadmin and you want each one to inherit the abilities of the one before.
比如，有三个角色：建模人、管理员和超级管理员，让后一个角色继承前一个角色的能力。
There is also a "role" string column in the User model.
在User模型中也有一栏“role”。
You should create a method in the User model which has the inheritance logic.
应该在User模型创建一个方法来继承逻辑。
 
```ruby
# in User
ROLES = %w[moderator admin superadmin]
def role?(base_role)
  ROLES.index(base_role.to_s) <= ROLES.index(role)   # 这个 <= 就神了。
end
```

You then use this in the Ability class.
然后在Ability类：

```ruby
# in Ability#initialize
if user.role? :moderator
  can :manage, Post
end
if user.role? :admin
  can :manage, ForumThread
end
if user.role? :superadmin
  can :manage, Forum
end
```

Here a superadmin will be able to manage all three classes but a moderator can only manage the one.
这里超级管理员可以管理所有三个类，而建模人只能管理其中一个。
Of course you can change the role logic to fit your needs.
当然可以改变角色逻辑来满足自己的需要。
You can add complex logic so certain roles only inherit from others.
可以添加复杂的逻辑来指定特定角色只继承其他的角色。
And if a given user can have multiple roles you can decide whether the lowest role takes priority or the highest one does.
如果指定用户具有多个角色，可以决定最低的角色比最高的角色更优先。
Or use other attributes on the user model such as a "banned", "activated", or "admin" column.
或者在用户模型中使用其他属性，例如‘banned’、‘activated’或者‘admin’栏。
 
This functionality has been extracted into a gem called [[canard|http://rubygems.org/gems/canard]] ([[code & howto|http://github.com/james2m/canard]]).
这个功能已经被分离到一个叫canard的小软件包中。

## Alternative Role Inheritance 可选的角色继承

If you would like to keep the inheritance rules in the Ability class instead of the User model it is easy to do so like this.
如果想要在Ability类中保存继承的角色，而不是在用户模型，那也很容易：

```ruby
class Ability
  include CanCan::Ability

  def initialize(user)
    @user = user || User.new # for guest
    @user.roles.each { |role| send(role) }

    if @user.roles.size == 0
      can :read, :all #for guest without roles  游客没有角色
    end
  end

  def manager
    can :manage, Employee
  end

  def admin
    manager
    can :manage, Bill
  end
end
```

Here each role is a separate method which is called.
这里每个角色都是调用独立的方法。
You can call one role inside another to define inheritance.
可以在一个角色中调用另一个方法来定义继承。
This assumes you have a `User#roles` method which returns an array of all roles for that user.
这假设了已经有一个`User#roles`方法，返回该用户所有角色的数组。
 
# vim: set ft=markdown : #
