# 改写确认，让用户在确认激活时可以挑选自己的密码
## 前言
Some websites allow to create an account providing only a username/email, dropping the password out.
一些网站允许创建只有用户名和电邮组成的账户，不需要密码。
The sign up step is thus reduced to the bare minimum.
注册步骤因此减少到了最少。
At sign up time, an activation/confirmation link is sent by e-mail to the newly registered user.
注册时，一个激活/链接将通过电邮发送给一个新注册用户。
Following the link leads to a page where the new user must pick a password to confirm the account.
跟着链接到达一个页面，新用户必须选择一个密码来确认账户。

Here's how to add this functionality to your website, by overriding Devise's `ConfirmationsController`.
这里通过改写Devise的`ConfirmationsController`将该功能添加到网站中。

## As a service preview  作为一个服务预览

The website may provide a few ways to confirm the account and, in the mean time, allow the "pending" user to use all of the website features, as a "service preview"; or it could limit the features scope.
网站可能提供一些方法来确认账户，同时允许“pending”用户使用所有的特征，作为服务预览；否则会限制一些特性。
This could prove useful for SaaS, for instance.
这可以改进可用性，比如对Saas来说。
If the confirmation is not performed within a certain time range, the account is disabled somehow.
如果特定长度的时间内没有确认，则账户将被锁定。

If you do want to allow for a "service preview", in `config/initializers/devise.rb`, set `confirm_within` (Devise < 2.0) or `allow_unconfirmed_access_for` (Devise 2.0+) config key to a value like `2.days` or anything suitable for your requirements.
如果允许“服务预览”，在`config/initializers/devise.rb`里，将`confirm_within` (Devise < 2.0)和`allow_unconfirmed_access_for` (Devise 2.0+)配置键设置为类似`2.days`的值或其他符合需要的值。

If you do **not** want to allow for a "service preview", make sure that `confirm_within` or `allow_unconfirmed_access_for` is set to 0 in `config/initializers/devise.rb`.
This is to prevent people from signing in.
If you manage several scopes with Devise, you may set `confirm_within` or `allow_unconfirmed_access_for` *per model*, as an option to the `devise` instruction.
Thus you could require admins to confirm their account, but allows `2.days` free-sign up for users.
如果不允许“服务预览”，确保将这两个配置设为0。
这会阻止人们登录。
如果你用devise管理几个作用域，可以为每个模型设置`confirm_within`或`allow_unconfirmed_access_for`，作为devise指令的选项。
所以，可以要求管理员确认账户，但允许用户两天去宽松注册。

## For Rails 3/4 & Devise 2.0.0 在Rails 3或4 使用Devise 2.0

To use Rails 3/4 and Devise 2.0.0, you must do the same as it was to Devise 1.2.x (see below), with a few exceptions. 
为了使用Rails3或4和Devise2.0，必须向在Devise 1.2.x（详见下面）里的那样做，用几个异常。

### 1) Change `render_with_scope` method to render on `ConfirmationsController` 在`ConfirmationsController`改变`render_with_scope`方法来呈现

`Devise::Controllers::ScopedViews::render_with_scope` was removed in version 2.0.0.
One solution is to call `render` inside your controller, passing the path of the view, as usual.
在2.0.0`Devise::Controllers::ScopedViews::render_with_scope`被删除了。
一个解决方法是在控制器中调用`render`，像平常那样传入视图的路径。

```ruby
# app/controllers/confirmations_controller.rb
class ConfirmationsController < Devise::ConfirmationsController
  # Remove the first skip_before_filter (:require_no_authentication) if you
  # don't want to enable logged users to access the confirmation page.
  # 如果你不想启动登录用户来访问确认页面，可移除第一个skip_before_filter。
  skip_before_filter :require_no_authentication
  skip_before_filter :authenticate_user!

  # PUT /resource/confirmation
  def update
    with_unconfirmed_confirmable do
      if @confirmable.has_no_password?
        @confirmable.attempt_set_password(params[:user])
        if @confirmable.valid? and @confirmable.password_match?
          do_confirm
        else
          do_show
          @confirmable.errors.clear #so that we wont render :new
        end
      else
        self.class.add_error_on(self, :email, :password_already_set)
      end
    end

    if !@confirmable.errors.empty?
      render 'devise/confirmations/new' #Change this if you don't have the views on default path
    end
  end

  # GET /resource/confirmation?confirmation_token=abcdef
  def show
    with_unconfirmed_confirmable do
      if @confirmable.has_no_password?
        do_show
      else
        do_confirm
      end
    end
    if !@confirmable.errors.empty?
      self.resource = @confirmable
      render 'devise/confirmations/new' #Change this if you don't have the views on default path 
    end
  end
  
  protected

  def with_unconfirmed_confirmable
    original_token = params[:confirmation_token]
    confirmation_token = Devise.token_generator.digest(User, :confirmation_token, original_token)
    @confirmable = User.find_or_initialize_with_error_by(:confirmation_token, confirmation_token)
    if !@confirmable.new_record?
      @confirmable.only_if_unconfirmed {yield}
    end
  end

  def do_show
    @confirmation_token = params[:confirmation_token]
    @requires_password = true
    self.resource = @confirmable
    render 'devise/confirmations/show' 
    #Change this if you don't have the views on default path
  end

  def do_confirm
    @confirmable.confirm!
    set_flash_message :notice, :confirmed
    sign_in_and_redirect(resource_name, @confirmable)
  end
end
```

### 2) Change `only_if_unconfirmed` method on your model:  在模型中改变`only_if_unconfirmed`方法

`Devise::Models:unless_confirmed` method doesn't exist in Devise 2.0.0 anymore.
Instead you should use `pending_any_confirmation`.
Devise 2.0.0移除了`Devise::Models:unless_confirmed`方法。
可以使用`pending_any_confirmation`：

```ruby
def only_if_unconfirmed
  pending_any_confirmation {yield}
end
```

### 3) Lists the database fields explicitly for your migrations

Since Devise 2.0 helper methods for your migrations are no longer included. Instead, it explicitly lists the database fields.

```ruby
class AddUserConfirmable < ActiveRecord::Migration
  def self.up
    add_column :users, :confirmation_token, :string
    add_column :users, :confirmed_at, :datetime
    add_column :users, :confirmation_sent_at, :datetime
    # add_column :users, :unconfirmed_email, :string # Only if using reconfirmable
    add_index :users, :confirmation_token, :unique => true

    User.update_all({:confirmed_at => DateTime.now, :confirmation_sent_at => DateTime.now})
  end

  def self.down
    remove_column :users, [:confirmed_at, :confirmation_token, :confirmation_sent_at]
  end
end
```

### 4) Update `config/intializers/devise.rb`
If not using reconfirmable, update the configuration in `config/intializers/devise.rb`

    config.reconfirmable = false


## For Rails 3 & Devise 1.2x  在Rails中使用 Devise 1.2x

### Rspec测试
Note: If you desire to test this override inheritance using RSpec: 
注意：如果你想使用RSpec来测试这个改写的几个：

```ruby
describe ConfirmationsController do

  it "should be a child of Devise::ConfirmationsController" do
    controller.class.superclass.should eq Devise::ConfirmationsController
  end

end
```

### 1) Override `ConfirmationsController` 改写确认控制器

```ruby
# app/controllers/confirmations_controller.rb
class ConfirmationsController < Devise::ConfirmationsController
  # Remove the first skip_before_filter (:require_no_authentication) if you
  # don't want to enable logged users to access the confirmation page.
  skip_before_filter :require_no_authentication
  skip_before_filter :authenticate_user!

  # PUT /resource/confirmation
  def update
    with_unconfirmed_confirmable do
      if @confirmable.has_no_password?
        @confirmable.attempt_set_password(params[:user])
        if @confirmable.valid?
          do_confirm
        else
          do_show
          @confirmable.errors.clear #so that we wont render :new
        end
      else
        self.class.add_error_on(self, :email, :password_already_set)
      end
    end

    if !@confirmable.errors.empty?
      render_with_scope :new
    end
  end

  # GET /resource/confirmation?confirmation_token=abcdef
  def show
    with_unconfirmed_confirmable do
      if @confirmable.has_no_password?
        do_show
      else
        do_confirm
      end
    end
    if !@confirmable.errors.empty?
      self.resource = @confirmable
      render_with_scope :new
    end
  end
  
  protected

  def with_unconfirmed_confirmable
    @confirmable = User.find_or_initialize_with_error_by(:confirmation_token, params[:confirmation_token])
    if !@confirmable.new_record?
      @confirmable.only_if_unconfirmed {yield}
    end
  end

  def do_show
    @confirmation_token = params[:confirmation_token]
    @requires_password = true
    self.resource = @confirmable
    render_with_scope :show
  end

  def do_confirm
    @confirmable.confirm!
    set_flash_message :notice, :confirmed
    sign_in_and_redirect(resource_name, @confirmable)
  end
end
```

### 2) Add a custom confirmations view 添加一个自定义的视图

```erb
# app/views/confirmations/show.html.erb
<h2>Account Activation</h2>

<%= form_for resource, :as => resource_name, :url => update_user_confirmation_path, :html => {:method => 'put'}, :id => 'activation-form' do |f| %>
  <%= devise_error_messages! %>
  <fieldset>
    <legend>Account Activation<% if resource.user_name %> for <%= resource.user_name %><% end %></legend>

  <% if @requires_password %>
      <p><%= f.label :password,'Choose a Password:' %> <%= f.password_field :password %></p>
      <p><%= f.label :password_confirmation,'Password Confirmation:' %> <%= f.password_field :password_confirmation %></p>
  <% end %>
  <%= hidden_field_tag :confirmation_token,@confirmation_token %>
  <p><%= f.submit "Activate" %></p>
  </fieldset>
<% end %>
```
Rails 4 change put to patch
```
<%= form_for resource, :as => resource_name, :url => update_user_confirmation_path, :html => {:method => 'patch'}, :id => 'activation-form' do |f| %>
```

### 3) Update `config/routes.rb` 更新路由

```ruby
  as :user do
      match '/user/confirmation' => 'confirmations#update', :via => :put, :as => :update_user_confirmation
  end
  devise_for :users, :controllers => { :confirmations => "confirmations" }
```

Rails 4 change put to patch
在Rails 4中将put改为patch：

```ruby
  as :user do
      patch '/user/confirmation' => 'confirmations#update', :via => :patch, :as => :update_user_confirmation
  end
  devise_for :users, :controllers => { :confirmations => "confirmations" }
```

### 4) Add these methods to your user model: 将这些方法添加到user模型

```ruby
  # new function to set the password without knowing the current password used in our confirmation controller. 
  def attempt_set_password(params)
    p = {}
    p[:password] = params[:password]
    p[:password_confirmation] = params[:password_confirmation]
    update_attributes(p)
  end
  # new function to return whether a password has been set
  def has_no_password?
    self.encrypted_password.blank?
  end
  
  # new function to provide access to protected method unless_confirmed
  def only_if_unconfirmed
    unless_confirmed {yield}
  end
```

### 5) If you are using the Validatable strategy  如果使用了验证策略

You will also need to add the following to your user model:
需要将下面这些代码添加到用户模型中：

```ruby
def password_required?
  # Password is required if it is being set, but not for new records
  if !persisted? 
    false
  else
    !password.nil? || !password_confirmation.nil?
  end
end
```

### 6) If you are adding confirmation to an existing dataset

You can grandfather older accounts (no confirmation required) with the following migration:
可以用下面的迁移将旧的账户（没有要求确认的）作为祖父类：

```ruby
class AddUserConfirmable < ActiveRecord::Migration
  def self.up
    change_table :users do |u|
      u.confirmable
    end

    User.update_all({:confirmed_at => DateTime.now, :confirmation_token => "Grandfathered Account", :confirmation_sent_at => DateTime.now})
  end

  def self.down
    remove_column :users, [:confirmed_at, :confirmation_token, :confirmation_sent_at]
  end
end
```


## For Rails 2.3 & Devise 1.0.9 在Rails 2.3中使用devise 1.0.9

### 1) Override `ConfirmationsController`  改写确认控制器

```ruby
# app/controllers/confirmations_controller.rb
class ConfirmationsController < ApplicationController
  include Devise::Controllers::InternalHelpers

  # GET /resource/confirmation/new
  def new
    build_resource
    render_with_scope :new
  end

  # POST /resource/confirmation
  def create
    self.resource = resource_class.send_confirmation_instructions(params[resource_name])

    if resource.errors.empty?
      set_flash_message :notice, :send_instructions
      redirect_to new_session_path(resource_name)
    else
      render_with_scope :new
    end
  end

  # PUT /resource/confirmation
  def update
    with_unconfirmed_confirmable do
      if @confirmable.has_no_password?
        @confirmable.attempt_set_password(params[:user])
        if @confirmable.valid?
          do_confirm
        else
          do_show
          @confirmable.errors.clear #so that we wont render :new
        end
      else
        self.class.add_error_on(self, :email, :password_already_set)
      end
    end

    if !@confirmable.errors.empty?
      render_with_scope :new
    end
  end

  # GET /resource/confirmation?confirmation_token=abcdef
  def show
    with_unconfirmed_confirmable do
      if @confirmable.has_no_password?
        do_show
      else
        do_confirm
      end
    end
    if !@confirmable.errors.empty?
      render_with_scope :new
    end
  end
  
  protected

  def with_unconfirmed_confirmable
    @confirmable = User.find_or_initialize_with_error_by(:confirmation_token, params[:confirmation_token])
    if !@confirmable.new_record?
      @confirmable.only_if_unconfirmed {yield}
    end
  end

  def do_show
    @confirmation_token = params[:confirmation_token]
    @requires_password = true
    self.resource = @confirmable
    render_with_scope :show
  end

  def do_confirm
    @confirmable.confirm!
    set_flash_message :notice, :confirmed
    sign_in_and_redirect(resource_name, @confirmable)
  end
end
```

### 2) Add a custom confirmations view   增加一个自定义确认视图

```erb
# app/views/confirmations/show.html.erb
<h2>Account Activation</h2>
<% form_for resource_name, resource, :url => update_user_confirmation_path, :html => {:method => 'put'}, :id => 'activation-form' do |f| %>
  <%= f.error_messages %>
  <fieldset>
    <legend>Account Activation<% if resource.user_name %> for <%= resource.user_name %><% end %></legend>

  <% if @requires_password %>
      <p><%= f.label :password,'Choose a Password:' %> <%= f.password_field :password %></p>
      <p><%= f.label :password_confirmation,'Password Confirmation:' %> <%= f.password_field :password_confirmation %></p>
  <% end %>
  <%= hidden_field_tag :confirmation_token,@confirmation_token %>
  <p><%= f.submit "Activate" %></p>
  </fieldset>
<% end %>
```

### 3) Update `config/routes.rb`  更新路由

```ruby
map.update_user_confirmation '/user/confirmation', :controller => 'confirmations', :action => 'update', :conditions => { :method => :put }
```

### 4) Add some methods to your User/scope/whatever model  在模型增加一些方法

```ruby
  # new function to set the password without knowing the current password used in our confirmation controller. 
  def attempt_set_password(params)
    p = {}
    p[:password] = params[:password]
    p[:password_confirmation] = params[:password_confirmation]
    update_attributes(p)
  end

  # new function to return whether a password has been set
  def has_no_password?
    self.encrypted_password.blank?
  end
  
  # new function to provide access to protected method unless_confirmed
  def only_if_unconfirmed
    unless_confirmed {yield}
  end
```

